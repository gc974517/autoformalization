\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Take $ <var:F> $ , $ <var:o> $ , $ <var:g> $ , $ <var:k> $ , $ <var:O> $ are positive integers such that $ <var:k> $ , $ <var:O> $ , $ <var:F> $ , $ <var:g> $ and $ <var:o> \geq <nat:2> $ . We claim that some $ <var:W> $ is said to be a <def:five-composite> number when $ <var:W> = <var:o> \cdot <var:k> \cdot <var:g> \cdot <var:F> \cdot <var:O> $ . \end{definition} \begin{theorem} The positive integer <nat:5280> is <def:five-composite> . \end{theorem} \begin{proof} Recollect that a <def:five-composite> natural number is the product between numbers $ <var:o> $ , $ <var:O> $ , $ <var:k> $ , $ <var:g> $ and $ <var:F> $ larger than or equivalent to <nat:2> . Let $ <var:O> = <nat:12> $ , $ <var:F> = <nat:5> $ , $ <var:k> = <nat:4> $ , $ <var:g> = <nat:11> $ , and $ <var:o> = <nat:2> $ . We demonstrate the result is valid in view of $ <var:k> = <nat:4> $ , $ <var:F> = <nat:5> $ , $ <var:g> = <nat:11> $ , $ <var:O> = <nat:12> $ and $ <var:o> = <nat:2> \geq <nat:2> $ . As a consequence , <nat:5280> is a <def:five-composite> integer is proven . Thus , $ <nat:5280> = <var:k> \cdot <var:O> \cdot <var:g> \cdot <var:o> \cdot <var:F> $ is proven . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:five-composite> ( <var:W> : nat ) := exists <var:F> <var:o> <var:g> <var:k> <var:O> : nat , ( <var:k> >= <nat:2> ) /\ ( <var:O> >= <nat:2> ) /\ ( <var:F> >= <nat:2> ) /\ ( <var:g> >= <nat:2> ) /\ ( <var:o> >= <nat:2> ) /\ ( <var:W> = <var:o> * <var:k> * <var:g> * <var:F> * <var:O> ) . Theorem <genP:1> : <def:five-composite> <nat:5280> . Proof . unfold <def:five-composite> . exists <nat:5> . exists <nat:2> . exists <nat:11> . exists <nat:4> . exists <nat:12> . assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 