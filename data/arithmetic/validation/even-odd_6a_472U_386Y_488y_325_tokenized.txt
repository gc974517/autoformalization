\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:a> * <nat:6> + <nat:472> * <var:U> + <nat:386> * <var:Y> + <nat:488> * <var:y> + <nat:325> $ is odd for some natural numbers $ <var:Y> $ , $ <var:a> $ , $ <var:U> $ , and $ <var:y> $ . \end{theorem} \begin{proof} It can be demonstrated that that the expression $ <nat:6> \cdot <var:a> + <var:y> \cdot <nat:488> + <var:U> \cdot <nat:472> + <var:Y> \cdot <nat:386> + <nat:325> $ is odd since the expression $ <nat:6> \cdot <var:a> + <nat:472> \cdot <var:U> + <nat:386> \cdot <var:Y> + <var:y> \cdot <nat:488> $ is known as even . See that the terms $ <nat:472> \times <var:U> $ in addition to $ <var:Y> \times <nat:386> $ are guaranteed to be even . This claim holds from the knowledge taking the product between an even natural with an arbitrary element of $ \mathbb{Z}^+ $ will be an even integer . In addition to this , $ <nat:6> \times <var:a> $ is known as an even whole number . This fact is true by reason that multiplying of an even positive integer and some natural number must be even . The product $ <nat:488> \times <var:y> $ is trivially an even natural number . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:Y> <var:a> <var:U> <var:y> : nat , Nat . odd ( <nat:6> * <var:a> + <nat:472> * <var:U> + <nat:386> * <var:Y> + <nat:488> * <var:y> + <nat:325> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:472> * <var:U> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:386> * <var:Y> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:6> * <var:a> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:488> * <var:y> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:6> * <var:a> + <nat:472> * <var:U> + <nat:386> * <var:Y> + <nat:488> * <var:y> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 