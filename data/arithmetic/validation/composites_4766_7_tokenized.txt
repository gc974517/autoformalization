\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Take $ <var:Z> $ , $ <var:O> $ , $ <var:w> $ , $ <var:c> $ , $ <var:a> $ , $ <var:m> $ , $ <var:k> \in \mathbb{Z}^+ $ where $ <var:c> $ , $ <var:Z> $ , $ <var:a> $ , $ <var:w> $ , $ <var:O> $ , $ <var:k> $ , $ <var:m> \geq <nat:2> $ . Take that $ <var:g> \in \mathbb{N} $ is named a <def:seven-composite> positive integer if $ <var:g> = <var:m> \times <var:k> \times <var:a> \times <var:w> \times <var:O> \times <var:c> \times <var:Z> $ . \end{definition} \begin{theorem} The whole number <nat:201600> is a <def:seven-composite> positive integer . \end{theorem} \begin{proof} Recall that a <def:seven-composite> natural number is the product between whole numbers $ <var:w> $ , $ <var:a> $ , $ <var:m> $ , $ <var:Z> $ , $ <var:c> $ , $ <var:k> $ , $ <var:O> $ such that $ <var:k> $ , $ <var:c> $ , $ <var:O> $ , $ <var:w> $ , $ <var:a> $ , $ <var:Z> $ and $ <var:m> \geq <nat:2> $ . Observe that $ <nat:4> $ , $ <nat:9> $ , $ <nat:8> $ , $ <nat:5> $ , $ <nat:10> $ , $ <nat:7> $ , and $ <nat:2> $ are larger than or equal to <nat:2> . Also observe that also $ <nat:201600> = <var:w> * <var:O> * <var:m> * <var:Z> * <var:k> * <var:a> * <var:c> $ gives $ <var:m> = <nat:5> $ , $ <var:Z> = <nat:2> $ , $ <var:O> = <nat:8> $ , $ <var:a> = <nat:7> $ , $ <var:w> = <nat:10> $ , $ <var:c> = <nat:9> $ , $ <var:k> = <nat:4> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:g> : nat ) := exists <var:Z> <var:O> <var:w> <var:c> <var:a> <var:m> <var:k> : nat , ( <var:c> >= <nat:2> ) /\ ( <var:Z> >= <nat:2> ) /\ ( <var:a> >= <nat:2> ) /\ ( <var:w> >= <nat:2> ) /\ ( <var:O> >= <nat:2> ) /\ ( <var:k> >= <nat:2> ) /\ ( <var:m> >= <nat:2> ) /\ ( <var:g> = <var:m> * <var:k> * <var:a> * <var:w> * <var:O> * <var:c> * <var:Z> ) . Theorem <genP:1> : <def:seven-composite> <nat:201600> . Proof . unfold <def:seven-composite> . assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } exists <nat:2> . exists <nat:8> . exists <nat:10> . exists <nat:9> . exists <nat:7> . exists <nat:5> . exists <nat:4> . repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 