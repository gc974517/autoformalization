\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:325> + <nat:344> \times <var:C> + <var:z> \times <nat:138> + <nat:324> \times <var:A> + <var:D> \times <nat:404> + <nat:208> \times <var:O> + <var:H> \times <nat:264> + <nat:326> \times <var:V> + <nat:32> \times <var:B> $ will be odd . \end{theorem} \begin{proof} In addition , we know that the positive integers $ <nat:344> $ , $ <nat:138> $ , $ <nat:324> $ , $ <nat:404> $ , $ <nat:208> $ , $ <nat:264> $ , $ <nat:326> $ , plus $ <nat:32> $ are guaranteed to be even natural numbers . Hence , the terms $ <var:C> * <nat:344> $ , $ <var:z> * <nat:138> $ , $ <var:A> * <nat:324> $ , $ <var:D> * <nat:404> $ , $ <nat:208> * <var:O> $ , $ <nat:264> * <var:H> $ , $ <var:V> * <nat:326> $ , and $ <nat:32> * <var:B> $ must be even additionally . Recall that $ <nat:325> $ is clearly an odd natural number . We verify our main result holds . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:C> <var:z> <var:A> <var:D> <var:O> <var:H> <var:V> <var:B> : nat , Nat . odd ( <nat:344> * <var:C> + <nat:138> * <var:z> + <nat:324> * <var:A> + <nat:404> * <var:D> + <nat:208> * <var:O> + <nat:264> * <var:H> + <nat:326> * <var:V> + <nat:32> * <var:B> + <nat:325> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:344> = true ) . { auto . } assert ( <genH> : Nat . even <nat:138> = true ) . { auto . } assert ( <genH> : Nat . even <nat:324> = true ) . { auto . } assert ( <genH> : Nat . even <nat:404> = true ) . { auto . } assert ( <genH> : Nat . even <nat:208> = true ) . { auto . } assert ( <genH> : Nat . even <nat:264> = true ) . { auto . } assert ( <genH> : Nat . even <nat:326> = true ) . { auto . } assert ( <genH> : Nat . even <nat:32> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:344> * <var:C> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:138> * <var:z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:324> * <var:A> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:404> * <var:D> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:208> * <var:O> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:264> * <var:H> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:326> * <var:V> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:32> * <var:B> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:325> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 