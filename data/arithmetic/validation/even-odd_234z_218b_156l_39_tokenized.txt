\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Assuming every positive integers $ <var:b> $ , $ <var:z> $ , and $ <var:l> $ the formula $ <nat:234> \times <var:z> + <var:l> \times <nat:156> + <nat:39> + <var:b> \times <nat:218> $ must be odd . \end{theorem} \begin{proof} Our result is proven by reason that $ <var:b> * <nat:218> + <nat:234> * <var:z> + <nat:156> * <var:l> $ is guaranteed to be even . What's more , the pairs $ <nat:218> \cdot <var:b> $ , $ <nat:234> \cdot <var:z> $ , and $ <nat:156> \cdot <var:l> $ are known as even whole numbers from the fact the integers $ <nat:218> $ , $ <nat:234> $ , in addition to $ <nat:156> $ are clearly fundamentally even naturals . The summation $ <var:z> <nat:234> + <nat:218> <var:b> + <var:l> <nat:156> $ will be fundamentally even from the knowledge the adding of an even natural number with an even number in $ \mathbb{Z}^+ $ is an even positive integer plus because the product between even whole numbers and an arbitrary natural is an even positive integer . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:b> <var:z> <var:l> : nat , Nat . odd ( <nat:234> * <var:z> + <nat:156> * <var:l> + <nat:218> * <var:b> + <nat:39> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:218> = true ) . { auto . } assert ( <genH> : Nat . even <nat:234> = true ) . { auto . } assert ( <genH> : Nat . even <nat:156> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:218> * <var:b> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:234> * <var:z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:156> * <var:l> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:234> * <var:z> + <nat:156> * <var:l> + <nat:218> * <var:b> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 