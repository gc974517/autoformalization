\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Only if we have satisfying the condition that $ <var:t> $ , $ <var:z> $ , $ <var:h> $ , $ <var:m> $ , $ <var:q> $ , $ <var:g> $ and $ <var:c> > <nat:1> $ so that taking $ <var:L> \in \mathbb{Z}^+ $ , $ <var:g> \cdot <var:t> \cdot <var:c> \cdot <var:z> \cdot <var:q> \cdot <var:h> \cdot <var:m> = <var:L> $ , define that $ <var:L> $ is <def:seven-composite> with some $ <var:c> $ , $ <var:t> $ , $ <var:h> $ , $ <var:m> $ , $ <var:g> $ , $ <var:z> $ , $ <var:q> \in \mathbb{Z}^+ $ . Therefore the whole number <nat:483840> is a <def:seven-composite> whole number . \end{theorem} \begin{proof} We justify <nat:483840> is the product between some positive integers $ <var:c> $ , $ <var:z> $ , $ <var:q> $ , $ <var:m> $ , $ <var:h> $ , $ <var:g> $ and $ <var:t> $ . Observe that $ <nat:8> $ , $ <nat:2> $ , $ <nat:7> $ , $ <nat:4> $ , $ <nat:9> $ , $ <nat:12> $ and $ <nat:10> > <nat:1> $ . Plus notice additionally $ <nat:483840> = <var:h> \times <var:t> \times <var:g> \times <var:m> \times <var:z> \times <var:c> \times <var:q> $ indicates $ <var:h> = <nat:10> $ , $ <var:q> = <nat:4> $ , $ <var:z> = <nat:8> $ , $ <var:c> = <nat:12> $ , $ <var:t> = <nat:7> $ , $ <var:m> = <nat:2> $ , $ <var:g> = <nat:9> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:L> : nat ) := exists <var:c> <var:t> <var:h> <var:m> <var:g> <var:z> <var:q> : nat , ( <var:t> > <nat:1> ) /\ ( <var:z> > <nat:1> ) /\ ( <var:h> > <nat:1> ) /\ ( <var:m> > <nat:1> ) /\ ( <var:q> > <nat:1> ) /\ ( <var:g> > <nat:1> ) /\ ( <var:c> > <nat:1> ) /\ ( <var:g> * <var:t> * <var:c> * <var:z> * <var:q> * <var:h> * <var:m> = <var:L> ) . Theorem <genP:1> : <def:seven-composite> <nat:483840> . Proof . unfold <def:seven-composite> . assert ( <genH> : <nat:8> > <nat:1> ) . { lia . } assert ( <genH> : <nat:2> > <nat:1> ) . { lia . } assert ( <genH> : <nat:7> > <nat:1> ) . { lia . } assert ( <genH> : <nat:4> > <nat:1> ) . { lia . } assert ( <genH> : <nat:9> > <nat:1> ) . { lia . } assert ( <genH> : <nat:12> > <nat:1> ) . { lia . } assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } exists <nat:12> . exists <nat:7> . exists <nat:10> . exists <nat:2> . exists <nat:9> . exists <nat:8> . exists <nat:4> . repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 