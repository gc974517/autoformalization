\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:A> <nat:428> + <nat:254> <var:w> + <nat:77> + <nat:488> <var:B> $ is odd for unknowns $ <var:A> $ , $ <var:w> $ , and $ <var:B> $ . \end{theorem} \begin{proof} We know the expression $ <nat:77> + <var:B> * <nat:488> + <nat:428> * <var:A> + <nat:254> * <var:w> $ is guaranteed to be odd from the fact the sum $ <nat:488> * <var:B> + <nat:428> * <var:A> + <var:w> * <nat:254> $ is trivially even . Recall the leading term $ <nat:254> $ is known as even . As a consequence , the term $ <nat:254> <var:w> $ is even also . Notice the product $ <nat:488> <var:B> $ is known as even as a consequence that multiplying of an even integer and a whole number will be an even whole number , which is true by reason that the whole number $ <nat:488> $ is trivially even . Adding on , the term $ <nat:428> <var:A> $ is trivially an even whole number since multiplying of an even natural with some number in $ \mathbb{Z}^+ $ is even and likewise the number $ <nat:428> $ is known to be an even integer . Our lemma is proven from the fact the totaling between even positive integers and even integers must be even . It can be verified that the sum $ <nat:77> + <nat:254> <var:w> + <nat:428> <var:A> + <nat:488> <var:B> $ is odd . Observe the adding of even naturals collectively and an odd element of $ \mathbb{N} $ must be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:A> <var:w> <var:B> : nat , Nat . odd ( <nat:428> * <var:A> + <nat:254> * <var:w> + <nat:488> * <var:B> + <nat:77> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:254> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:254> * <var:w> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:488> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:488> * <var:B> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:428> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:428> * <var:A> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:428> * <var:A> + <nat:254> * <var:w> + <nat:488> * <var:B> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 