\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:274> <var:T> + <var:K> <nat:332> + <nat:443> + <var:X> <nat:130> $ will be odd for any natural numbers $ <var:K> $ , $ <var:T> $ , and $ <var:X> $ . \end{theorem} \begin{proof} Notice that $ <nat:443> $ is known as an odd natural . We verify the expression $ <nat:443> + <var:X> <nat:130> + <nat:332> <var:K> + <var:T> <nat:274> $ is guaranteed to be odd . $ <var:K> <nat:332> + <nat:443> + <nat:130> <var:X> + <var:T> <nat:274> $ is known as odd since the expression $ <nat:130> \times <var:X> + <var:T> \times <nat:274> + <nat:332> \times <var:K> $ is even . The whole numbers $ <nat:130> $ and likewise $ <nat:274> $ are trivially even numbers in $ \mathbb{Z}^+ $ . Therefore , the pairs $ <var:X> <nat:130> $ and likewise $ <var:T> <nat:274> $ will be even at the same time . $ <nat:332> <var:K> $ is even as a consequence that multiplying of an even element of $ \mathbb{N} $ and any whole number will be clearly an even positive integer and the natural number $ <nat:332> $ is even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:K> <var:T> <var:X> : nat , Nat . odd ( <nat:274> * <var:T> + <nat:332> * <var:K> + <nat:130> * <var:X> + <nat:443> ) = true . Proof . intros . assert ( <genH> : Nat . odd <nat:443> = true ) . { auto . } assert ( <genH> : Nat . even <nat:130> = true ) . { auto . } assert ( <genH> : Nat . even <nat:274> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:130> * <var:X> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:274> * <var:T> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:332> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:332> * <var:K> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:274> * <var:T> + <nat:332> * <var:K> + <nat:130> * <var:X> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 