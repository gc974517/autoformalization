\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Given some unknowns $ <var:w> $ , $ <var:M> $ , $ <var:s> $ , and $ <var:Y> $ the expression $ <var:s> <nat:288> + <nat:364> <var:M> + <var:w> <nat:2> + <nat:389> + <var:Y> <nat:224> $ is guaranteed to be odd . \end{theorem} \begin{proof} The expression $ <nat:288> * <var:s> + <nat:364> * <var:M> + <nat:224> * <var:Y> + <var:w> * <nat:2> $ is guaranteed to be even . $ <var:Y> \times <nat:224> $ is obviously even . See that the terms $ <nat:288> \times <var:s> $ additionally $ <var:M> \times <nat:364> $ are known to be even positive integers by reason that the product of an even whole number and a element of $ \mathbb{N} $ is guaranteed to be even . Likewise , the product $ <nat:2> \times <var:w> $ is obviously an even natural as a consequence that taking the product of an even natural number and a whole number is even . The main result is proven as a consequence that the summation of even integers with an even integer is guaranteed to be even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:w> <var:M> <var:s> <var:Y> : nat , Nat . odd ( <nat:288> * <var:s> + <nat:364> * <var:M> + <nat:2> * <var:w> + <nat:224> * <var:Y> + <nat:389> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:224> * <var:Y> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:288> * <var:s> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:364> * <var:M> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:2> * <var:w> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:288> * <var:s> + <nat:364> * <var:M> + <nat:2> * <var:w> + <nat:224> * <var:Y> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 