\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Given any positive numbers $ <var:S> $ , $ <var:l> $ , $ <var:V> $ , $ <var:Z> $ , $ <var:m> $ , $ <var:I> $ , and $ <var:H> $ the summation $ <var:S> \cdot <nat:78> + <var:m> \cdot <nat:348> + <nat:280> \cdot <var:I> + <var:H> \cdot <nat:268> + <var:Z> \cdot <nat:374> + <var:V> \cdot <nat:160> + <var:l> \cdot <nat:442> + <nat:271> $ is guaranteed to be odd . \end{theorem} \begin{proof} We know that $ <var:S> * <nat:78> + <nat:348> * <var:m> + <var:I> * <nat:280> + <nat:374> * <var:Z> + <nat:442> * <var:l> + <nat:268> * <var:H> + <var:V> * <nat:160> $ is trivially even . The integer $ <nat:348> $ is guaranteed to be even Additionally , the natural numbers $ <nat:160> $ and also $ <nat:78> $ are even numbers in $ \mathbb{N} $ Further , observe that the natural numbers $ <nat:374> $ , $ <nat:442> $ , plus $ <nat:268> $ are obviously even positive integers The positive integer $ <nat:280> $ is trivially even \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:S> <var:l> <var:V> <var:Z> <var:m> <var:I> <var:H> : nat , Nat . odd ( <nat:78> * <var:S> + <nat:348> * <var:m> + <nat:280> * <var:I> + <nat:268> * <var:H> + <nat:374> * <var:Z> + <nat:160> * <var:V> + <nat:442> * <var:l> + <nat:271> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:348> = true ) . { auto . } assert ( <genH> : Nat . even <nat:160> = true ) . { auto . } assert ( <genH> : Nat . even <nat:78> = true ) . { auto . } assert ( <genH> : Nat . even <nat:374> = true ) . { auto . } assert ( <genH> : Nat . even <nat:442> = true ) . { auto . } assert ( <genH> : Nat . even <nat:268> = true ) . { auto . } assert ( <genH> : Nat . even <nat:280> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:78> * <var:S> + <nat:348> * <var:m> + <nat:280> * <var:I> + <nat:268> * <var:H> + <nat:374> * <var:Z> + <nat:160> * <var:V> + <nat:442> * <var:l> ) = true ) . { repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 