\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} For some $ <var:M> $ , $ <var:b> $ , $ <var:z> $ , $ <var:O> $ , $ <var:N> $ , and $ <var:F> $ $ <nat:156> \times <var:N> + <nat:192> \times <var:F> + <var:O> \times <nat:314> + <var:M> \times <nat:332> + <nat:227> + <var:b> \times <nat:438> + <var:z> \times <nat:168> $ will be odd . \end{theorem} \begin{proof} Take note the pairs $ <nat:192> <var:F> $ , $ <var:N> <nat:156> $ , $ <nat:314> <var:O> $ , $ <var:z> <nat:168> $ , as well as $ <var:b> <nat:438> $ are obviously even . This fact must be true since the numbers $ <nat:192> $ , $ <nat:156> $ , $ <nat:314> $ , $ <nat:168> $ , and $ <nat:438> $ are even . The positive integer $ <nat:332> $ is guaranteed to be an even natural . For this reason , the term $ <var:M> <nat:332> $ is even as well . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:M> <var:b> <var:z> <var:O> <var:N> <var:F> : nat , Nat . odd ( <nat:156> * <var:N> + <nat:192> * <var:F> + <nat:314> * <var:O> + <nat:332> * <var:M> + <nat:438> * <var:b> + <nat:168> * <var:z> + <nat:227> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:192> = true ) . { auto . } assert ( <genH> : Nat . even <nat:156> = true ) . { auto . } assert ( <genH> : Nat . even <nat:314> = true ) . { auto . } assert ( <genH> : Nat . even <nat:168> = true ) . { auto . } assert ( <genH> : Nat . even <nat:438> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:192> * <var:F> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:156> * <var:N> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:314> * <var:O> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:168> * <var:z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:438> * <var:b> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:332> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:332> * <var:M> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 