\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:88> \cdot <var:X> + <nat:97> + <nat:158> \cdot <var:e> + <var:s> \cdot <nat:12> $ is odd assuming every natural numbers $ <var:X> $ , $ <var:s> $ , and $ <var:e> $ . \end{theorem} \begin{proof} It can be demonstrated that the formula $ <nat:158> \cdot <var:e> + <nat:88> \cdot <var:X> + <nat:12> \cdot <var:s> + <nat:97> $ is obviously odd by reason that $ <var:s> \cdot <nat:12> + <nat:88> \cdot <var:X> + <var:e> \cdot <nat:158> $ is trivially even . On top of this , observe the products $ <var:s> <nat:12> $ , $ <var:X> <nat:88> $ , plus $ <var:e> <nat:158> $ are guaranteed to be even integers . This claim is proven from the knowledge taking the product between an even integer and a positive integer will be even plus the natural numbers $ <nat:12> $ , $ <nat:88> $ , in addition to $ <nat:158> $ will be even numbers in $ \mathbb{Z}^+ $ . The totaling of even numbers in $ \mathbb{Z}^+ $ together and an odd natural is odd . Consequently , $ <var:X> \cdot <nat:88> + <nat:158> \cdot <var:e> + <nat:97> + <nat:12> \cdot <var:s> $ is odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:X> <var:s> <var:e> : nat , Nat . odd ( <nat:88> * <var:X> + <nat:158> * <var:e> + <nat:12> * <var:s> + <nat:97> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:12> = true ) . { auto . } assert ( <genH> : Nat . even <nat:88> = true ) . { auto . } assert ( <genH> : Nat . even <nat:158> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:12> * <var:s> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:88> * <var:X> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:158> * <var:e> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:88> * <var:X> + <nat:158> * <var:e> + <nat:12> * <var:s> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 