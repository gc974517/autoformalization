\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Assuming every positive numbers $ <var:j> $ , $ <var:r> $ , and $ <var:g> $ the formula $ <nat:164> \cdot <var:g> + <nat:19> + <var:j> \cdot <nat:348> + <nat:102> \cdot <var:r> $ will be odd . \end{theorem} \begin{proof} The summation of an even natural number with an odd positive integer will be odd . We know the summation $ <nat:102> \cdot <var:r> + <var:g> \cdot <nat:164> + <nat:348> \cdot <var:j> + <nat:19> $ is known as odd by reason that the formula $ <nat:102> * <var:r> + <nat:348> * <var:j> + <var:g> * <nat:164> $ is known to be even . Building on , we know that the positive integers $ <nat:102> $ , $ <nat:348> $ , and $ <nat:164> $ will be even whole numbers . For this reason , the terms $ <var:r> \times <nat:102> $ , $ <nat:348> \times <var:j> $ , and $ <nat:164> \times <var:g> $ must be even too . We justify the sum $ <var:r> \times <nat:102> + <nat:19> + <var:g> \times <nat:164> + <nat:348> \times <var:j> $ will be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:j> <var:r> <var:g> : nat , Nat . odd ( <nat:164> * <var:g> + <nat:348> * <var:j> + <nat:102> * <var:r> + <nat:19> ) = true . Proof . intros . rewrite Nat . odd_add . assert ( <genH> : Nat . even <nat:102> = true ) . { auto . } assert ( <genH> : Nat . even <nat:348> = true ) . { auto . } assert ( <genH> : Nat . even <nat:164> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:102> * <var:r> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:348> * <var:j> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:164> * <var:g> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:164> * <var:g> + <nat:348> * <var:j> + <nat:102> * <var:r> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 