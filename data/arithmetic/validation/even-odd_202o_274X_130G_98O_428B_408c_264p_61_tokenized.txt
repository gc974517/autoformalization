\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:202> * <var:o> + <var:X> * <nat:274> + <nat:130> * <var:G> + <nat:98> * <var:O> + <nat:428> * <var:B> + <nat:61> + <nat:408> * <var:c> + <var:p> * <nat:264> $ is guaranteed to be odd using terms $ <var:X> $ , $ <var:B> $ , $ <var:c> $ , $ <var:p> $ , $ <var:o> $ , $ <var:G> $ , and $ <var:O> $ . \end{theorem} \begin{proof} Recall that the pairs $ <nat:264> \cdot <var:p> $ , $ <nat:130> \cdot <var:G> $ , $ <var:o> \cdot <nat:202> $ , $ <nat:98> \cdot <var:O> $ , $ <nat:408> \cdot <var:c> $ , and also $ <nat:274> \cdot <var:X> $ are guaranteed to be even . This holds since multiplying between an even element of $ \mathbb{Z}^+ $ with a integer must be even . $ <var:B> \cdot <nat:428> $ is known to be an even number in $ \mathbb{N} $ as a consequence that the multiplication of an even element of $ \mathbb{N} $ and a number in $ \mathbb{Z}^+ $ is guaranteed to be trivially an even number in $ \mathbb{Z}^+ $ . Notice the summing between even numbers and an odd number in $ \mathbb{N} $ is guaranteed to be by its very nature an odd integer . Notice that $ <nat:61> $ is known to be an odd whole number . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:X> <var:B> <var:c> <var:p> <var:o> <var:G> <var:O> : nat , Nat . odd ( <nat:202> * <var:o> + <nat:274> * <var:X> + <nat:130> * <var:G> + <nat:98> * <var:O> + <nat:428> * <var:B> + <nat:408> * <var:c> + <nat:264> * <var:p> + <nat:61> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:264> * <var:p> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:130> * <var:G> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:202> * <var:o> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:98> * <var:O> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:408> * <var:c> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:274> * <var:X> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:428> * <var:B> ) = true ) . { rewrite Nat . even_mul . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . assert ( <genH> : Nat . odd <nat:61> = true ) . { auto . } rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 