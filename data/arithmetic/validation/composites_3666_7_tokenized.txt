\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Take $ <var:T> $ , $ <var:g> $ , $ <var:n> $ , $ <var:x> $ , $ <var:G> $ , $ <var:o> $ , $ <var:W> $ are numbers satisfying the condition that $ <var:G> $ , $ <var:o> $ , $ <var:n> $ , $ <var:W> $ , $ <var:g> $ , $ <var:x> $ , $ <var:T> > <nat:1> $ . Let that $ <var:M> \in \mathbb{N} $ is named a <def:seven-composite> positive integer given $ <var:M> = <var:n> \cdot <var:g> \cdot <var:T> \cdot <var:x> \cdot <var:W> \cdot <var:G> \cdot <var:o> $ . Hence $ <var:M> = <nat:950400> $ is a <def:seven-composite> whole number . \end{theorem} \begin{proof} Remember that <nat:950400> is <def:seven-composite> with the condition that <nat:950400> is the multiplication between $ <var:T> $ , $ <var:x> $ , $ <var:o> $ , $ <var:W> $ , $ <var:n> $ , $ <var:g> $ and $ <var:G> $ more than <nat:1> . Take $ <var:W> = <nat:12> $ , $ <var:x> = <nat:9> $ , $ <var:G> = <nat:2> $ , $ <var:T> = <nat:8> $ , $ <var:n> = <nat:10> $ , $ <var:g> = <nat:11> $ and $ <var:o> = <nat:5> $ . Note $ <var:T> = <nat:8> $ , $ <var:g> = <nat:11> $ , $ <var:n> = <nat:10> $ , $ <var:o> = <nat:5> $ , $ <var:W> = <nat:12> $ , $ <var:x> = <nat:9> $ and $ <var:G> = <nat:2> > <nat:1> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:M> : nat ) := exists <var:T> <var:g> <var:n> <var:x> <var:G> <var:o> <var:W> : nat , ( <var:G> > <nat:1> ) /\ ( <var:o> > <nat:1> ) /\ ( <var:n> > <nat:1> ) /\ ( <var:W> > <nat:1> ) /\ ( <var:g> > <nat:1> ) /\ ( <var:x> > <nat:1> ) /\ ( <var:T> > <nat:1> ) /\ ( <var:M> = <var:n> * <var:g> * <var:T> * <var:x> * <var:W> * <var:G> * <var:o> ) . Theorem <genP:1> : <def:seven-composite> <nat:950400> . Proof . unfold <def:seven-composite> . exists <nat:8> . exists <nat:11> . exists <nat:10> . exists <nat:9> . exists <nat:2> . exists <nat:5> . exists <nat:12> . assert ( <genH> : <nat:8> > <nat:1> ) . { lia . } assert ( <genH> : <nat:11> > <nat:1> ) . { lia . } assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } assert ( <genH> : <nat:5> > <nat:1> ) . { lia . } assert ( <genH> : <nat:12> > <nat:1> ) . { lia . } assert ( <genH> : <nat:9> > <nat:1> ) . { lia . } assert ( <genH> : <nat:2> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 