\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:G> \cdot <nat:300> + <nat:262> \cdot <var:m> + <var:r> \cdot <nat:494> + <nat:72> \cdot <var:C> + <var:Z> \cdot <nat:426> + <nat:366> \cdot <var:z> + <nat:279> $ is odd using some variables $ <var:m> $ , $ <var:z> $ , $ <var:Z> $ , $ <var:G> $ , $ <var:r> $ , and $ <var:C> $ . \end{theorem} \begin{proof} We verify our result is true . Observe that $ <nat:279> $ is known to be an odd number . It can be verified that the summation $ <var:r> \times <nat:494> + <nat:366> \times <var:z> + <nat:426> \times <var:Z> + <var:m> \times <nat:262> + <var:C> \times <nat:72> + <var:G> \times <nat:300> $ is known as even , because the summation of an even positive integer and an even element of $ \mathbb{N} $ must be even plus the understanding that multiplying of even whole numbers is even . Remember the natural numbers $ <nat:300> $ , $ <nat:262> $ , plus $ <nat:366> $ are even numbers The whole numbers $ <nat:72> $ and likewise $ <nat:494> $ are known as even Building on , the whole number $ <nat:426> $ is even \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:m> <var:z> <var:Z> <var:G> <var:r> <var:C> : nat , Nat . odd ( <nat:300> * <var:G> + <nat:262> * <var:m> + <nat:494> * <var:r> + <nat:72> * <var:C> + <nat:426> * <var:Z> + <nat:366> * <var:z> + <nat:279> ) = true . Proof . intros . assert ( <genH> : Nat . odd <nat:279> = true ) . { auto . } assert ( <genH> : Nat . even <nat:300> = true ) . { auto . } assert ( <genH> : Nat . even <nat:262> = true ) . { auto . } assert ( <genH> : Nat . even <nat:366> = true ) . { auto . } assert ( <genH> : Nat . even <nat:72> = true ) . { auto . } assert ( <genH> : Nat . even <nat:494> = true ) . { auto . } assert ( <genH> : Nat . even <nat:426> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:300> * <var:G> + <nat:262> * <var:m> + <nat:494> * <var:r> + <nat:72> * <var:C> + <nat:426> * <var:Z> + <nat:366> * <var:z> ) = true ) . { repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 