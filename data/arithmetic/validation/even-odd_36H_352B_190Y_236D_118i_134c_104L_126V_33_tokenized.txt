\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:33> + <var:H> * <nat:36> + <nat:352> * <var:B> + <nat:190> * <var:Y> + <nat:236> * <var:D> + <var:i> * <nat:118> + <nat:134> * <var:c> + <var:L> * <nat:104> + <nat:126> * <var:V> $ will be odd . \end{theorem} \begin{proof} Further , the natural numbers $ <nat:36> $ , $ <nat:352> $ , $ <nat:190> $ , $ <nat:236> $ , $ <nat:118> $ , $ <nat:134> $ , $ <nat:104> $ , and $ <nat:126> $ must be even . So , the pairs $ <nat:36> * <var:H> $ , $ <nat:352> * <var:B> $ , $ <nat:190> * <var:Y> $ , $ <nat:236> * <var:D> $ , $ <nat:118> * <var:i> $ , $ <nat:134> * <var:c> $ , $ <var:L> * <nat:104> $ , and also $ <nat:126> * <var:V> $ is guaranteed to be even also . The totaling between an even number in $ \mathbb{N} $ and an odd natural is an odd element of $ \mathbb{N} $ . See that $ <nat:33> $ is an odd element of $ \mathbb{Z}^+ $ . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:H> <var:B> <var:Y> <var:D> <var:i> <var:c> <var:L> <var:V> : nat , Nat . odd ( <nat:36> * <var:H> + <nat:352> * <var:B> + <nat:190> * <var:Y> + <nat:236> * <var:D> + <nat:118> * <var:i> + <nat:134> * <var:c> + <nat:104> * <var:L> + <nat:126> * <var:V> + <nat:33> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:36> = true ) . { auto . } assert ( <genH> : Nat . even <nat:352> = true ) . { auto . } assert ( <genH> : Nat . even <nat:190> = true ) . { auto . } assert ( <genH> : Nat . even <nat:236> = true ) . { auto . } assert ( <genH> : Nat . even <nat:118> = true ) . { auto . } assert ( <genH> : Nat . even <nat:134> = true ) . { auto . } assert ( <genH> : Nat . even <nat:104> = true ) . { auto . } assert ( <genH> : Nat . even <nat:126> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:36> * <var:H> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:352> * <var:B> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:190> * <var:Y> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:236> * <var:D> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:118> * <var:i> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:134> * <var:c> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:104> * <var:L> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:126> * <var:V> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . assert ( <genH> : Nat . odd <nat:33> = true ) . { auto . } rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 