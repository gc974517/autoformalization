\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:92> <var:f> + <var:N> <nat:388> + <var:l> <nat:118> + <nat:479> + <nat:98> <var:r> $ is guaranteed to be odd . \end{theorem} \begin{proof} The summation $ <nat:388> * <var:N> + <var:r> * <nat:98> + <var:f> * <nat:92> + <var:l> * <nat:118> $ is trivially even . See the summing between an even positive integer and an even natural number will be an even number in $ \mathbb{N} $ . The leading terms $ <nat:388> $ , $ <nat:98> $ , $ <nat:92> $ , $ <nat:118> $ , are clearly even . Consequently , the pairs $ <var:N> <nat:388> $ , $ <var:r> <nat:98> $ , $ <nat:92> <var:f> $ , $ <nat:118> <var:l> $ , must be even at the same time . It can be justified that $ <nat:118> \cdot <var:l> + <var:f> \cdot <nat:92> + <var:r> \cdot <nat:98> + <var:N> \cdot <nat:388> + <nat:479> $ will be odd . See $ <nat:479> $ is guaranteed to be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:f> <var:N> <var:l> <var:r> : nat , Nat . odd ( <nat:92> * <var:f> + <nat:388> * <var:N> + <nat:118> * <var:l> + <nat:98> * <var:r> + <nat:479> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:388> = true ) . { auto . } assert ( <genH> : Nat . even <nat:98> = true ) . { auto . } assert ( <genH> : Nat . even <nat:92> = true ) . { auto . } assert ( <genH> : Nat . even <nat:118> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:388> * <var:N> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:98> * <var:r> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:92> * <var:f> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:118> * <var:l> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:92> * <var:f> + <nat:388> * <var:N> + <nat:118> * <var:l> + <nat:98> * <var:r> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:479> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 