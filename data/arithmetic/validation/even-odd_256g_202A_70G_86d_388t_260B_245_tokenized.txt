\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} For any positive terms $ <var:g> $ , $ <var:G> $ , $ <var:A> $ , $ <var:t> $ , $ <var:B> $ , and $ <var:d> $ the summation $ <nat:260> \times <var:B> + <var:d> \times <nat:86> + <var:t> \times <nat:388> + <nat:202> \times <var:A> + <nat:245> + <var:G> \times <nat:70> + <nat:256> \times <var:g> $ is guaranteed to be odd . \end{theorem} \begin{proof} The leading terms $ <nat:256> $ as well as $ <nat:70> $ are obviously even elements of $ \mathbb{N} $ See that the whole numbers $ <nat:388> $ , $ <nat:86> $ , in addition to $ <nat:260> $ are trivially even whole numbers On top of this , observe that the coefficient $ <nat:202> $ is even Since the addition of even elements of $ \mathbb{Z}^+ $ collectively with an odd natural number is guaranteed to be odd in addition to by reason that taking the product between an even natural and an arbitrary element of $ \mathbb{N} $ is guaranteed to be even , thus $ <nat:256> \cdot <var:g> + <nat:245> + <nat:202> \cdot <var:A> + <nat:70> \cdot <var:G> + <var:d> \cdot <nat:86> + <var:t> \cdot <nat:388> + <nat:260> \cdot <var:B> $ instrinsically is odd . Notice that $ <nat:245> $ is clearly odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:g> <var:G> <var:A> <var:t> <var:B> <var:d> : nat , Nat . odd ( <nat:260> * <var:B> + <nat:86> * <var:d> + <nat:388> * <var:t> + <nat:202> * <var:A> + <nat:70> * <var:G> + <nat:256> * <var:g> + <nat:245> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:256> = true ) . { auto . } assert ( <genH> : Nat . even <nat:70> = true ) . { auto . } assert ( <genH> : Nat . even <nat:388> = true ) . { auto . } assert ( <genH> : Nat . even <nat:86> = true ) . { auto . } assert ( <genH> : Nat . even <nat:260> = true ) . { auto . } assert ( <genH> : Nat . even <nat:202> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . assert ( <genH> : Nat . odd <nat:245> = true ) . { auto . } rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 