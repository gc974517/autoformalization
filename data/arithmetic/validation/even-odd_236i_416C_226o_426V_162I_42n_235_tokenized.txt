\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:426> \cdot <var:V> + <nat:235> + <var:i> \cdot <nat:236> + <nat:416> \cdot <var:C> + <var:I> \cdot <nat:162> + <var:n> \cdot <nat:42> + <nat:226> \cdot <var:o> $ is guaranteed to be odd using any whole numbers $ <var:I> $ , $ <var:i> $ , $ <var:n> $ , $ <var:C> $ , $ <var:o> $ , and $ <var:V> $ . \end{theorem} \begin{proof} It can be verified that the formula $ <nat:42> <var:n> + <nat:236> <var:i> + <var:o> <nat:226> + <var:C> <nat:416> + <nat:162> <var:I> + <var:V> <nat:426> + <nat:235> $ must be odd . We utilize $ <var:i> * <nat:236> + <var:C> * <nat:416> + <var:o> * <nat:226> + <nat:426> * <var:V> + <nat:162> * <var:I> + <var:n> * <nat:42> $ is guaranteed to be even . Take note that the numbers $ <nat:416> $ , $ <nat:42> $ , $ <nat:226> $ , $ <nat:236> $ , and also $ <nat:426> $ are even integers Observe that the number $ <nat:162> $ is guaranteed to be even \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:I> <var:i> <var:n> <var:C> <var:o> <var:V> : nat , Nat . odd ( <nat:426> * <var:V> + <nat:236> * <var:i> + <nat:416> * <var:C> + <nat:162> * <var:I> + <nat:42> * <var:n> + <nat:226> * <var:o> + <nat:235> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:416> = true ) . { auto . } assert ( <genH> : Nat . even <nat:42> = true ) . { auto . } assert ( <genH> : Nat . even <nat:226> = true ) . { auto . } assert ( <genH> : Nat . even <nat:236> = true ) . { auto . } assert ( <genH> : Nat . even <nat:426> = true ) . { auto . } assert ( <genH> : Nat . even <nat:162> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:426> * <var:V> + <nat:236> * <var:i> + <nat:416> * <var:C> + <nat:162> * <var:I> + <nat:42> * <var:n> + <nat:226> * <var:o> ) = true ) . { repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 