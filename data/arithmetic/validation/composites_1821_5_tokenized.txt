\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Allow $ <var:B> $ , $ <var:F> $ , $ <var:E> $ , $ <var:Z> $ , $ <var:o> $ as whole numbers greater than or equivalent to <nat:2> . We say that some number $ <var:n> $ will be considered as a <def:five-composite> whole number assuming $ <var:B> \cdot <var:F> \cdot <var:E> \cdot <var:o> \cdot <var:Z> = <var:n> $ . \end{definition} \begin{theorem} The integer <nat:1440> is a <def:five-composite> whole number . \end{theorem} \begin{proof} Remember a <def:five-composite> positive integer is the product between natural numbers $ <var:F> $ , $ <var:E> $ , $ <var:o> $ , $ <var:Z> $ , $ <var:B> $ larger than or equal to <nat:2> . Allow $ <var:o> = <nat:8> $ , $ <var:E> = <nat:2> $ , $ <var:Z> = <nat:5> $ , $ <var:F> = <nat:6> $ , $ <var:B> = <nat:3> $ . We present <nat:1440> is a <def:five-composite> integer . We show <nat:1440> is a <def:five-composite> number seeing that $ <var:E> * <var:F> * <var:Z> * <var:o> * <var:B> = <nat:1440> = <nat:2> * <nat:6> * <nat:5> * <nat:8> * <nat:3> $ and in consideration of $ <var:F> = <nat:6> $ , $ <var:B> = <nat:3> $ , $ <var:o> = <nat:8> $ , $ <var:Z> = <nat:5> $ , $ <var:E> = <nat:2> \geq <nat:2> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:five-composite> ( <var:n> : nat ) := exists <var:B> <var:F> <var:E> <var:Z> <var:o> : nat , ( <var:B> >= <nat:2> ) /\ ( <var:F> >= <nat:2> ) /\ ( <var:E> >= <nat:2> ) /\ ( <var:Z> >= <nat:2> ) /\ ( <var:o> >= <nat:2> ) /\ ( <var:B> * <var:F> * <var:E> * <var:o> * <var:Z> = <var:n> ) . Theorem <genP:1> : <def:five-composite> <nat:1440> . Proof . unfold <def:five-composite> . exists <nat:3> . exists <nat:6> . exists <nat:2> . exists <nat:5> . exists <nat:8> . assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 