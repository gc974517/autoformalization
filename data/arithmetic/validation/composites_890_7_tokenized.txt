\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Assume $ <var:j> $ , $ <var:h> $ , $ <var:M> $ , $ <var:i> $ , $ <var:w> $ , $ <var:X> $ , $ <var:Q> $ as whole numbers . We define that some whole number $ <var:k> $ will be a <def:seven-composite> natural number when $ <var:k> = <var:Q> * <var:X> * <var:i> * <var:h> * <var:j> * <var:w> * <var:M> $ plus terms are greater than or equivalent to <nat:2> . Consequently the number <nat:950400> is <def:seven-composite> . \end{theorem} \begin{proof} Remember <nat:950400> is a <def:seven-composite> positive integer wherever <nat:950400> is the product between whole numbers $ <var:w> $ , $ <var:X> $ , $ <var:i> $ , $ <var:M> $ , $ <var:h> $ , $ <var:j> $ and $ <var:Q> $ such that $ <var:h> $ , $ <var:M> $ , $ <var:i> $ , $ <var:j> $ , $ <var:w> $ , $ <var:X> $ and $ <var:Q> \geq <nat:2> $ . Notice $ <nat:950400> = <var:j> \cdot <var:h> \cdot <var:i> \cdot <var:M> \cdot <var:Q> \cdot <var:w> \cdot <var:X> $ suggests $ <var:X> = <nat:8> $ , $ <var:w> = <nat:10> $ , $ <var:M> = <nat:4> $ , $ <var:i> = <nat:6> $ , $ <var:Q> = <nat:5> $ , $ <var:j> = <nat:11> $ , and $ <var:h> = <nat:9> $ . What's more observe that $ <nat:9> $ , $ <nat:10> $ , $ <nat:4> $ , $ <nat:6> $ , $ <nat:8> $ , $ <nat:5> $ , $ <nat:11> \geq <nat:2> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:k> : nat ) := exists <var:j> <var:h> <var:M> <var:i> <var:w> <var:X> <var:Q> : nat , ( <var:k> = <var:Q> * <var:X> * <var:i> * <var:h> * <var:j> * <var:w> * <var:M> ) /\ ( <var:j> >= <nat:2> ) /\ ( <var:h> >= <nat:2> ) /\ ( <var:M> >= <nat:2> ) /\ ( <var:i> >= <nat:2> ) /\ ( <var:w> >= <nat:2> ) /\ ( <var:X> >= <nat:2> ) /\ ( <var:Q> >= <nat:2> ) . Theorem <genP:1> : <def:seven-composite> <nat:950400> . Proof . unfold <def:seven-composite> . exists <nat:11> . exists <nat:9> . exists <nat:4> . exists <nat:6> . exists <nat:10> . exists <nat:8> . exists <nat:5> . assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 