\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Take $ <var:q> $ , $ <var:k> $ , $ <var:Q> $ , $ <var:i> $ , $ <var:e> $ , $ <var:O> $ , $ <var:G> $ are whole numbers greater than or equal to <nat:2> . Assume that $ <var:U> \in \mathbb{N} $ will be considered as a <def:seven-composite> whole number when $ <var:U> = <var:k> \cdot <var:Q> \cdot <var:i> \cdot <var:G> \cdot <var:q> \cdot <var:e> \cdot <var:O> $ . \end{definition} \begin{theorem} $ <nat:151200> = <var:U> $ is a <def:seven-composite> positive integer . \end{theorem} \begin{proof} Take $ <var:k> = <nat:4> $ , $ <var:G> = <nat:5> $ , $ <var:O> = <nat:9> $ , $ <var:i> = <nat:10> $ , $ <var:e> = <nat:6> $ , $ <var:Q> = <nat:2> $ , $ <var:q> = <nat:7> $ . Plus notice that $ <var:Q> = <nat:2> $ , $ <var:O> = <nat:9> $ , $ <var:i> = <nat:10> $ , $ <var:q> = <nat:7> $ , $ <var:G> = <nat:5> $ , $ <var:k> = <nat:4> $ and $ <var:e> = <nat:6> $ are more than or equal to <nat:2> . This hints the result is true . As a consequence , $ <var:G> $ , $ <var:e> $ , $ <var:Q> $ , $ <var:q> $ , $ <var:k> $ , $ <var:i> $ , $ <var:O> \geq <nat:2> $ plus $ <nat:151200> = <var:G> \times <var:e> \times <var:i> \times <var:O> \times <var:Q> \times <var:k> \times <var:q> $ has been validated . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:U> : nat ) := exists <var:q> <var:k> <var:Q> <var:i> <var:e> <var:O> <var:G> : nat , ( <var:q> >= <nat:2> ) /\ ( <var:k> >= <nat:2> ) /\ ( <var:Q> >= <nat:2> ) /\ ( <var:i> >= <nat:2> ) /\ ( <var:e> >= <nat:2> ) /\ ( <var:O> >= <nat:2> ) /\ ( <var:G> >= <nat:2> ) /\ ( <var:U> = <var:k> * <var:Q> * <var:i> * <var:G> * <var:q> * <var:e> * <var:O> ) . Theorem <genP:1> : <def:seven-composite> <nat:151200> . Proof . unfold <def:seven-composite> . exists <nat:7> . exists <nat:4> . exists <nat:2> . exists <nat:10> . exists <nat:6> . exists <nat:9> . exists <nat:5> . assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 