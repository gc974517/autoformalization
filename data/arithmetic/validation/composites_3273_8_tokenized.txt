\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} We define that $ <var:T> $ is a <def:eight-composite> positive integer with the condition that $ \exists <var:L> $ , $ <var:d> $ , $ <var:F> $ , $ <var:v> $ , $ <var:Q> $ , $ <var:z> $ , $ <var:B> $ , $ <var:D> \in \mathbb{N} $ where $ <var:d> \cdot <var:L> \cdot <var:Q> \cdot <var:B> \cdot <var:F> \cdot <var:D> \cdot <var:v> \cdot <var:z> = <var:T> $ given $ <var:T> \in \mathbb{Z}^+ $ as well as where $ <var:D> $ , $ <var:v> $ , $ <var:Q> $ , $ <var:z> $ , $ <var:B> $ , $ <var:d> $ , $ <var:F> $ , and $ <var:L> \geq <nat:2> $ . Therefore <nat:1663200> is a <def:eight-composite> number . \end{theorem} \begin{proof} Allow $ <var:L> = <nat:7> $ , $ <var:D> = <nat:10> $ , $ <var:B> = <nat:6> $ , $ <var:Q> = <nat:11> $ , $ <var:d> = <nat:9> $ , $ <var:v> = <nat:5> $ , $ <var:z> = <nat:4> $ and $ <var:F> = <nat:2> $ . We present <nat:1663200> is a <def:eight-composite> positive integer for $ <nat:5> $ , $ <nat:6> $ , $ <nat:9> $ , $ <nat:10> $ , $ <nat:11> $ , $ <nat:4> $ , $ <nat:7> $ and $ <nat:2> $ are more than or equal to <nat:2> and because $ <nat:1663200> = <var:d> \cdot <var:L> \cdot <var:Q> \cdot <var:z> \cdot <var:v> \cdot <var:D> \cdot <var:B> \cdot <var:F> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:eight-composite> ( <var:T> : nat ) := exists <var:L> <var:d> <var:F> <var:v> <var:Q> <var:z> <var:B> <var:D> : nat , ( <var:d> * <var:L> * <var:Q> * <var:B> * <var:F> * <var:D> * <var:v> * <var:z> = <var:T> ) /\ ( <var:D> >= <nat:2> ) /\ ( <var:v> >= <nat:2> ) /\ ( <var:Q> >= <nat:2> ) /\ ( <var:z> >= <nat:2> ) /\ ( <var:B> >= <nat:2> ) /\ ( <var:d> >= <nat:2> ) /\ ( <var:F> >= <nat:2> ) /\ ( <var:L> >= <nat:2> ) . Theorem <genP:1> : <def:eight-composite> <nat:1663200> . Proof . unfold <def:eight-composite> . exists <nat:7> . exists <nat:9> . exists <nat:2> . exists <nat:5> . exists <nat:11> . exists <nat:4> . exists <nat:6> . exists <nat:10> . assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 