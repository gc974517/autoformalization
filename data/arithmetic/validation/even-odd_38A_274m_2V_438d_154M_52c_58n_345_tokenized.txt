\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:345> + <nat:438> <var:d> + <var:M> <nat:154> + <nat:274> <var:m> + <nat:52> <var:c> + <var:V> <nat:2> + <nat:38> <var:A> + <var:n> <nat:58> $ must be odd with all terms $ <var:d> $ , $ <var:A> $ , $ <var:V> $ , $ <var:n> $ , $ <var:c> $ , $ <var:m> $ , and $ <var:M> $ . \end{theorem} \begin{proof} See $ <nat:345> $ is obviously an odd integer . We demonstrate the expression $ <nat:38> * <var:A> + <nat:274> * <var:m> + <nat:345> + <var:V> * <nat:2> + <var:d> * <nat:438> + <var:M> * <nat:154> + <var:c> * <nat:52> + <nat:58> * <var:n> $ will be odd . Observe $ <nat:38> <var:A> $ is known to be even . This fact holds because the product between an even whole number and a positive integer will be even . Further , the terms $ <var:M> <nat:154> $ , $ <var:n> <nat:58> $ , and $ <var:d> <nat:438> $ are even elements of $ \mathbb{Z}^+ $ . This holds because the multiplication of an even number with some positive integer must be clearly an even natural number . Remember that the terms $ <var:m> <nat:274> $ additionally $ <var:V> <nat:2> $ are known as even integers . We know that the product $ <nat:52> <var:c> $ is an even whole number . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:d> <var:A> <var:V> <var:n> <var:c> <var:m> <var:M> : nat , Nat . odd ( <nat:438> * <var:d> + <nat:154> * <var:M> + <nat:274> * <var:m> + <nat:52> * <var:c> + <nat:2> * <var:V> + <nat:38> * <var:A> + <nat:58> * <var:n> + <nat:345> ) = true . Proof . intros . assert ( <genH> : Nat . odd <nat:345> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:38> * <var:A> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:154> * <var:M> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:58> * <var:n> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:438> * <var:d> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:274> * <var:m> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:2> * <var:V> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:52> * <var:c> ) = true ) . { rewrite Nat . even_mul . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 