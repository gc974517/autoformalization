\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:x> <nat:430> + <nat:228> <var:d> + <nat:129> + <var:a> <nat:150> $ will be odd using $ <var:x> $ , $ <var:a> $ , and $ <var:d> \in \mathbb{Z}^+ $ . \end{theorem} \begin{proof} It can be proven that $ <var:x> <nat:430> + <nat:129> + <nat:150> <var:a> + <var:d> <nat:228> $ is guaranteed to be odd by reason that $ <nat:150> <var:a> + <nat:228> <var:d> + <var:x> <nat:430> $ is clearly even . The pairs $ <var:a> \times <nat:150> $ , $ <var:d> \times <nat:228> $ , and also $ <var:x> \times <nat:430> $ must be even . This fact must be true since taking the product of an even positive integer with an arbitrary number in $ \mathbb{Z}^+ $ must be even . This fact must be true from the fact the positive integers $ <nat:150> $ , $ <nat:228> $ , as well as $ <nat:430> $ are obviously even . This main result holds from the knowledge the totaling of even numbers with an even number must be by its very nature an even number in $ \mathbb{N} $ . The totaling of an even integer and an odd natural must be obviously an odd positive integer . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:x> <var:a> <var:d> : nat , Nat . odd ( <nat:430> * <var:x> + <nat:228> * <var:d> + <nat:150> * <var:a> + <nat:129> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:150> = true ) . { auto . } assert ( <genH> : Nat . even <nat:228> = true ) . { auto . } assert ( <genH> : Nat . even <nat:430> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:150> * <var:a> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:228> * <var:d> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:430> * <var:x> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:430> * <var:x> + <nat:228> * <var:d> + <nat:150> * <var:a> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 