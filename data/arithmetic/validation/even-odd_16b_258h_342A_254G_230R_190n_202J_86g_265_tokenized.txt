\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:16> <var:b> + <nat:258> <var:h> + <var:A> <nat:342> + <var:G> <nat:254> + <nat:230> <var:R> + <var:n> <nat:190> + <nat:265> + <var:J> <nat:202> + <var:g> <nat:86> $ will be odd for terms $ <var:g> $ , $ <var:h> $ , $ <var:R> $ , $ <var:A> $ , $ <var:b> $ , $ <var:n> $ , $ <var:G> $ , and $ <var:J> $ . \end{theorem} \begin{proof} The products $ <nat:16> * <var:b> $ , $ <nat:230> * <var:R> $ , and also $ <var:h> * <nat:258> $ will be even positive integers because multiplying of an even element of $ \mathbb{Z}^+ $ with an arbitrary number in $ \mathbb{N} $ must be obviously an even element of $ \mathbb{N} $ . We know the terms $ <nat:342> * <var:A> $ , $ <var:J> * <nat:202> $ , $ <nat:86> * <var:g> $ , additionally $ <var:G> * <nat:254> $ are known to be even numbers in $ \mathbb{Z}^+ $ . Additionally , we know $ <var:n> * <nat:190> $ is known to be an even number . This fact is true as a consequence that the multiplication of an even element of $ \mathbb{N} $ with any number in $ \mathbb{N} $ is guaranteed to be even . See that $ <nat:265> $ is an odd integer . It can be shown that our main result must be true . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:g> <var:h> <var:R> <var:A> <var:b> <var:n> <var:G> <var:J> : nat , Nat . odd ( <nat:16> * <var:b> + <nat:258> * <var:h> + <nat:342> * <var:A> + <nat:254> * <var:G> + <nat:230> * <var:R> + <nat:190> * <var:n> + <nat:202> * <var:J> + <nat:86> * <var:g> + <nat:265> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:16> * <var:b> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:230> * <var:R> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:258> * <var:h> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:342> * <var:A> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:202> * <var:J> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:86> * <var:g> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:254> * <var:G> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:190> * <var:n> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . odd <nat:265> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 