\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:u> \cdot <nat:464> + <var:e> \cdot <nat:58> + <nat:168> \cdot <var:V> + <var:i> \cdot <nat:146> + <var:j> \cdot <nat:12> + <var:C> \cdot <nat:108> + <var:W> \cdot <nat:24> + <nat:459> + <nat:476> \cdot <var:G> $ is odd for every positive terms $ <var:V> $ , $ <var:u> $ , $ <var:e> $ , $ <var:G> $ , $ <var:W> $ , $ <var:i> $ , $ <var:j> $ , and $ <var:C> $ . \end{theorem} \begin{proof} The leading terms $ <nat:146> $ , $ <nat:24> $ , $ <nat:12> $ , $ <nat:464> $ , and $ <nat:108> $ are guaranteed to be even numbers Furthermore , the positive integer $ <nat:58> $ is guaranteed to be an even number in $ \mathbb{Z}^+ $ The number $ <nat:476> $ is known to be an even positive integer Adding on , observe that the integer $ <nat:168> $ is guaranteed to be an even element of $ \mathbb{Z}^+ $ Taking the product between an even number in $ \mathbb{N} $ and some number in $ \mathbb{Z}^+ $ must be in itself an even positive integer . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:V> <var:u> <var:e> <var:G> <var:W> <var:i> <var:j> <var:C> : nat , Nat . odd ( <nat:464> * <var:u> + <nat:58> * <var:e> + <nat:168> * <var:V> + <nat:146> * <var:i> + <nat:12> * <var:j> + <nat:108> * <var:C> + <nat:24> * <var:W> + <nat:476> * <var:G> + <nat:459> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:146> = true ) . { auto . } assert ( <genH> : Nat . even <nat:24> = true ) . { auto . } assert ( <genH> : Nat . even <nat:12> = true ) . { auto . } assert ( <genH> : Nat . even <nat:464> = true ) . { auto . } assert ( <genH> : Nat . even <nat:108> = true ) . { auto . } assert ( <genH> : Nat . even <nat:58> = true ) . { auto . } assert ( <genH> : Nat . even <nat:476> = true ) . { auto . } assert ( <genH> : Nat . even <nat:168> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 