\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Take that granted that there exist $ <var:Q> $ , $ <var:W> $ , $ <var:R> $ , $ <var:C> $ , $ <var:U> $ , $ <var:q> $ , $ <var:h> \in \mathbb{N} $ we denote that $ <var:u> \in \mathbb{N} $ will be considered to be a <def:seven-composite> positive integer when $ <var:C> * <var:Q> * <var:q> * <var:h> * <var:W> * <var:U> * <var:R> = <var:u> $ and factors are more than or equal to <nat:2> . Thus $ <nat:443520> = <var:u> $ is a <def:seven-composite> whole number . \end{theorem} \begin{proof} Allow $ <var:q> = <nat:11> $ , $ <var:C> = <nat:4> $ , $ <var:Q> = <nat:7> $ , $ <var:R> = <nat:10> $ , $ <var:h> = <nat:3> $ , $ <var:W> = <nat:6> $ , $ <var:U> = <nat:8> $ . Additionally observe $ <var:R> = <nat:10> $ , $ <var:Q> = <nat:7> $ , $ <var:U> = <nat:8> $ , $ <var:q> = <nat:11> $ , $ <var:h> = <nat:3> $ , $ <var:W> = <nat:6> $ and $ <var:C> = <nat:4> \geq <nat:2> $ . So , $ <nat:443520> = <var:U> \times <var:Q> \times <var:h> \times <var:q> \times <var:R> \times <var:W> \times <var:C> $ is validated . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:u> : nat ) := exists <var:Q> <var:W> <var:R> <var:C> <var:U> <var:q> <var:h> : nat , ( <var:C> * <var:Q> * <var:q> * <var:h> * <var:W> * <var:U> * <var:R> = <var:u> ) /\ ( <var:Q> >= <nat:2> ) /\ ( <var:W> >= <nat:2> ) /\ ( <var:R> >= <nat:2> ) /\ ( <var:C> >= <nat:2> ) /\ ( <var:U> >= <nat:2> ) /\ ( <var:q> >= <nat:2> ) /\ ( <var:h> >= <nat:2> ) . Theorem <genP:1> : <def:seven-composite> <nat:443520> . Proof . unfold <def:seven-composite> . exists <nat:7> . exists <nat:6> . exists <nat:10> . exists <nat:4> . exists <nat:8> . exists <nat:11> . exists <nat:3> . assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 