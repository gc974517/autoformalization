\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:120> <var:s> + <nat:71> + <nat:4> <var:H> + <nat:288> <var:O> + <nat:462> <var:q> + <nat:154> <var:z> + <var:T> <nat:172> + <nat:20> <var:L> $ will be odd . \end{theorem} \begin{proof} The terms $ <var:T> \times <nat:172> $ , $ <nat:462> \times <var:q> $ , $ <var:H> \times <nat:4> $ , $ <var:L> \times <nat:20> $ , $ <nat:288> \times <var:O> $ , additionally $ <nat:120> \times <var:s> $ are obviously even numbers in $ \mathbb{N} $ . $ <var:z> \times <nat:154> $ is trivially an even number as a consequence that the multiplication of an even element of $ \mathbb{Z}^+ $ with a whole number will be even . It can be demonstrated that the expression $ <var:z> * <nat:154> + <var:H> * <nat:4> + <var:L> * <nat:20> + <nat:120> * <var:s> + <var:O> * <nat:288> + <nat:172> * <var:T> + <var:q> * <nat:462> + <nat:71> $ is guaranteed to be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:s> <var:H> <var:O> <var:q> <var:z> <var:T> <var:L> : nat , Nat . odd ( <nat:120> * <var:s> + <nat:4> * <var:H> + <nat:288> * <var:O> + <nat:462> * <var:q> + <nat:154> * <var:z> + <nat:172> * <var:T> + <nat:20> * <var:L> + <nat:71> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:172> * <var:T> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:462> * <var:q> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:4> * <var:H> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:20> * <var:L> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:288> * <var:O> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:120> * <var:s> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:154> * <var:z> ) = true ) . { rewrite Nat . even_mul . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 