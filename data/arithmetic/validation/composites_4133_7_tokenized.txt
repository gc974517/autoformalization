\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Granted there exist $ <var:v> $ , $ <var:E> $ , $ <var:O> $ , $ <var:a> $ , $ <var:g> $ , $ <var:B> $ , $ <var:L> \in \mathbb{N} $ then we say that $ <var:U> \in \mathbb{N} $ will be considered to be a <def:seven-composite> whole number when $ <var:B> \cdot <var:v> \cdot <var:O> \cdot <var:a> \cdot <var:E> \cdot <var:L> \cdot <var:g> = <var:U> $ as well as so that $ <var:g> $ , $ <var:v> $ , $ <var:B> $ , $ <var:L> $ , $ <var:O> $ , $ <var:a> $ and $ <var:E> \geq <nat:2> $ . Then the positive integer <nat:190080> is a <def:seven-composite> number . \end{theorem} \begin{proof} Note that $ <nat:190080> = <var:g> * <var:O> * <var:L> * <var:v> * <var:E> * <var:B> * <var:a> $ produces $ <var:O> = <nat:10> $ , $ <var:L> = <nat:9> $ , $ <var:E> = <nat:2> $ , $ <var:g> = <nat:8> $ , $ <var:a> = <nat:11> $ , $ <var:B> = <nat:4> $ , $ <var:v> = <nat:3> $ . Moreover note $ <nat:9> $ , $ <nat:11> $ , $ <nat:10> $ , $ <nat:8> $ , $ <nat:4> $ , $ <nat:2> $ , and $ <nat:3> $ are larger than or equal to <nat:2> . This indicates <nat:190080> is a <def:seven-composite> natural number . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:U> : nat ) := exists <var:v> <var:E> <var:O> <var:a> <var:g> <var:B> <var:L> : nat , ( <var:B> * <var:v> * <var:O> * <var:a> * <var:E> * <var:L> * <var:g> = <var:U> ) /\ ( <var:g> >= <nat:2> ) /\ ( <var:v> >= <nat:2> ) /\ ( <var:B> >= <nat:2> ) /\ ( <var:L> >= <nat:2> ) /\ ( <var:O> >= <nat:2> ) /\ ( <var:a> >= <nat:2> ) /\ ( <var:E> >= <nat:2> ) . Theorem <genP:1> : <def:seven-composite> <nat:190080> . Proof . unfold <def:seven-composite> . exists <nat:3> . exists <nat:2> . exists <nat:10> . exists <nat:11> . exists <nat:8> . exists <nat:4> . exists <nat:9> . assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 