\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:G> * <nat:362> + <var:s> * <nat:246> + <nat:62> * <var:i> + <nat:276> * <var:D> + <nat:293> + <nat:226> * <var:B> + <nat:494> * <var:d> $ is guaranteed to be odd . \end{theorem} \begin{proof} This lemma is proven from the knowledge $ <var:i> \cdot <nat:62> + <nat:246> \cdot <var:s> + <nat:362> \cdot <var:G> + <nat:494> \cdot <var:d> + <var:B> \cdot <nat:226> + <nat:276> \cdot <var:D> $ is guaranteed to be even . Remember the natural number $ <nat:494> $ is obviously even Building on , we know the whole numbers $ <nat:246> $ and moreover $ <nat:362> $ must be even numbers in $ \mathbb{Z}^+ $ On top of this , notice the numbers $ <nat:276> $ and also $ <nat:62> $ will be even The number $ <nat:226> $ is an even number in $ \mathbb{Z}^+ $ Take note $ <nat:293> $ is obviously an odd integer . It can be proven that the lemma is true . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:G> <var:s> <var:i> <var:D> <var:B> <var:d> : nat , Nat . odd ( <nat:362> * <var:G> + <nat:246> * <var:s> + <nat:62> * <var:i> + <nat:276> * <var:D> + <nat:226> * <var:B> + <nat:494> * <var:d> + <nat:293> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:494> = true ) . { auto . } assert ( <genH> : Nat . even <nat:246> = true ) . { auto . } assert ( <genH> : Nat . even <nat:362> = true ) . { auto . } assert ( <genH> : Nat . even <nat:276> = true ) . { auto . } assert ( <genH> : Nat . even <nat:62> = true ) . { auto . } assert ( <genH> : Nat . even <nat:226> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:362> * <var:G> + <nat:246> * <var:s> + <nat:62> * <var:i> + <nat:276> * <var:D> + <nat:226> * <var:B> + <nat:494> * <var:d> ) = true ) . { repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:293> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 