\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:310> \times <var:W> + <nat:68> \times <var:S> + <nat:161> + <nat:344> \times <var:D> + <nat:284> \times <var:M> + <var:C> \times <nat:340> + <nat:158> \times <var:e> $ is odd assuming $ <var:W> $ , $ <var:S> $ , $ <var:C> $ , $ <var:e> $ , $ <var:M> $ , and $ <var:D> \in \mathbb{Z}^+ $ . \end{theorem} \begin{proof} From the knowledge the summing between even positive integers successively with an odd number will be an odd number , the formula $ <var:W> \times <nat:310> + <nat:68> \times <var:S> + <nat:284> \times <var:M> + <nat:340> \times <var:C> + <var:e> \times <nat:158> + <nat:344> \times <var:D> + <nat:161> $ is odd . We know the integers $ <nat:68> $ and likewise $ <nat:310> $ are guaranteed to be even elements of $ \mathbb{N} $ The leading terms $ <nat:158> $ as well as $ <nat:340> $ are trivially even Furthermore , we know the positive integer $ <nat:284> $ is an even natural Building on , see that the natural number $ <nat:344> $ is clearly an even whole number The multiplication of even integers will be an even number in $ \mathbb{N} $ . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:W> <var:S> <var:C> <var:e> <var:M> <var:D> : nat , Nat . odd ( <nat:310> * <var:W> + <nat:68> * <var:S> + <nat:344> * <var:D> + <nat:284> * <var:M> + <nat:340> * <var:C> + <nat:158> * <var:e> + <nat:161> ) = true . Proof . intros . rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . assert ( <genH> : Nat . even <nat:68> = true ) . { auto . } assert ( <genH> : Nat . even <nat:310> = true ) . { auto . } assert ( <genH> : Nat . even <nat:158> = true ) . { auto . } assert ( <genH> : Nat . even <nat:340> = true ) . { auto . } assert ( <genH> : Nat . even <nat:284> = true ) . { auto . } assert ( <genH> : Nat . even <nat:344> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 