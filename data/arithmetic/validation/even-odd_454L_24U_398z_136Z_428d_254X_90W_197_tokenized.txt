\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Taking natural numbers $ <var:L> $ , $ <var:Z> $ , $ <var:d> $ , $ <var:X> $ , $ <var:U> $ , $ <var:W> $ , and $ <var:z> $ the expression $ <var:Z> \times <nat:136> + <var:L> \times <nat:454> + <var:X> \times <nat:254> + <var:d> \times <nat:428> + <nat:398> \times <var:z> + <var:W> \times <nat:90> + <nat:24> \times <var:U> + <nat:197> $ will be odd . \end{theorem} \begin{proof} Likewise , the pairs $ <nat:136> <var:Z> $ , $ <var:L> <nat:454> $ , $ <nat:254> <var:X> $ , $ <nat:428> <var:d> $ , $ <nat:398> <var:z> $ , $ <nat:90> <var:W> $ , $ <var:U> <nat:24> $ , are guaranteed to be even numbers in $ \mathbb{N} $ . This claim holds from the knowledge the integers $ <nat:136> $ , $ <nat:454> $ , $ <nat:254> $ , $ <nat:428> $ , $ <nat:398> $ , $ <nat:90> $ , $ <nat:24> $ , are guaranteed to be by their very nature even numbers . The summation of an even natural number with an odd whole number will be clearly an odd natural . Therefore , $ <nat:197> + <nat:454> \times <var:L> + <var:U> \times <nat:24> + <nat:398> \times <var:z> + <nat:136> \times <var:Z> + <var:d> \times <nat:428> + <nat:254> \times <var:X> + <nat:90> \times <var:W> $ will be odd . We know that $ <nat:197> $ is guaranteed to be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:L> <var:Z> <var:d> <var:X> <var:U> <var:W> <var:z> : nat , Nat . odd ( <nat:136> * <var:Z> + <nat:454> * <var:L> + <nat:254> * <var:X> + <nat:428> * <var:d> + <nat:398> * <var:z> + <nat:90> * <var:W> + <nat:24> * <var:U> + <nat:197> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:136> = true ) . { auto . } assert ( <genH> : Nat . even <nat:454> = true ) . { auto . } assert ( <genH> : Nat . even <nat:254> = true ) . { auto . } assert ( <genH> : Nat . even <nat:428> = true ) . { auto . } assert ( <genH> : Nat . even <nat:398> = true ) . { auto . } assert ( <genH> : Nat . even <nat:90> = true ) . { auto . } assert ( <genH> : Nat . even <nat:24> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:136> * <var:Z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:454> * <var:L> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:254> * <var:X> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:428> * <var:d> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:398> * <var:z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:90> * <var:W> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:24> * <var:U> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . assert ( <genH> : Nat . odd <nat:197> = true ) . { auto . } rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 