\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} With the condition that we have $ <var:W> = <var:A> * <var:f> * <var:x> * <var:l> * <var:n> * <var:T> * <var:Q> * <var:e> * <var:w> $ with some integer $ <var:W> $ as well as so that $ <var:x> $ , $ <var:A> $ , $ <var:f> $ , $ <var:n> $ , $ <var:Q> $ , $ <var:w> $ , $ <var:e> $ , $ <var:l> $ and $ <var:T> \geq <nat:2> $ using some $ <var:l> $ , $ <var:A> $ , $ <var:x> $ , $ <var:n> $ , $ <var:e> $ , $ <var:w> $ , $ <var:f> $ , $ <var:Q> $ , $ <var:T> $ , then assume that $ <var:W> $ is a <def:nine-composite> whole number . \end{definition} \begin{theorem} $ <nat:4838400> = <var:W> $ is <def:nine-composite> . \end{theorem} \begin{proof} Remember a <def:nine-composite> natural number is the product between numbers $ <var:T> $ , $ <var:f> $ , $ <var:Q> $ , $ <var:w> $ , $ <var:l> $ , $ <var:x> $ , $ <var:A> $ , $ <var:n> $ , $ <var:e> $ greater than <nat:1> . Let $ <var:e> = <nat:8> $ , $ <var:T> = <nat:7> $ , $ <var:w> = <nat:6> $ , $ <var:f> = <nat:12> $ , $ <var:A> = <nat:5> $ , $ <var:n> = <nat:4> $ , $ <var:Q> = <nat:2> $ , $ <var:x> = <nat:3> $ , $ <var:l> = <nat:10> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:W> : nat ) := exists <var:l> <var:A> <var:x> <var:n> <var:e> <var:w> <var:f> <var:Q> <var:T> : nat , ( <var:W> = <var:A> * <var:f> * <var:x> * <var:l> * <var:n> * <var:T> * <var:Q> * <var:e> * <var:w> ) /\ ( <var:x> >= <nat:2> ) /\ ( <var:A> >= <nat:2> ) /\ ( <var:f> >= <nat:2> ) /\ ( <var:n> >= <nat:2> ) /\ ( <var:Q> >= <nat:2> ) /\ ( <var:w> >= <nat:2> ) /\ ( <var:e> >= <nat:2> ) /\ ( <var:l> >= <nat:2> ) /\ ( <var:T> >= <nat:2> ) . Theorem <genP:1> : <def:nine-composite> <nat:4838400> . Proof . unfold <def:nine-composite> . exists <nat:10> . exists <nat:5> . exists <nat:3> . exists <nat:4> . exists <nat:8> . exists <nat:6> . exists <nat:12> . exists <nat:2> . exists <nat:7> . repeat split . all : lia . Qed . 