\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:130> <var:z> + <var:B> <nat:76> + <nat:370> <var:h> + <nat:302> <var:V> + <var:q> <nat:266> + <nat:215> + <nat:216> <var:e> + <var:o> <nat:434> + <var:X> <nat:78> $ must be odd . \end{theorem} \begin{proof} See $ <nat:215> $ is known as odd . We check the summation $ <nat:78> \times <var:X> + <var:h> \times <nat:370> + <nat:434> \times <var:o> + <var:e> \times <nat:216> + <var:B> \times <nat:76> + <nat:130> \times <var:z> + <nat:215> + <var:q> \times <nat:266> + <nat:302> \times <var:V> $ must be odd . Furthermore , notice the integers $ <nat:78> $ , $ <nat:370> $ , $ <nat:434> $ , $ <nat:216> $ , $ <nat:76> $ , $ <nat:130> $ , $ <nat:266> $ , and likewise $ <nat:302> $ are even . Then , the pairs $ <var:X> <nat:78> $ , $ <var:h> <nat:370> $ , $ <nat:434> <var:o> $ , $ <nat:216> <var:e> $ , $ <var:B> <nat:76> $ , $ <nat:130> <var:z> $ , $ <var:q> <nat:266> $ , plus $ <var:V> <nat:302> $ is even too . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:z> <var:B> <var:h> <var:V> <var:q> <var:e> <var:o> <var:X> : nat , Nat . odd ( <nat:130> * <var:z> + <nat:76> * <var:B> + <nat:370> * <var:h> + <nat:302> * <var:V> + <nat:266> * <var:q> + <nat:216> * <var:e> + <nat:434> * <var:o> + <nat:78> * <var:X> + <nat:215> ) = true . Proof . intros . assert ( <genH> : Nat . odd <nat:215> = true ) . { auto . } assert ( <genH> : Nat . even <nat:78> = true ) . { auto . } assert ( <genH> : Nat . even <nat:370> = true ) . { auto . } assert ( <genH> : Nat . even <nat:434> = true ) . { auto . } assert ( <genH> : Nat . even <nat:216> = true ) . { auto . } assert ( <genH> : Nat . even <nat:76> = true ) . { auto . } assert ( <genH> : Nat . even <nat:130> = true ) . { auto . } assert ( <genH> : Nat . even <nat:266> = true ) . { auto . } assert ( <genH> : Nat . even <nat:302> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:78> * <var:X> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:370> * <var:h> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:434> * <var:o> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:216> * <var:e> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:76> * <var:B> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:130> * <var:z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:266> * <var:q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:302> * <var:V> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 