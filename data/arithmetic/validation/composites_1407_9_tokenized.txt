\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Claim that $ <var:t> $ is a <def:nine-composite> integer only if taking some natural numbers $ <var:E> $ , $ <var:F> $ , $ <var:z> $ , $ <var:I> $ , $ <var:D> $ , $ <var:O> $ , $ <var:u> $ , $ <var:b> $ , $ <var:s> $ we get $ <var:s> $ , $ <var:O> $ , $ <var:z> $ , $ <var:F> $ , $ <var:D> $ , $ <var:u> $ , $ <var:b> $ , $ <var:I> $ , and $ <var:E> \geq <nat:2> $ plus for some positive integer $ <var:t> $ , $ <var:b> \times <var:I> \times <var:z> \times <var:O> \times <var:u> \times <var:F> \times <var:s> \times <var:D> \times <var:E> = <var:t> $ . \end{definition} \begin{theorem} <nat:6652800> is a <def:nine-composite> integer . \end{theorem} \begin{proof} Notice that $ <nat:5> \cdot <nat:3> \cdot <nat:10> \cdot <nat:11> \cdot <nat:7> \cdot <nat:9> \cdot <nat:4> \cdot <nat:8> \cdot <nat:2> = <nat:6652800> $ . What's more note $ <nat:7> $ , $ <nat:4> $ , $ <nat:11> $ , $ <nat:9> $ , $ <nat:3> $ , $ <nat:10> $ , $ <nat:5> $ , $ <nat:8> $ , and $ <nat:2> $ are more than or equivalent to <nat:2> . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:t> : nat ) := exists <var:E> <var:F> <var:z> <var:I> <var:D> <var:O> <var:u> <var:b> <var:s> : nat , ( <var:s> >= <nat:2> ) /\ ( <var:O> >= <nat:2> ) /\ ( <var:z> >= <nat:2> ) /\ ( <var:F> >= <nat:2> ) /\ ( <var:D> >= <nat:2> ) /\ ( <var:u> >= <nat:2> ) /\ ( <var:b> >= <nat:2> ) /\ ( <var:I> >= <nat:2> ) /\ ( <var:E> >= <nat:2> ) /\ ( <var:b> * <var:I> * <var:z> * <var:O> * <var:u> * <var:F> * <var:s> * <var:D> * <var:E> = <var:t> ) . Theorem <genP:1> : <def:nine-composite> <nat:6652800> . Proof . unfold <def:nine-composite> . exists <nat:8> . exists <nat:3> . exists <nat:9> . exists <nat:7> . exists <nat:10> . exists <nat:2> . exists <nat:11> . exists <nat:5> . exists <nat:4> . assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 