\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:I> * <nat:120> + <var:y> * <nat:420> + <nat:178> * <var:c> + <nat:139> + <nat:354> * <var:j> + <nat:494> * <var:Z> + <nat:334> * <var:W> + <nat:260> * <var:f> $ is odd . \end{theorem} \begin{proof} We know that $ <nat:139> $ is known to be odd . We prove $ <nat:420> * <var:y> + <var:I> * <nat:120> + <var:W> * <nat:334> + <nat:178> * <var:c> + <var:Z> * <nat:494> + <var:j> * <nat:354> + <var:f> * <nat:260> + <nat:139> $ must be odd . Remember that the pairs $ <nat:494> * <var:Z> $ , $ <var:I> * <nat:120> $ , and $ <nat:334> * <var:W> $ are guaranteed to be even . This claim is true as a consequence that multiplying between an even natural with some natural is guaranteed to be even . The terms $ <nat:420> * <var:y> $ additionally $ <nat:354> * <var:j> $ are obviously even natural numbers . The term $ <nat:260> * <var:f> $ is known to be an even number in $ \mathbb{Z}^+ $ . $ <nat:178> * <var:c> $ is known to be even . This fact is true by reason that the product of an even positive integer and a number in $ \mathbb{N} $ must be even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:I> <var:y> <var:c> <var:j> <var:Z> <var:W> <var:f> : nat , Nat . odd ( <nat:120> * <var:I> + <nat:420> * <var:y> + <nat:178> * <var:c> + <nat:354> * <var:j> + <nat:494> * <var:Z> + <nat:334> * <var:W> + <nat:260> * <var:f> + <nat:139> ) = true . Proof . intros . assert ( <genH> : Nat . odd <nat:139> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:494> * <var:Z> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:120> * <var:I> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:334> * <var:W> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:420> * <var:y> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:354> * <var:j> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:260> * <var:f> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:178> * <var:c> ) = true ) . { rewrite Nat . even_mul . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 