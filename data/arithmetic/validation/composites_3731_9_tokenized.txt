\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} We claim that $ <var:X> $ is a <def:nine-composite> integer if and only if there are $ <var:K> $ , $ <var:g> $ , $ <var:v> $ , $ <var:x> $ , $ <var:C> $ , $ <var:O> $ , $ <var:M> $ , $ <var:N> $ , $ <var:a> \in \mathbb{N} $ so that $ <var:X> = <var:O> * <var:v> * <var:C> * <var:a> * <var:N> * <var:x> * <var:K> * <var:g> * <var:M> $ given some number $ <var:X> $ and so that $ <var:a> $ , $ <var:v> $ , $ <var:K> $ , $ <var:M> $ , $ <var:C> $ , $ <var:x> $ , $ <var:O> $ , $ <var:g> $ , and $ <var:N> \geq <nat:2> $ . \end{definition} \begin{theorem} $ <var:X> = <nat:23950080> $ is a <def:nine-composite> whole number . \end{theorem} \begin{proof} Recall that a <def:nine-composite> integer is the multiplication between positive integers $ <var:C> $ , $ <var:K> $ , $ <var:v> $ , $ <var:O> $ , $ <var:a> $ , $ <var:x> $ , $ <var:g> $ , $ <var:N> $ , $ <var:M> $ so that $ <var:M> $ , $ <var:O> $ , $ <var:C> $ , $ <var:a> $ , $ <var:N> $ , $ <var:v> $ , $ <var:K> $ , $ <var:g> $ , and $ <var:x> > <nat:1> $ . We confirm <nat:23950080> is a <def:nine-composite> positive integer . Observe $ <nat:6> $ , $ <nat:11> $ , $ <nat:8> $ , $ <nat:12> $ , $ <nat:7> $ , $ <nat:9> $ , $ <nat:10> $ , $ <nat:3> $ and $ <nat:2> > <nat:1> $ . Similarly observe still $ <nat:23950080> = <var:x> * <var:N> * <var:a> * <var:K> * <var:O> * <var:g> * <var:M> * <var:C> * <var:v> $ yields $ <var:N> = <nat:6> $ , $ <var:a> = <nat:9> $ , $ <var:K> = <nat:10> $ , $ <var:g> = <nat:3> $ , $ <var:O> = <nat:12> $ , $ <var:C> = <nat:7> $ , $ <var:M> = <nat:8> $ , $ <var:x> = <nat:2> $ , $ <var:v> = <nat:11> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:X> : nat ) := exists <var:K> <var:g> <var:v> <var:x> <var:C> <var:O> <var:M> <var:N> <var:a> : nat , ( <var:X> = <var:O> * <var:v> * <var:C> * <var:a> * <var:N> * <var:x> * <var:K> * <var:g> * <var:M> ) /\ ( <var:a> >= <nat:2> ) /\ ( <var:v> >= <nat:2> ) /\ ( <var:K> >= <nat:2> ) /\ ( <var:M> >= <nat:2> ) /\ ( <var:C> >= <nat:2> ) /\ ( <var:x> >= <nat:2> ) /\ ( <var:O> >= <nat:2> ) /\ ( <var:g> >= <nat:2> ) /\ ( <var:N> >= <nat:2> ) . Theorem <genP:1> : <def:nine-composite> <nat:23950080> . Proof . unfold <def:nine-composite> . assert ( <genH> : <nat:6> > <nat:1> ) . { lia . } assert ( <genH> : <nat:11> > <nat:1> ) . { lia . } assert ( <genH> : <nat:8> > <nat:1> ) . { lia . } assert ( <genH> : <nat:12> > <nat:1> ) . { lia . } assert ( <genH> : <nat:7> > <nat:1> ) . { lia . } assert ( <genH> : <nat:9> > <nat:1> ) . { lia . } assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } assert ( <genH> : <nat:3> > <nat:1> ) . { lia . } assert ( <genH> : <nat:2> > <nat:1> ) . { lia . } exists <nat:10> . exists <nat:3> . exists <nat:11> . exists <nat:2> . exists <nat:7> . exists <nat:12> . exists <nat:8> . exists <nat:6> . exists <nat:9> . repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 