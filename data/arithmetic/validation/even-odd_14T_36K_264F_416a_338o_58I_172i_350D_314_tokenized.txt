\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Using all variables $ <var:K> $ , $ <var:D> $ , $ <var:a> $ , $ <var:T> $ , $ <var:i> $ , $ <var:F> $ , $ <var:o> $ , and $ <var:I> $ the formula $ <nat:338> * <var:o> + <var:F> * <nat:264> + <nat:36> * <var:K> + <var:a> * <nat:416> + <nat:350> * <var:D> + <nat:172> * <var:i> + <var:I> * <nat:58> + <var:T> * <nat:14> + <nat:314> $ is guaranteed to be even . \end{theorem} \begin{proof} Our proposition is true from the knowledge $ <nat:350> <var:D> + <nat:264> <var:F> + <nat:36> <var:K> + <var:T> <nat:14> + <var:i> <nat:172> + <nat:416> <var:a> + <nat:338> <var:o> + <var:I> <nat:58> $ is even . The pairs $ <var:D> \cdot <nat:350> $ , $ <nat:264> \cdot <var:F> $ , $ <var:K> \cdot <nat:36> $ , $ <nat:14> \cdot <var:T> $ , $ <var:i> \cdot <nat:172> $ , $ <nat:416> \cdot <var:a> $ , $ <nat:338> \cdot <var:o> $ , plus $ <nat:58> \cdot <var:I> $ are known to be even from the fact the multiplication between an even integer with any number in $ \mathbb{N} $ will be an even element of $ \mathbb{N} $ . This claim must be true by reason that the natural numbers $ <nat:350> $ , $ <nat:264> $ , $ <nat:36> $ , $ <nat:14> $ , $ <nat:172> $ , $ <nat:416> $ , $ <nat:338> $ , as well as $ <nat:58> $ are known to be even . As a consequence that the multiplication between even numbers with an arbitrary whole number is even the theorem must be true . The totaling of an even number in $ \mathbb{N} $ and an even positive integer must be instrinsically an even positive integer . Then , the sum $ <var:T> * <nat:14> + <nat:36> * <var:K> + <var:F> * <nat:264> + <var:a> * <nat:416> + <nat:338> * <var:o> + <var:I> * <nat:58> + <nat:314> + <var:i> * <nat:172> + <nat:350> * <var:D> $ by its very nature is even . Recall that $ <nat:314> $ is guaranteed to be even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:K> <var:D> <var:a> <var:T> <var:i> <var:F> <var:o> <var:I> : nat , Nat . even ( <nat:338> * <var:o> + <nat:264> * <var:F> + <nat:36> * <var:K> + <nat:416> * <var:a> + <nat:350> * <var:D> + <nat:172> * <var:i> + <nat:58> * <var:I> + <nat:14> * <var:T> + <nat:314> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:350> = true ) . { auto . } assert ( <genH> : Nat . even <nat:264> = true ) . { auto . } assert ( <genH> : Nat . even <nat:36> = true ) . { auto . } assert ( <genH> : Nat . even <nat:14> = true ) . { auto . } assert ( <genH> : Nat . even <nat:172> = true ) . { auto . } assert ( <genH> : Nat . even <nat:416> = true ) . { auto . } assert ( <genH> : Nat . even <nat:338> = true ) . { auto . } assert ( <genH> : Nat . even <nat:58> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:350> * <var:D> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:264> * <var:F> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:36> * <var:K> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:14> * <var:T> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:172> * <var:i> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:416> * <var:a> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:338> * <var:o> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:58> * <var:I> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:338> * <var:o> + <nat:264> * <var:F> + <nat:36> * <var:K> + <nat:416> * <var:a> + <nat:350> * <var:D> + <nat:172> * <var:i> + <nat:58> * <var:I> + <nat:14> * <var:T> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . even_add . assert ( <genH> : Nat . even <nat:314> = true ) . { auto . } rewrite <genH> . rewrite <genH> . auto . Qed . 