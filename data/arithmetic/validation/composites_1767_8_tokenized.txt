\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Take $ <var:s> $ , $ <var:w> $ , $ <var:z> $ , $ <var:m> $ , $ <var:p> $ , $ <var:o> $ , $ <var:M> $ , $ <var:f> \in \mathbb{Z}^+ $ greater than <nat:1> . We denote that some $ <var:a> $ is called a <def:eight-composite> positive integer assuming $ <var:a> = <var:M> \times <var:w> \times <var:m> \times <var:f> \times <var:z> \times <var:p> \times <var:s> \times <var:o> $ . \end{definition} \begin{theorem} $ <nat:2217600> = <var:a> $ is <def:eight-composite> . \end{theorem} \begin{proof} Let $ <var:f> = <nat:6> $ , $ <var:p> = <nat:11> $ , $ <var:s> = <nat:2> $ , $ <var:o> = <nat:12> $ , $ <var:m> = <nat:4> $ , $ <var:z> = <nat:7> $ , $ <var:w> = <nat:5> $ , and $ <var:M> = <nat:10> $ . Similarly notice $ <nat:2> $ , $ <nat:12> $ , $ <nat:4> $ , $ <nat:5> $ , $ <nat:11> $ , $ <nat:10> $ , $ <nat:6> $ , $ <nat:7> $ are greater than <nat:1> . This indicates <nat:2217600> is <def:eight-composite> . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:eight-composite> ( <var:a> : nat ) := exists <var:s> <var:w> <var:z> <var:m> <var:p> <var:o> <var:M> <var:f> : nat , ( <var:s> > <nat:1> ) /\ ( <var:w> > <nat:1> ) /\ ( <var:z> > <nat:1> ) /\ ( <var:m> > <nat:1> ) /\ ( <var:p> > <nat:1> ) /\ ( <var:o> > <nat:1> ) /\ ( <var:M> > <nat:1> ) /\ ( <var:f> > <nat:1> ) /\ ( <var:a> = <var:M> * <var:w> * <var:m> * <var:f> * <var:z> * <var:p> * <var:s> * <var:o> ) . Theorem <genP:1> : <def:eight-composite> <nat:2217600> . Proof . unfold <def:eight-composite> . exists <nat:2> . exists <nat:5> . exists <nat:7> . exists <nat:4> . exists <nat:11> . exists <nat:12> . exists <nat:10> . exists <nat:6> . assert ( <genH> : <nat:2> > <nat:1> ) . { lia . } assert ( <genH> : <nat:12> > <nat:1> ) . { lia . } assert ( <genH> : <nat:4> > <nat:1> ) . { lia . } assert ( <genH> : <nat:5> > <nat:1> ) . { lia . } assert ( <genH> : <nat:11> > <nat:1> ) . { lia . } assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } assert ( <genH> : <nat:6> > <nat:1> ) . { lia . } assert ( <genH> : <nat:7> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 