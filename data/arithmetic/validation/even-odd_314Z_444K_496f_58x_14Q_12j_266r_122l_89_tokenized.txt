\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:314> * <var:Z> + <nat:444> * <var:K> + <nat:89> + <var:r> * <nat:266> + <nat:122> * <var:l> + <var:f> * <nat:496> + <var:Q> * <nat:14> + <nat:12> * <var:j> + <var:x> * <nat:58> $ is odd . \end{theorem} \begin{proof} We check the formula $ <nat:314> * <var:Z> + <var:K> * <nat:444> + <nat:496> * <var:f> + <nat:58> * <var:x> + <nat:89> + <var:Q> * <nat:14> + <nat:12> * <var:j> + <var:r> * <nat:266> + <nat:122> * <var:l> $ is guaranteed to be odd . On top of this , the products $ <nat:314> * <var:Z> $ , $ <var:K> * <nat:444> $ , $ <nat:496> * <var:f> $ , $ <nat:58> * <var:x> $ , $ <var:Q> * <nat:14> $ , $ <nat:12> * <var:j> $ , $ <nat:266> * <var:r> $ , in addition to $ <nat:122> * <var:l> $ are clearly even . This fact holds by reason that the natural numbers $ <nat:314> $ , $ <nat:444> $ , $ <nat:496> $ , $ <nat:58> $ , $ <nat:14> $ , $ <nat:12> $ , $ <nat:266> $ , additionally $ <nat:122> $ are trivially even . We know the totaling between an even positive integer with an odd number in $ \mathbb{N} $ must be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:Z> <var:K> <var:r> <var:l> <var:f> <var:Q> <var:j> <var:x> : nat , Nat . odd ( <nat:314> * <var:Z> + <nat:444> * <var:K> + <nat:266> * <var:r> + <nat:122> * <var:l> + <nat:496> * <var:f> + <nat:14> * <var:Q> + <nat:12> * <var:j> + <nat:58> * <var:x> + <nat:89> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:314> = true ) . { auto . } assert ( <genH> : Nat . even <nat:444> = true ) . { auto . } assert ( <genH> : Nat . even <nat:496> = true ) . { auto . } assert ( <genH> : Nat . even <nat:58> = true ) . { auto . } assert ( <genH> : Nat . even <nat:14> = true ) . { auto . } assert ( <genH> : Nat . even <nat:12> = true ) . { auto . } assert ( <genH> : Nat . even <nat:266> = true ) . { auto . } assert ( <genH> : Nat . even <nat:122> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:314> * <var:Z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:444> * <var:K> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:496> * <var:f> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:58> * <var:x> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:14> * <var:Q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:12> * <var:j> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:266> * <var:r> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:122> * <var:l> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 