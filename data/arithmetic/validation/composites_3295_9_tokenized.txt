\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Supposing that there exist positive integers $ <var:h> $ , $ <var:O> $ , $ <var:Q> $ , $ <var:E> $ , $ <var:A> $ , $ <var:W> $ , $ <var:X> $ , $ <var:g> $ , $ <var:x> $ we define that some number $ <var:M> $ is considered to be a <def:nine-composite> integer when $ <var:x> * <var:O> * <var:g> * <var:X> * <var:A> * <var:Q> * <var:E> * <var:W> * <var:h> = <var:M> $ plus larger than or equal to <nat:2> . \end{definition} \begin{theorem} $ <var:M> = <nat:9580032> $ is a <def:nine-composite> natural number . \end{theorem} \begin{proof} We verify our claim is true in view of $ <nat:3> $ , $ <nat:9> $ , $ <nat:12> $ , $ <nat:7> $ , $ <nat:4> $ , $ <nat:2> $ , $ <nat:6> $ , $ <nat:8> $ and $ <nat:11> $ are greater than or equivalent to <nat:2> as well as in view of $ <nat:9580032> = <var:W> \times <var:E> \times <var:A> \times <var:x> \times <var:O> \times <var:X> \times <var:Q> \times <var:g> \times <var:h> = <nat:6> \times <nat:9> \times <nat:11> \times <nat:12> \times <nat:3> \times <nat:4> \times <nat:7> \times <nat:2> \times <nat:8> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:M> : nat ) := exists <var:h> <var:O> <var:Q> <var:E> <var:A> <var:W> <var:X> <var:g> <var:x> : nat , ( <var:x> * <var:O> * <var:g> * <var:X> * <var:A> * <var:Q> * <var:E> * <var:W> * <var:h> = <var:M> ) /\ ( <var:h> >= <nat:2> ) /\ ( <var:O> >= <nat:2> ) /\ ( <var:Q> >= <nat:2> ) /\ ( <var:E> >= <nat:2> ) /\ ( <var:A> >= <nat:2> ) /\ ( <var:W> >= <nat:2> ) /\ ( <var:X> >= <nat:2> ) /\ ( <var:g> >= <nat:2> ) /\ ( <var:x> >= <nat:2> ) . Theorem <genP:1> : <def:nine-composite> <nat:9580032> . Proof . unfold <def:nine-composite> . assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } exists <nat:8> . exists <nat:3> . exists <nat:7> . exists <nat:9> . exists <nat:11> . exists <nat:6> . exists <nat:4> . exists <nat:2> . exists <nat:12> . repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 