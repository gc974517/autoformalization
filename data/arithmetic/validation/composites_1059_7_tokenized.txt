\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} If there exist integers $ <var:f> $ , $ <var:H> $ , $ <var:F> $ , $ <var:x> $ , $ <var:d> $ , $ <var:C> $ , $ <var:k> $ then we denote that $ <var:s> \in \mathbb{Z}^+ $ is defined to be a <def:seven-composite> whole number if $ <var:s> = <var:f> \times <var:F> \times <var:H> \times <var:d> \times <var:x> \times <var:C> \times <var:k> $ as well as factors are more than or equivalent to <nat:2> . \end{definition} \begin{theorem} $ <var:s> = <nat:142560> $ is a <def:seven-composite> number . \end{theorem} \begin{proof} Allow $ <var:d> = <nat:9> $ , $ <var:k> = <nat:8> $ , $ <var:f> = <nat:11> $ , $ <var:C> = <nat:5> $ , $ <var:x> = <nat:6> $ , $ <var:H> = <nat:3> $ and $ <var:F> = <nat:2> $ . Observe that $ <var:d> = <nat:9> $ , $ <var:F> = <nat:2> $ , $ <var:x> = <nat:6> $ , $ <var:k> = <nat:8> $ , $ <var:f> = <nat:11> $ , $ <var:C> = <nat:5> $ , and $ <var:H> = <nat:3> \geq <nat:2> $ . Plus observe that further $ <nat:6> * <nat:3> * <nat:5> * <nat:8> * <nat:2> * <nat:9> * <nat:11> = <nat:142560> $ . This suggests our principle is true . As a result , $ <var:k> \times <var:f> \times <var:x> \times <var:d> \times <var:C> \times <var:H> \times <var:F> = <nat:142560> $ is validated . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:s> : nat ) := exists <var:f> <var:H> <var:F> <var:x> <var:d> <var:C> <var:k> : nat , ( <var:s> = <var:f> * <var:F> * <var:H> * <var:d> * <var:x> * <var:C> * <var:k> ) /\ ( <var:f> >= <nat:2> ) /\ ( <var:H> >= <nat:2> ) /\ ( <var:F> >= <nat:2> ) /\ ( <var:x> >= <nat:2> ) /\ ( <var:d> >= <nat:2> ) /\ ( <var:C> >= <nat:2> ) /\ ( <var:k> >= <nat:2> ) . Theorem <genP:1> : <def:seven-composite> <nat:142560> . Proof . unfold <def:seven-composite> . exists <nat:11> . exists <nat:3> . exists <nat:2> . exists <nat:6> . exists <nat:9> . exists <nat:5> . exists <nat:8> . assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 