\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:v> <nat:320> + <nat:344> <var:n> + <var:P> <nat:200> + <nat:378> <var:G> + <nat:380> <var:V> + <nat:243> + <var:c> <nat:280> + <var:B> <nat:78> $ is odd using some $ <var:v> $ , $ <var:V> $ , $ <var:c> $ , $ <var:G> $ , $ <var:B> $ , $ <var:P> $ , and $ <var:n> \in \mathbb{Z}^+ $ . \end{theorem} \begin{proof} Building on , the products $ <var:v> * <nat:320> $ , $ <var:n> * <nat:344> $ , $ <var:P> * <nat:200> $ , $ <nat:378> * <var:G> $ , $ <nat:380> * <var:V> $ , $ <nat:280> * <var:c> $ , and moreover $ <var:B> * <nat:78> $ are even . This fact is proven because the integers $ <nat:320> $ , $ <nat:344> $ , $ <nat:200> $ , $ <nat:378> $ , $ <nat:380> $ , $ <nat:280> $ , plus $ <nat:78> $ are clearly even . Observe $ <nat:243> $ is trivially an odd positive integer . We check this proposition is true . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:v> <var:V> <var:c> <var:G> <var:B> <var:P> <var:n> : nat , Nat . odd ( <nat:320> * <var:v> + <nat:344> * <var:n> + <nat:200> * <var:P> + <nat:378> * <var:G> + <nat:380> * <var:V> + <nat:280> * <var:c> + <nat:78> * <var:B> + <nat:243> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:320> = true ) . { auto . } assert ( <genH> : Nat . even <nat:344> = true ) . { auto . } assert ( <genH> : Nat . even <nat:200> = true ) . { auto . } assert ( <genH> : Nat . even <nat:378> = true ) . { auto . } assert ( <genH> : Nat . even <nat:380> = true ) . { auto . } assert ( <genH> : Nat . even <nat:280> = true ) . { auto . } assert ( <genH> : Nat . even <nat:78> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:320> * <var:v> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:344> * <var:n> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:200> * <var:P> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:378> * <var:G> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:380> * <var:V> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:280> * <var:c> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:78> * <var:B> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:243> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 