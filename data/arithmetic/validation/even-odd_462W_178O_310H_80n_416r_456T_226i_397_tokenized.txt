\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:W> * <nat:462> + <nat:397> + <var:O> * <nat:178> + <nat:226> * <var:i> + <var:r> * <nat:416> + <var:T> * <nat:456> + <var:n> * <nat:80> + <nat:310> * <var:H> $ is guaranteed to be odd . \end{theorem} \begin{proof} It can be justified that the sum $ <nat:397> + <nat:462> \cdot <var:W> + <nat:178> \cdot <var:O> + <var:H> \cdot <nat:310> + <nat:80> \cdot <var:n> + <var:r> \cdot <nat:416> + <nat:456> \cdot <var:T> + <nat:226> \cdot <var:i> $ must be odd applying the knowledge taking the product of an even natural number with an arbitrary number in $ \mathbb{Z}^+ $ will be even . Notice that $ <nat:397> $ is odd . The leading terms $ <nat:456> $ , $ <nat:416> $ , and moreover $ <nat:178> $ are obviously even Take note the number $ <nat:226> $ is known as an even natural number Recall that the positive integer $ <nat:462> $ is known to be an even element of $ \mathbb{N} $ Additionally , the whole number $ <nat:80> $ is clearly an even number in $ \mathbb{N} $ Adding on , the positive integer $ <nat:310> $ is known as an even integer \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:W> <var:O> <var:i> <var:r> <var:T> <var:n> <var:H> : nat , Nat . odd ( <nat:462> * <var:W> + <nat:178> * <var:O> + <nat:226> * <var:i> + <nat:416> * <var:r> + <nat:456> * <var:T> + <nat:80> * <var:n> + <nat:310> * <var:H> + <nat:397> ) = true . Proof . intros . rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . assert ( <genH> : Nat . odd <nat:397> = true ) . { auto . } assert ( <genH> : Nat . even <nat:456> = true ) . { auto . } assert ( <genH> : Nat . even <nat:416> = true ) . { auto . } assert ( <genH> : Nat . even <nat:178> = true ) . { auto . } assert ( <genH> : Nat . even <nat:226> = true ) . { auto . } assert ( <genH> : Nat . even <nat:462> = true ) . { auto . } assert ( <genH> : Nat . even <nat:80> = true ) . { auto . } assert ( <genH> : Nat . even <nat:310> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 