\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Assuming we have $ <var:t> $ , $ <var:O> $ , $ <var:E> $ , $ <var:J> $ , $ <var:M> $ , $ <var:A> $ , $ <var:c> $ , $ <var:C> $ , $ <var:e> \geq <nat:2> $ satisfying the condition that using some natural number $ <var:i> $ , $ <var:E> \times <var:c> \times <var:O> \times <var:C> \times <var:e> \times <var:M> \times <var:J> \times <var:t> \times <var:A> = <var:i> $ for some positive integers $ <var:O> $ , $ <var:t> $ , $ <var:M> $ , $ <var:C> $ , $ <var:c> $ , $ <var:J> $ , $ <var:E> $ , $ <var:A> $ , $ <var:e> $ , assume that $ <var:i> $ is a <def:nine-composite> natural number . Thus $ <var:i> = <nat:9580032> $ is a <def:nine-composite> whole number . \end{theorem} \begin{proof} Notice $ <nat:8> $ , $ <nat:2> $ , $ <nat:12> $ , $ <nat:6> $ , $ <nat:9> $ , $ <nat:11> $ , $ <nat:3> $ , $ <nat:7> $ , $ <nat:4> \geq <nat:2> $ . Additionally observe that too $ <var:c> \cdot <var:e> \cdot <var:C> \cdot <var:t> \cdot <var:E> \cdot <var:A> \cdot <var:O> \cdot <var:J> \cdot <var:M> = <nat:9580032> $ hints $ <var:O> = <nat:3> $ , $ <var:E> = <nat:11> $ , $ <var:e> = <nat:4> $ , $ <var:C> = <nat:6> $ , $ <var:t> = <nat:9> $ , $ <var:J> = <nat:8> $ , $ <var:A> = <nat:2> $ , $ <var:c> = <nat:7> $ and $ <var:M> = <nat:12> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:i> : nat ) := exists <var:O> <var:t> <var:M> <var:C> <var:c> <var:J> <var:E> <var:A> <var:e> : nat , ( <var:t> >= <nat:2> ) /\ ( <var:O> >= <nat:2> ) /\ ( <var:E> >= <nat:2> ) /\ ( <var:J> >= <nat:2> ) /\ ( <var:M> >= <nat:2> ) /\ ( <var:A> >= <nat:2> ) /\ ( <var:c> >= <nat:2> ) /\ ( <var:C> >= <nat:2> ) /\ ( <var:e> >= <nat:2> ) /\ ( <var:E> * <var:c> * <var:O> * <var:C> * <var:e> * <var:M> * <var:J> * <var:t> * <var:A> = <var:i> ) . Theorem <genP:1> : <def:nine-composite> <nat:9580032> . Proof . unfold <def:nine-composite> . assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } exists <nat:3> . exists <nat:9> . exists <nat:12> . exists <nat:6> . exists <nat:7> . exists <nat:8> . exists <nat:11> . exists <nat:2> . exists <nat:4> . repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 