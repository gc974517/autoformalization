\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:436> \cdot <var:u> + <nat:156> \cdot <var:U> + <nat:341> + <var:o> \cdot <nat:498> + <nat:134> \cdot <var:O> + <nat:318> \cdot <var:s> + <var:P> \cdot <nat:330> + <var:p> \cdot <nat:420> $ must be odd with all whole numbers $ <var:O> $ , $ <var:o> $ , $ <var:u> $ , $ <var:p> $ , $ <var:s> $ , $ <var:U> $ , and $ <var:P> $ . \end{theorem} \begin{proof} Additionally , notice the pairs $ <var:u> \cdot <nat:436> $ , $ <nat:156> \cdot <var:U> $ , $ <nat:498> \cdot <var:o> $ , $ <nat:134> \cdot <var:O> $ , $ <var:s> \cdot <nat:318> $ , $ <var:P> \cdot <nat:330> $ , and $ <nat:420> \cdot <var:p> $ will be even . This holds by reason that taking the product of an even element of $ \mathbb{N} $ and any natural must be even , and must be true because the numbers $ <nat:436> $ , $ <nat:156> $ , $ <nat:498> $ , $ <nat:134> $ , $ <nat:318> $ , $ <nat:330> $ , and also $ <nat:420> $ are guaranteed to be even . It can be verified that our proposition must be true . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:O> <var:o> <var:u> <var:p> <var:s> <var:U> <var:P> : nat , Nat . odd ( <nat:436> * <var:u> + <nat:156> * <var:U> + <nat:498> * <var:o> + <nat:134> * <var:O> + <nat:318> * <var:s> + <nat:330> * <var:P> + <nat:420> * <var:p> + <nat:341> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:436> = true ) . { auto . } assert ( <genH> : Nat . even <nat:156> = true ) . { auto . } assert ( <genH> : Nat . even <nat:498> = true ) . { auto . } assert ( <genH> : Nat . even <nat:134> = true ) . { auto . } assert ( <genH> : Nat . even <nat:318> = true ) . { auto . } assert ( <genH> : Nat . even <nat:330> = true ) . { auto . } assert ( <genH> : Nat . even <nat:420> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:436> * <var:u> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:156> * <var:U> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:498> * <var:o> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:134> * <var:O> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:318> * <var:s> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:330> * <var:P> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:420> * <var:p> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 