\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:485> + <var:e> <nat:18> + <nat:492> <var:s> + <nat:14> <var:I> + <nat:166> <var:P> + <nat:216> <var:L> + <nat:272> <var:X> + <var:u> <nat:194> + <var:B> <nat:274> $ is odd . \end{theorem} \begin{proof} It can be checked that this result must be true . Observe $ <nat:485> $ is an odd number in $ \mathbb{Z}^+ $ . The pairs $ <nat:272> \cdot <var:X> $ , $ <nat:216> \cdot <var:L> $ , $ <var:s> \cdot <nat:492> $ , $ <var:B> \cdot <nat:274> $ , and also $ <var:P> \cdot <nat:166> $ will be even . This fact is proven as a consequence that the product of an even integer with some whole number must be even . The products $ <nat:14> \cdot <var:I> $ in addition to $ <nat:18> \cdot <var:e> $ are guaranteed to be even . $ <nat:194> \cdot <var:u> $ is an even number because the product between an even number in $ \mathbb{N} $ and any element of $ \mathbb{N} $ is even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:e> <var:s> <var:I> <var:P> <var:L> <var:X> <var:u> <var:B> : nat , Nat . odd ( <nat:18> * <var:e> + <nat:492> * <var:s> + <nat:14> * <var:I> + <nat:166> * <var:P> + <nat:216> * <var:L> + <nat:272> * <var:X> + <nat:194> * <var:u> + <nat:274> * <var:B> + <nat:485> ) = true . Proof . intros . assert ( <genH> : Nat . odd <nat:485> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:272> * <var:X> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:216> * <var:L> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:492> * <var:s> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:274> * <var:B> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:166> * <var:P> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:14> * <var:I> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:18> * <var:e> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:194> * <var:u> ) = true ) . { rewrite Nat . even_mul . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 