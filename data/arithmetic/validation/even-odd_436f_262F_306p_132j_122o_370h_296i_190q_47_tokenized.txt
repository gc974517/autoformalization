\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} For unknowns $ <var:f> $ , $ <var:q> $ , $ <var:i> $ , $ <var:h> $ , $ <var:o> $ , $ <var:p> $ , $ <var:F> $ , and $ <var:j> $ the summation $ <nat:436> \cdot <var:f> + <var:q> \cdot <nat:190> + <nat:132> \cdot <var:j> + <nat:370> \cdot <var:h> + <var:F> \cdot <nat:262> + <nat:306> \cdot <var:p> + <var:i> \cdot <nat:296> + <nat:47> + <nat:122> \cdot <var:o> $ is odd . \end{theorem} \begin{proof} $ <var:f> <nat:436> + <nat:370> <var:h> + <nat:132> <var:j> + <var:i> <nat:296> + <nat:262> <var:F> + <nat:122> <var:o> + <var:q> <nat:190> + <nat:306> <var:p> $ is even . The pairs $ <nat:122> <var:o> $ , $ <nat:370> <var:h> $ , $ <var:f> <nat:436> $ , $ <var:j> <nat:132> $ , $ <var:i> <nat:296> $ , and likewise $ <nat:190> <var:q> $ are known to be even numbers . On top of this , remember that $ <nat:262> <var:F> $ is guaranteed to be an even integer from the fact the product between an even positive integer with an arbitrary number must be by definition an even number in $ \mathbb{N} $ . Likewise , the product $ <var:p> <nat:306> $ is trivially an even whole number . It can be verified that the sum $ <nat:47> + <nat:436> \times <var:f> + <nat:262> \times <var:F> + <nat:306> \times <var:p> + <var:j> \times <nat:132> + <nat:122> \times <var:o> + <var:h> \times <nat:370> + <var:i> \times <nat:296> + <nat:190> \times <var:q> $ is guaranteed to be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:f> <var:q> <var:i> <var:h> <var:o> <var:p> <var:F> <var:j> : nat , Nat . odd ( <nat:436> * <var:f> + <nat:190> * <var:q> + <nat:132> * <var:j> + <nat:370> * <var:h> + <nat:262> * <var:F> + <nat:306> * <var:p> + <nat:296> * <var:i> + <nat:122> * <var:o> + <nat:47> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:122> * <var:o> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:370> * <var:h> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:436> * <var:f> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:132> * <var:j> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:296> * <var:i> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:190> * <var:q> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:262> * <var:F> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:306> * <var:p> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:436> * <var:f> + <nat:190> * <var:q> + <nat:132> * <var:j> + <nat:370> * <var:h> + <nat:262> * <var:F> + <nat:306> * <var:p> + <nat:296> * <var:i> + <nat:122> * <var:o> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 