\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:307> + <nat:228> * <var:q> + <var:K> * <nat:158> + <var:c> * <nat:212> + <var:Q> * <nat:330> + <nat:266> * <var:j> + <var:M> * <nat:308> + <var:i> * <nat:70> $ is odd given every whole numbers $ <var:j> $ , $ <var:M> $ , $ <var:c> $ , $ <var:i> $ , $ <var:K> $ , $ <var:Q> $ , and $ <var:q> $ . \end{theorem} \begin{proof} See $ <nat:307> $ is known as an odd element of $ \mathbb{N} $ . It can be justified that the formula $ <nat:212> * <var:c> + <var:K> * <nat:158> + <var:M> * <nat:308> + <var:q> * <nat:228> + <nat:307> + <nat:70> * <var:i> + <nat:266> * <var:j> + <nat:330> * <var:Q> $ must be odd . Building on , notice the numbers $ <nat:212> $ , $ <nat:158> $ , $ <nat:308> $ , $ <nat:228> $ , $ <nat:70> $ , $ <nat:266> $ , and $ <nat:330> $ are even . So , the products $ <var:c> <nat:212> $ , $ <var:K> <nat:158> $ , $ <var:M> <nat:308> $ , $ <var:q> <nat:228> $ , $ <var:i> <nat:70> $ , $ <nat:266> <var:j> $ , and likewise $ <nat:330> <var:Q> $ must be even additionally . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:j> <var:M> <var:c> <var:i> <var:K> <var:Q> <var:q> : nat , Nat . odd ( <nat:228> * <var:q> + <nat:158> * <var:K> + <nat:212> * <var:c> + <nat:330> * <var:Q> + <nat:266> * <var:j> + <nat:308> * <var:M> + <nat:70> * <var:i> + <nat:307> ) = true . Proof . intros . assert ( <genH> : Nat . odd <nat:307> = true ) . { auto . } assert ( <genH> : Nat . even <nat:212> = true ) . { auto . } assert ( <genH> : Nat . even <nat:158> = true ) . { auto . } assert ( <genH> : Nat . even <nat:308> = true ) . { auto . } assert ( <genH> : Nat . even <nat:228> = true ) . { auto . } assert ( <genH> : Nat . even <nat:70> = true ) . { auto . } assert ( <genH> : Nat . even <nat:266> = true ) . { auto . } assert ( <genH> : Nat . even <nat:330> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:212> * <var:c> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:158> * <var:K> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:308> * <var:M> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:228> * <var:q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:70> * <var:i> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:266> * <var:j> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:330> * <var:Q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 