\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Using all unknowns $ <var:g> $ , $ <var:C> $ , $ <var:Q> $ , $ <var:L> $ , $ <var:s> $ , $ <var:n> $ , and $ <var:j> $ $ <nat:441> + <nat:212> * <var:j> + <var:s> * <nat:348> + <var:C> * <nat:364> + <nat:474> * <var:n> + <var:L> * <nat:214> + <nat:410> * <var:g> + <var:Q> * <nat:218> $ must be odd . \end{theorem} \begin{proof} Take note the pairs $ <nat:212> \cdot <var:j> $ , $ <nat:348> \cdot <var:s> $ , $ <var:C> \cdot <nat:364> $ , $ <var:n> \cdot <nat:474> $ , $ <nat:214> \cdot <var:L> $ , $ <var:g> \cdot <nat:410> $ , as well as $ <nat:218> \cdot <var:Q> $ are known as even . This fact is true because taking the product between an even integer with some natural number will be even , and is proven from the knowledge the natural numbers $ <nat:212> $ , $ <nat:348> $ , $ <nat:364> $ , $ <nat:474> $ , $ <nat:214> $ , $ <nat:410> $ , plus $ <nat:218> $ must be even numbers in $ \mathbb{Z}^+ $ . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:g> <var:C> <var:Q> <var:L> <var:s> <var:n> <var:j> : nat , Nat . odd ( <nat:212> * <var:j> + <nat:348> * <var:s> + <nat:364> * <var:C> + <nat:474> * <var:n> + <nat:214> * <var:L> + <nat:410> * <var:g> + <nat:218> * <var:Q> + <nat:441> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:212> = true ) . { auto . } assert ( <genH> : Nat . even <nat:348> = true ) . { auto . } assert ( <genH> : Nat . even <nat:364> = true ) . { auto . } assert ( <genH> : Nat . even <nat:474> = true ) . { auto . } assert ( <genH> : Nat . even <nat:214> = true ) . { auto . } assert ( <genH> : Nat . even <nat:410> = true ) . { auto . } assert ( <genH> : Nat . even <nat:218> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:212> * <var:j> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:348> * <var:s> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:364> * <var:C> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:474> * <var:n> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:214> * <var:L> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:410> * <var:g> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:218> * <var:Q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 