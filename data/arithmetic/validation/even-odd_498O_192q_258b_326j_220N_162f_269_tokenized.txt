\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:j> <nat:326> + <nat:498> <var:O> + <nat:258> <var:b> + <var:N> <nat:220> + <var:f> <nat:162> + <var:q> <nat:192> + <nat:269> $ is guaranteed to be odd . \end{theorem} \begin{proof} We verify $ <nat:498> \cdot <var:O> + <nat:192> \cdot <var:q> + <var:b> \cdot <nat:258> + <nat:326> \cdot <var:j> + <var:N> \cdot <nat:220> + <var:f> \cdot <nat:162> + <nat:269> $ is odd . Remember $ <nat:269> $ is known as odd . On top of this , recall that the leading terms $ <nat:498> $ , $ <nat:192> $ , $ <nat:258> $ , $ <nat:326> $ , $ <nat:220> $ , $ <nat:162> $ , are obviously even . Therefore , the products $ <var:O> <nat:498> $ , $ <nat:192> <var:q> $ , $ <var:b> <nat:258> $ , $ <var:j> <nat:326> $ , $ <nat:220> <var:N> $ , $ <var:f> <nat:162> $ , is even in addition . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:j> <var:O> <var:b> <var:N> <var:f> <var:q> : nat , Nat . odd ( <nat:326> * <var:j> + <nat:498> * <var:O> + <nat:258> * <var:b> + <nat:220> * <var:N> + <nat:162> * <var:f> + <nat:192> * <var:q> + <nat:269> ) = true . Proof . intros . assert ( <genH> : Nat . odd <nat:269> = true ) . { auto . } assert ( <genH> : Nat . even <nat:498> = true ) . { auto . } assert ( <genH> : Nat . even <nat:192> = true ) . { auto . } assert ( <genH> : Nat . even <nat:258> = true ) . { auto . } assert ( <genH> : Nat . even <nat:326> = true ) . { auto . } assert ( <genH> : Nat . even <nat:220> = true ) . { auto . } assert ( <genH> : Nat . even <nat:162> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:498> * <var:O> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:192> * <var:q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:258> * <var:b> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:326> * <var:j> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:220> * <var:N> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:162> * <var:f> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 