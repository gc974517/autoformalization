\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:492> <var:z> + <var:Q> <nat:424> + <var:s> <nat:170> + <var:y> <nat:372> + <var:t> <nat:282> + <nat:179> + <nat:310> <var:q> + <var:Z> <nat:386> $ is odd . \end{theorem} \begin{proof} Our proposition is proven from the knowledge $ <var:y> \cdot <nat:372> + <var:Z> \cdot <nat:386> + <var:q> \cdot <nat:310> + <nat:492> \cdot <var:z> + <var:Q> \cdot <nat:424> + <nat:170> \cdot <var:s> + <nat:282> \cdot <var:t> $ is guaranteed to be even . The products $ <nat:492> \times <var:z> $ , $ <var:Z> \times <nat:386> $ , $ <nat:282> \times <var:t> $ , $ <nat:424> \times <var:Q> $ , $ <var:s> \times <nat:170> $ , and also $ <nat:310> \times <var:q> $ are obviously even numbers in $ \mathbb{Z}^+ $ . $ <var:y> \times <nat:372> $ is clearly an even element of $ \mathbb{N} $ . This claim must be true from the knowledge the product between an even natural with a number in $ \mathbb{Z}^+ $ is guaranteed to be even . This result is true as a consequence that the product of even integers and a integer is guaranteed to be even . It can be proven that the expression $ <var:s> \times <nat:170> + <var:z> \times <nat:492> + <nat:179> + <var:t> \times <nat:282> + <var:Q> \times <nat:424> + <nat:372> \times <var:y> + <var:q> \times <nat:310> + <nat:386> \times <var:Z> $ must be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:z> <var:Q> <var:s> <var:y> <var:t> <var:q> <var:Z> : nat , Nat . odd ( <nat:492> * <var:z> + <nat:424> * <var:Q> + <nat:170> * <var:s> + <nat:372> * <var:y> + <nat:282> * <var:t> + <nat:310> * <var:q> + <nat:386> * <var:Z> + <nat:179> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:492> * <var:z> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:386> * <var:Z> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:282> * <var:t> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:424> * <var:Q> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:170> * <var:s> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:310> * <var:q> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:372> * <var:y> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:492> * <var:z> + <nat:424> * <var:Q> + <nat:170> * <var:s> + <nat:372> * <var:y> + <nat:282> * <var:t> + <nat:310> * <var:q> + <nat:386> * <var:Z> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 