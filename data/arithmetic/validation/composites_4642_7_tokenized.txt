\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Take $ <var:C> $ , $ <var:E> $ , $ <var:k> $ , $ <var:q> $ , $ <var:g> $ , $ <var:P> $ , $ <var:j> \in \mathbb{N} $ greater than or equal to <nat:2> . We say that $ <var:n> \in \mathbb{N} $ will be considered to be a <def:seven-composite> whole number when $ <var:n> = <var:g> \times <var:j> \times <var:P> \times <var:q> \times <var:E> \times <var:C> \times <var:k> $ . Accordingly $ <nat:75600> = <var:n> $ is <def:seven-composite> . \end{theorem} \begin{proof} Recollect that a <def:seven-composite> whole number is the product of positive integers $ <var:j> $ , $ <var:k> $ , $ <var:q> $ , $ <var:C> $ , $ <var:g> $ , $ <var:E> $ , and $ <var:P> $ such that $ <var:q> $ , $ <var:C> $ , $ <var:P> $ , $ <var:j> $ , $ <var:k> $ , $ <var:E> $ , and $ <var:g> \geq <nat:2> $ . Allow $ <var:g> = <nat:4> $ , $ <var:k> = <nat:5> $ , $ <var:C> = <nat:10> $ , $ <var:q> = <nat:3> $ , $ <var:E> = <nat:2> $ , $ <var:P> = <nat:9> $ and $ <var:j> = <nat:7> $ . We confirm <nat:75600> is a <def:seven-composite> positive integer . Additionally notice $ <var:q> = <nat:3> $ , $ <var:g> = <nat:4> $ , $ <var:j> = <nat:7> $ , $ <var:E> = <nat:2> $ , $ <var:k> = <nat:5> $ , $ <var:C> = <nat:10> $ and $ <var:P> = <nat:9> \geq <nat:2> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:n> : nat ) := exists <var:C> <var:E> <var:k> <var:q> <var:g> <var:P> <var:j> : nat , ( <var:C> >= <nat:2> ) /\ ( <var:E> >= <nat:2> ) /\ ( <var:k> >= <nat:2> ) /\ ( <var:q> >= <nat:2> ) /\ ( <var:g> >= <nat:2> ) /\ ( <var:P> >= <nat:2> ) /\ ( <var:j> >= <nat:2> ) /\ ( <var:n> = <var:g> * <var:j> * <var:P> * <var:q> * <var:E> * <var:C> * <var:k> ) . Theorem <genP:1> : <def:seven-composite> <nat:75600> . Proof . unfold <def:seven-composite> . exists <nat:10> . exists <nat:2> . exists <nat:5> . exists <nat:3> . exists <nat:4> . exists <nat:9> . exists <nat:7> . assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 