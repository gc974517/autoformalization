\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Claim that $ <var:T> $ is a <def:seven-composite> number granted given some positive integers $ <var:P> $ , $ <var:y> $ , $ <var:k> $ , $ <var:J> $ , $ <var:U> $ , $ <var:L> $ , $ <var:d> $ we have $ <var:y> * <var:U> * <var:d> * <var:k> * <var:L> * <var:J> * <var:P> = <var:T> $ for some integer $ <var:T> $ and where $ <var:k> $ , $ <var:y> $ , $ <var:L> $ , $ <var:J> $ , $ <var:U> $ , $ <var:d> $ and $ <var:P> \geq <nat:2> $ . \end{definition} \begin{theorem} $ <nat:453600> = <var:T> $ is a <def:seven-composite> whole number . \end{theorem} \begin{proof} Remember that <nat:453600> is <def:seven-composite> iff <nat:453600> is the multiplication between integers $ <var:U> $ , $ <var:J> $ , $ <var:d> $ , $ <var:y> $ , $ <var:L> $ , $ <var:P> $ , $ <var:k> $ more than <nat:1> . Take $ <var:L> = <nat:7> $ , $ <var:d> = <nat:10> $ , $ <var:y> = <nat:5> $ , $ <var:J> = <nat:9> $ , $ <var:P> = <nat:3> $ , $ <var:k> = <nat:8> $ and $ <var:U> = <nat:6> $ . We show <nat:453600> is a <def:seven-composite> number in view of As $ <nat:10> $ , $ <nat:5> $ , $ <nat:9> $ , $ <nat:6> $ , $ <nat:3> $ , $ <nat:8> $ and $ <nat:7> > <nat:1> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:T> : nat ) := exists <var:P> <var:y> <var:k> <var:J> <var:U> <var:L> <var:d> : nat , ( <var:y> * <var:U> * <var:d> * <var:k> * <var:L> * <var:J> * <var:P> = <var:T> ) /\ ( <var:k> >= <nat:2> ) /\ ( <var:y> >= <nat:2> ) /\ ( <var:L> >= <nat:2> ) /\ ( <var:J> >= <nat:2> ) /\ ( <var:U> >= <nat:2> ) /\ ( <var:d> >= <nat:2> ) /\ ( <var:P> >= <nat:2> ) . Theorem <genP:1> : <def:seven-composite> <nat:453600> . Proof . unfold <def:seven-composite> . exists <nat:3> . exists <nat:5> . exists <nat:8> . exists <nat:9> . exists <nat:6> . exists <nat:7> . exists <nat:10> . assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } assert ( <genH> : <nat:5> > <nat:1> ) . { lia . } assert ( <genH> : <nat:9> > <nat:1> ) . { lia . } assert ( <genH> : <nat:6> > <nat:1> ) . { lia . } assert ( <genH> : <nat:3> > <nat:1> ) . { lia . } assert ( <genH> : <nat:8> > <nat:1> ) . { lia . } assert ( <genH> : <nat:7> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 