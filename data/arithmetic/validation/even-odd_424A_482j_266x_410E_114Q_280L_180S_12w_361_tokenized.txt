\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:180> \cdot <var:S> + <var:L> \cdot <nat:280> + <nat:482> \cdot <var:j> + <nat:361> + <var:E> \cdot <nat:410> + <var:A> \cdot <nat:424> + <var:w> \cdot <nat:12> + <var:Q> \cdot <nat:114> + <var:x> \cdot <nat:266> $ must be odd using every positive terms $ <var:w> $ , $ <var:E> $ , $ <var:L> $ , $ <var:Q> $ , $ <var:j> $ , $ <var:S> $ , $ <var:A> $ , and $ <var:x> $ . \end{theorem} \begin{proof} $ <var:j> \cdot <nat:482> + <nat:280> \cdot <var:L> + <nat:266> \cdot <var:x> + <nat:424> \cdot <var:A> + <nat:180> \cdot <var:S> + <var:E> \cdot <nat:410> + <nat:114> \cdot <var:Q> + <nat:12> \cdot <var:w> + <nat:361> $ is known to be odd because the summation $ <var:L> <nat:280> + <var:j> <nat:482> + <var:E> <nat:410> + <var:Q> <nat:114> + <nat:266> <var:x> + <nat:12> <var:w> + <nat:424> <var:A> + <var:S> <nat:180> $ is known to be even . On top of this , notice that the pairs $ <var:L> \times <nat:280> $ , $ <var:j> \times <nat:482> $ , $ <var:E> \times <nat:410> $ , $ <var:Q> \times <nat:114> $ , $ <var:x> \times <nat:266> $ , $ <var:w> \times <nat:12> $ , $ <var:A> \times <nat:424> $ , as well as $ <nat:180> \times <var:S> $ are clearly even as a consequence that the numbers $ <nat:280> $ , $ <nat:482> $ , $ <nat:410> $ , $ <nat:114> $ , $ <nat:266> $ , $ <nat:12> $ , $ <nat:424> $ , and likewise $ <nat:180> $ are clearly even . From the knowledge the multiplication of an even natural and some natural number is guaranteed to be even the sum $ <var:A> \cdot <nat:424> + <var:j> \cdot <nat:482> + <var:x> \cdot <nat:266> + <nat:410> \cdot <var:E> + <var:Q> \cdot <nat:114> + <nat:280> \cdot <var:L> + <nat:180> \cdot <var:S> + <nat:12> \cdot <var:w> $ will be itself even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:w> <var:E> <var:L> <var:Q> <var:j> <var:S> <var:A> <var:x> : nat , Nat . odd ( <nat:180> * <var:S> + <nat:280> * <var:L> + <nat:482> * <var:j> + <nat:410> * <var:E> + <nat:424> * <var:A> + <nat:12> * <var:w> + <nat:114> * <var:Q> + <nat:266> * <var:x> + <nat:361> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:280> = true ) . { auto . } assert ( <genH> : Nat . even <nat:482> = true ) . { auto . } assert ( <genH> : Nat . even <nat:410> = true ) . { auto . } assert ( <genH> : Nat . even <nat:114> = true ) . { auto . } assert ( <genH> : Nat . even <nat:266> = true ) . { auto . } assert ( <genH> : Nat . even <nat:12> = true ) . { auto . } assert ( <genH> : Nat . even <nat:424> = true ) . { auto . } assert ( <genH> : Nat . even <nat:180> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:280> * <var:L> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:482> * <var:j> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:410> * <var:E> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:114> * <var:Q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:266> * <var:x> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:12> * <var:w> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:424> * <var:A> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:180> * <var:S> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:180> * <var:S> + <nat:280> * <var:L> + <nat:482> * <var:j> + <nat:410> * <var:E> + <nat:424> * <var:A> + <nat:12> * <var:w> + <nat:114> * <var:Q> + <nat:266> * <var:x> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 