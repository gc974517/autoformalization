\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:228> \cdot <var:f> + <nat:246> \cdot <var:S> + <nat:124> \cdot <var:e> + <nat:311> + <nat:414> \cdot <var:W> + <nat:368> \cdot <var:s> + <var:D> \cdot <nat:452> + <var:k> \cdot <nat:98> + <nat:92> \cdot <var:F> $ will be odd given any terms $ <var:F> $ , $ <var:S> $ , $ <var:s> $ , $ <var:f> $ , $ <var:W> $ , $ <var:e> $ , $ <var:D> $ , and $ <var:k> $ . \end{theorem} \begin{proof} It can be justified that our lemma must be true . See the products $ <var:F> \cdot <nat:92> $ , $ <nat:124> \cdot <var:e> $ , $ <var:W> \cdot <nat:414> $ , $ <nat:228> \cdot <var:f> $ , and moreover $ <var:k> \cdot <nat:98> $ are obviously even . Take note the term $ <var:D> \cdot <nat:452> $ is trivially an even natural . Building on , we know the pair $ <nat:368> \cdot <var:s> $ is trivially even . Remember $ <nat:246> \cdot <var:S> $ is an even number in $ \mathbb{N} $ . The addition of even positive integers successively with an odd natural number must be an odd positive integer . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:F> <var:S> <var:s> <var:f> <var:W> <var:e> <var:D> <var:k> : nat , Nat . odd ( <nat:228> * <var:f> + <nat:246> * <var:S> + <nat:124> * <var:e> + <nat:414> * <var:W> + <nat:368> * <var:s> + <nat:452> * <var:D> + <nat:98> * <var:k> + <nat:92> * <var:F> + <nat:311> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:92> * <var:F> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:124> * <var:e> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:414> * <var:W> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:228> * <var:f> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:98> * <var:k> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:452> * <var:D> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:368> * <var:s> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:246> * <var:S> ) = true ) . { rewrite Nat . even_mul . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 