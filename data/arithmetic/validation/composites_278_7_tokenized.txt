\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Only if there exist whole numbers $ <var:a> $ , $ <var:n> $ , $ <var:A> $ , $ <var:Y> $ , $ <var:b> $ , $ <var:F> $ , $ <var:i> $ then we define that $ <var:R> \in \mathbb{Z}^+ $ is said to be <def:seven-composite> when $ <var:n> * <var:a> * <var:i> * <var:b> * <var:F> * <var:Y> * <var:A> = <var:R> $ plus more than or equivalent to <nat:2> . \end{definition} \begin{theorem} <nat:136080> is a <def:seven-composite> whole number . \end{theorem} \begin{proof} Remember that a <def:seven-composite> is the multiplication of integers $ <var:i> $ , $ <var:a> $ , $ <var:b> $ , $ <var:Y> $ , $ <var:A> $ , $ <var:F> $ and $ <var:n> $ more than or equivalent to <nat:2> . Let $ <var:F> = <nat:6> $ , $ <var:A> = <nat:12> $ , $ <var:a> = <nat:2> $ , $ <var:i> = <nat:9> $ , $ <var:b> = <nat:7> $ , $ <var:n> = <nat:5> $ , $ <var:Y> = <nat:3> $ . Note $ <var:a> = <nat:2> $ , $ <var:n> = <nat:5> $ , $ <var:A> = <nat:12> $ , $ <var:Y> = <nat:3> $ , $ <var:F> = <nat:6> $ , $ <var:i> = <nat:9> $ and $ <var:b> = <nat:7> \geq <nat:2> $ . This gives our result holds . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:R> : nat ) := exists <var:a> <var:n> <var:A> <var:Y> <var:b> <var:F> <var:i> : nat , ( <var:n> * <var:a> * <var:i> * <var:b> * <var:F> * <var:Y> * <var:A> = <var:R> ) /\ ( <var:a> >= <nat:2> ) /\ ( <var:n> >= <nat:2> ) /\ ( <var:A> >= <nat:2> ) /\ ( <var:Y> >= <nat:2> ) /\ ( <var:b> >= <nat:2> ) /\ ( <var:F> >= <nat:2> ) /\ ( <var:i> >= <nat:2> ) . Theorem <genP:1> : <def:seven-composite> <nat:136080> . Proof . unfold <def:seven-composite> . exists <nat:2> . exists <nat:5> . exists <nat:12> . exists <nat:3> . exists <nat:7> . exists <nat:6> . exists <nat:9> . assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 