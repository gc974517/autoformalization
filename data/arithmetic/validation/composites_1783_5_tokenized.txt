\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Allow $ <var:O> $ , $ <var:l> $ , $ <var:I> $ , $ <var:o> $ , $ <var:s> \in \mathbb{N} $ satisfying the condition that $ <var:s> $ , $ <var:o> $ , $ <var:O> $ , $ <var:l> $ , $ <var:I> \geq <nat:2> $ . We claim that some $ <var:n> $ is considered to be a <def:five-composite> natural number given $ <var:n> = <var:O> \times <var:s> \times <var:l> \times <var:o> \times <var:I> $ . Hence <nat:24948> is a <def:five-composite> whole number . \end{theorem} \begin{proof} Recall that <nat:24948> is a <def:five-composite> integer supposing that it is the product of natural numbers $ <var:o> $ , $ <var:I> $ , $ <var:s> $ , $ <var:O> $ , and $ <var:l> $ satisfying the condition that $ <var:O> $ , $ <var:l> $ , $ <var:s> $ , $ <var:o> $ and $ <var:I> \geq <nat:2> $ . We demonstrate <nat:24948> is a <def:five-composite> whole number . Notice $ <var:o> * <var:l> * <var:s> * <var:I> * <var:O> = <nat:24948> $ shows $ <var:s> = <nat:11> $ , $ <var:o> = <nat:9> $ , $ <var:O> = <nat:7> $ , $ <var:I> = <nat:12> $ , and $ <var:l> = <nat:3> $ . In addition note $ <nat:12> $ , $ <nat:11> $ , $ <nat:9> $ , $ <nat:7> $ , $ <nat:3> \geq <nat:2> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:five-composite> ( <var:n> : nat ) := exists <var:O> <var:l> <var:I> <var:o> <var:s> : nat , ( <var:s> >= <nat:2> ) /\ ( <var:o> >= <nat:2> ) /\ ( <var:O> >= <nat:2> ) /\ ( <var:l> >= <nat:2> ) /\ ( <var:I> >= <nat:2> ) /\ ( <var:n> = <var:O> * <var:s> * <var:l> * <var:o> * <var:I> ) . Theorem <genP:1> : <def:five-composite> <nat:24948> . Proof . unfold <def:five-composite> . exists <nat:7> . exists <nat:3> . exists <nat:12> . exists <nat:9> . exists <nat:11> . assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 