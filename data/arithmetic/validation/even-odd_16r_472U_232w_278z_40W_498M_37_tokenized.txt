\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:w> <nat:232> + <var:M> <nat:498> + <nat:37> + <var:z> <nat:278> + <nat:472> <var:U> + <nat:16> <var:r> + <nat:40> <var:W> $ is odd . \end{theorem} \begin{proof} Take note the formula $ <var:r> <nat:16> + <nat:472> <var:U> + <nat:232> <var:w> + <var:z> <nat:278> + <var:W> <nat:40> + <var:M> <nat:498> $ is known as even . We know that the terms $ <nat:40> \cdot <var:W> $ , $ <var:z> \cdot <nat:278> $ , $ <nat:498> \cdot <var:M> $ , $ <nat:232> \cdot <var:w> $ , and likewise $ <nat:472> \cdot <var:U> $ are trivially even . Further , observe that $ <var:r> \cdot <nat:16> $ is guaranteed to be an even element of $ \mathbb{N} $ . Recall that $ <nat:37> $ is known as an odd element of $ \mathbb{N} $ . It can be verified that this lemma holds . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:w> <var:M> <var:z> <var:U> <var:r> <var:W> : nat , Nat . odd ( <nat:232> * <var:w> + <nat:498> * <var:M> + <nat:278> * <var:z> + <nat:472> * <var:U> + <nat:16> * <var:r> + <nat:40> * <var:W> + <nat:37> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:40> * <var:W> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:278> * <var:z> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:498> * <var:M> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:232> * <var:w> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:472> * <var:U> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:16> * <var:r> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:232> * <var:w> + <nat:498> * <var:M> + <nat:278> * <var:z> + <nat:472> * <var:U> + <nat:16> * <var:r> + <nat:40> * <var:W> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:37> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 