\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Assume $ <var:H> $ , $ <var:m> $ , $ <var:R> $ , $ <var:F> $ , $ <var:Y> $ , $ <var:X> $ , $ <var:G> $ , $ <var:u> $ , $ <var:O> $ are positive integers . We assume that $ <var:x> \in \mathbb{Z}^+ $ is considered to be a <def:nine-composite> natural number assuming $ <var:u> * <var:X> * <var:G> * <var:Y> * <var:O> * <var:H> * <var:F> * <var:R> * <var:m> = <var:x> $ and such that $ <var:F> $ , $ <var:R> $ , $ <var:m> $ , $ <var:X> $ , $ <var:Y> $ , $ <var:G> $ , $ <var:O> $ , $ <var:u> $ and $ <var:H> \geq <nat:2> $ . \end{definition} \begin{theorem} $ <nat:19958400> = <var:x> $ is a <def:nine-composite> natural number . \end{theorem} \begin{proof} Allow $ <var:Y> = <nat:3> $ , $ <var:m> = <nat:7> $ , $ <var:F> = <nat:9> $ , $ <var:G> = <nat:10> $ , $ <var:R> = <nat:5> $ , $ <var:X> = <nat:4> $ , $ <var:H> = <nat:8> $ , $ <var:O> = <nat:6> $ , $ <var:u> = <nat:11> $ . We justify $ <var:F> \times <var:u> \times <var:O> \times <var:G> \times <var:R> \times <var:X> \times <var:H> \times <var:Y> \times <var:m> = <nat:19958400> $ . What's more notice that $ <nat:6> $ , $ <nat:10> $ , $ <nat:8> $ , $ <nat:11> $ , $ <nat:3> $ , $ <nat:4> $ , $ <nat:7> $ , $ <nat:5> $ and $ <nat:9> $ are larger than or equal to <nat:2> . This produces our belief is true . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:x> : nat ) := exists <var:H> <var:m> <var:R> <var:F> <var:Y> <var:X> <var:G> <var:u> <var:O> : nat , ( <var:u> * <var:X> * <var:G> * <var:Y> * <var:O> * <var:H> * <var:F> * <var:R> * <var:m> = <var:x> ) /\ ( <var:F> >= <nat:2> ) /\ ( <var:R> >= <nat:2> ) /\ ( <var:m> >= <nat:2> ) /\ ( <var:X> >= <nat:2> ) /\ ( <var:Y> >= <nat:2> ) /\ ( <var:G> >= <nat:2> ) /\ ( <var:O> >= <nat:2> ) /\ ( <var:u> >= <nat:2> ) /\ ( <var:H> >= <nat:2> ) . Theorem <genP:1> : <def:nine-composite> <nat:19958400> . Proof . unfold <def:nine-composite> . exists <nat:8> . exists <nat:7> . exists <nat:5> . exists <nat:9> . exists <nat:3> . exists <nat:4> . exists <nat:10> . exists <nat:11> . exists <nat:6> . assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 