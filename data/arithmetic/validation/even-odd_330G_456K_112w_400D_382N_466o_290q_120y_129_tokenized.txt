\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:290> * <var:q> + <nat:330> * <var:G> + <var:y> * <nat:120> + <var:N> * <nat:382> + <var:K> * <nat:456> + <nat:112> * <var:w> + <var:o> * <nat:466> + <nat:129> + <nat:400> * <var:D> $ will be odd . \end{theorem} \begin{proof} We know that the sum $ <var:G> \times <nat:330> + <nat:290> \times <var:q> + <nat:400> \times <var:D> + <nat:456> \times <var:K> + <var:y> \times <nat:120> + <nat:129> + <var:o> \times <nat:466> + <var:w> \times <nat:112> + <var:N> \times <nat:382> $ is odd because the formula $ <var:G> \times <nat:330> + <nat:456> \times <var:K> + <var:w> \times <nat:112> + <var:D> \times <nat:400> + <nat:382> \times <var:N> + <nat:466> \times <var:o> + <nat:290> \times <var:q> + <var:y> \times <nat:120> $ is known to be even . We know the pairs $ <var:G> \cdot <nat:330> $ , $ <nat:456> \cdot <var:K> $ , $ <var:w> \cdot <nat:112> $ , $ <var:D> \cdot <nat:400> $ , $ <nat:382> \cdot <var:N> $ , $ <var:o> \cdot <nat:466> $ , $ <var:q> \cdot <nat:290> $ , and moreover $ <nat:120> \cdot <var:y> $ are guaranteed to be even . This claim must be true from the knowledge taking the product of an even natural number and an arbitrary element of $ \mathbb{N} $ must be an even natural number . This holds from the knowledge the natural numbers $ <nat:330> $ , $ <nat:456> $ , $ <nat:112> $ , $ <nat:400> $ , $ <nat:382> $ , $ <nat:466> $ , $ <nat:290> $ , additionally $ <nat:120> $ are guaranteed to be in themselves even elements of $ \mathbb{N} $ . From the knowledge the summation of an even number in $ \mathbb{Z}^+ $ with even numbers in $ \mathbb{N} $ will be even , and from the knowledge taking the product between even numbers in $ \mathbb{N} $ and some integer is guaranteed to be an even integer . Observe that the adding between even numbers successively and an odd natural will be trivially an odd whole number . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:q> <var:G> <var:y> <var:N> <var:K> <var:w> <var:o> <var:D> : nat , Nat . odd ( <nat:290> * <var:q> + <nat:330> * <var:G> + <nat:120> * <var:y> + <nat:382> * <var:N> + <nat:456> * <var:K> + <nat:112> * <var:w> + <nat:466> * <var:o> + <nat:400> * <var:D> + <nat:129> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:330> = true ) . { auto . } assert ( <genH> : Nat . even <nat:456> = true ) . { auto . } assert ( <genH> : Nat . even <nat:112> = true ) . { auto . } assert ( <genH> : Nat . even <nat:400> = true ) . { auto . } assert ( <genH> : Nat . even <nat:382> = true ) . { auto . } assert ( <genH> : Nat . even <nat:466> = true ) . { auto . } assert ( <genH> : Nat . even <nat:290> = true ) . { auto . } assert ( <genH> : Nat . even <nat:120> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:330> * <var:G> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:456> * <var:K> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:112> * <var:w> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:400> * <var:D> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:382> * <var:N> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:466> * <var:o> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:290> * <var:q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:120> * <var:y> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:290> * <var:q> + <nat:330> * <var:G> + <nat:120> * <var:y> + <nat:382> * <var:N> + <nat:456> * <var:K> + <nat:112> * <var:w> + <nat:466> * <var:o> + <nat:400> * <var:D> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 