\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:268> \times <var:f> + <var:W> \times <nat:70> + <nat:366> \times <var:N> + <var:L> \times <nat:232> + <nat:58> \times <var:R> + <nat:338> \times <var:u> + <var:z> \times <nat:340> + <nat:179> + <var:Q> \times <nat:430> $ will be odd taking any positive numbers $ <var:N> $ , $ <var:z> $ , $ <var:R> $ , $ <var:f> $ , $ <var:W> $ , $ <var:Q> $ , $ <var:u> $ , and $ <var:L> $ . \end{theorem} \begin{proof} This proposition must be true since $ <var:u> \times <nat:338> + <var:L> \times <nat:232> + <var:W> \times <nat:70> + <var:Q> \times <nat:430> + <nat:268> \times <var:f> + <nat:58> \times <var:R> + <nat:366> \times <var:N> + <var:z> \times <nat:340> $ is clearly even . The pairs $ <nat:338> \times <var:u> $ , $ <var:L> \times <nat:232> $ , $ <var:W> \times <nat:70> $ , $ <nat:430> \times <var:Q> $ , $ <var:f> \times <nat:268> $ , $ <var:R> \times <nat:58> $ , $ <var:N> \times <nat:366> $ , and moreover $ <nat:340> \times <var:z> $ are guaranteed to be even as a consequence that the integers $ <nat:338> $ , $ <nat:232> $ , $ <nat:70> $ , $ <nat:430> $ , $ <nat:268> $ , $ <nat:58> $ , $ <nat:366> $ , in addition to $ <nat:340> $ are guaranteed to be even elements of $ \mathbb{Z}^+ $ . As a consequence that multiplying between even naturals and an arbitrary positive integer must be an even integer the formula $ <var:Q> * <nat:430> + <nat:58> * <var:R> + <nat:338> * <var:u> + <var:L> * <nat:232> + <nat:340> * <var:z> + <var:N> * <nat:366> + <nat:268> * <var:f> + <nat:70> * <var:W> $ is guaranteed to be even . We demonstrate the sum $ <nat:232> * <var:L> + <var:z> * <nat:340> + <nat:366> * <var:N> + <nat:179> + <var:f> * <nat:268> + <nat:338> * <var:u> + <nat:70> * <var:W> + <var:Q> * <nat:430> + <nat:58> * <var:R> $ will be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:N> <var:z> <var:R> <var:f> <var:W> <var:Q> <var:u> <var:L> : nat , Nat . odd ( <nat:268> * <var:f> + <nat:70> * <var:W> + <nat:366> * <var:N> + <nat:232> * <var:L> + <nat:58> * <var:R> + <nat:338> * <var:u> + <nat:340> * <var:z> + <nat:430> * <var:Q> + <nat:179> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:338> = true ) . { auto . } assert ( <genH> : Nat . even <nat:232> = true ) . { auto . } assert ( <genH> : Nat . even <nat:70> = true ) . { auto . } assert ( <genH> : Nat . even <nat:430> = true ) . { auto . } assert ( <genH> : Nat . even <nat:268> = true ) . { auto . } assert ( <genH> : Nat . even <nat:58> = true ) . { auto . } assert ( <genH> : Nat . even <nat:366> = true ) . { auto . } assert ( <genH> : Nat . even <nat:340> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:338> * <var:u> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:232> * <var:L> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:70> * <var:W> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:430> * <var:Q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:268> * <var:f> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:58> * <var:R> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:366> * <var:N> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:340> * <var:z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:268> * <var:f> + <nat:70> * <var:W> + <nat:366> * <var:N> + <nat:232> * <var:L> + <nat:58> * <var:R> + <nat:338> * <var:u> + <nat:340> * <var:z> + <nat:430> * <var:Q> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 