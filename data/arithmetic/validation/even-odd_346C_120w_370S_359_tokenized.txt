\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Given some positive numbers $ <var:C> $ , $ <var:S> $ , and $ <var:w> $ $ <nat:120> <var:w> + <nat:370> <var:S> + <nat:359> + <nat:346> <var:C> $ is odd . \end{theorem} \begin{proof} Take note that the formula $ <var:w> * <nat:120> + <var:S> * <nat:370> + <nat:359> + <var:C> * <nat:346> $ is known to be odd as a consequence that the sum $ <var:C> \times <nat:346> + <var:w> \times <nat:120> + <var:S> \times <nat:370> $ is trivially even . Remember $ <nat:120> \times <var:w> $ is guaranteed to be even . This claim is proven as a consequence that taking the product of an even number in $ \mathbb{Z}^+ $ with a positive integer must be even . In addition to this , $ <nat:346> \times <var:C> $ is obviously an even positive integer . Likewise , take note the term $ <nat:370> \times <var:S> $ is known to be even . This fact is proven by reason that the product of an even natural number with any integer is even . From the knowledge taking the product between an even natural number and some number in $ \mathbb{N} $ is guaranteed to be even this lemma must be true . Observe $ <nat:359> $ is known as an odd positive integer . Take note the summing of an even number and an odd element of $ \mathbb{N} $ must be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:C> <var:S> <var:w> : nat , Nat . odd ( <nat:120> * <var:w> + <nat:370> * <var:S> + <nat:346> * <var:C> + <nat:359> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:120> * <var:w> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:346> * <var:C> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:370> * <var:S> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:120> * <var:w> + <nat:370> * <var:S> + <nat:346> * <var:C> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:359> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 