\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:q> \cdot <nat:2> + <var:I> \cdot <nat:192> + <var:x> \cdot <nat:130> + <nat:463> + <var:v> \cdot <nat:390> + <var:z> \cdot <nat:374> + <nat:40> \cdot <var:n> + <var:g> \cdot <nat:348> $ is guaranteed to be odd . \end{theorem} \begin{proof} Observe $ <nat:463> $ is clearly an odd number . Since the summing between an even number in $ \mathbb{N} $ and an odd number is odd , thus the proposition holds . Notice the formula $ <var:n> * <nat:40> + <nat:192> * <var:I> + <var:g> * <nat:348> + <nat:463> + <var:v> * <nat:390> + <var:q> * <nat:2> + <nat:130> * <var:x> + <var:z> * <nat:374> $ is known as odd from the fact the formula $ <var:z> * <nat:374> + <var:g> * <nat:348> + <var:v> * <nat:390> + <var:n> * <nat:40> + <nat:192> * <var:I> + <var:x> * <nat:130> + <var:q> * <nat:2> $ is clearly even . The terms $ <nat:374> \cdot <var:z> $ , $ <var:g> \cdot <nat:348> $ , and likewise $ <var:q> \cdot <nat:2> $ will be even . Adding on , take note the products $ <nat:130> \cdot <var:x> $ , $ <nat:390> \cdot <var:v> $ , and $ <nat:192> \cdot <var:I> $ are even positive integers since the product between an even positive integer with a natural number is in itself an even integer . Observe that $ <var:n> \cdot <nat:40> $ is even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:q> <var:I> <var:x> <var:v> <var:z> <var:n> <var:g> : nat , Nat . odd ( <nat:2> * <var:q> + <nat:192> * <var:I> + <nat:130> * <var:x> + <nat:390> * <var:v> + <nat:374> * <var:z> + <nat:40> * <var:n> + <nat:348> * <var:g> + <nat:463> ) = true . Proof . intros . assert ( <genH> : Nat . odd <nat:463> = true ) . { auto . } rewrite Nat . odd_add . assert ( <genH> : Nat . even ( <nat:374> * <var:z> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:348> * <var:g> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:2> * <var:q> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:130> * <var:x> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:390> * <var:v> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:192> * <var:I> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:40> * <var:n> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:2> * <var:q> + <nat:192> * <var:I> + <nat:130> * <var:x> + <nat:390> * <var:v> + <nat:374> * <var:z> + <nat:40> * <var:n> + <nat:348> * <var:g> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 