\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:s> * <nat:48> + <nat:250> * <var:D> + <var:N> * <nat:466> + <nat:169> + <var:U> * <nat:420> + <var:O> * <nat:296> + <var:l> * <nat:96> + <var:c> * <nat:238> $ is odd . \end{theorem} \begin{proof} The pairs $ <var:N> <nat:466> $ , $ <var:U> <nat:420> $ , in addition to $ <var:c> <nat:238> $ must be even whole numbers . Likewise , notice that the pair $ <nat:48> <var:s> $ is clearly an even element of $ \mathbb{N} $ . Likewise , $ <nat:96> <var:l> $ is guaranteed to be an even integer because taking the product of an even natural number with any positive integer is guaranteed to be an even element of $ \mathbb{Z}^+ $ . We know that the product $ <var:O> <nat:296> $ is known as an even number in $ \mathbb{N} $ since the product of an even positive integer and some positive integer will be even . $ <var:D> <nat:250> $ is known to be even . We prove this claim is proven . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:s> <var:D> <var:N> <var:U> <var:O> <var:l> <var:c> : nat , Nat . odd ( <nat:48> * <var:s> + <nat:250> * <var:D> + <nat:466> * <var:N> + <nat:420> * <var:U> + <nat:296> * <var:O> + <nat:96> * <var:l> + <nat:238> * <var:c> + <nat:169> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:466> * <var:N> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:420> * <var:U> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:238> * <var:c> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:48> * <var:s> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:96> * <var:l> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:296> * <var:O> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:250> * <var:D> ) = true ) . { rewrite Nat . even_mul . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 