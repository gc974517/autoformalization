\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:D> \times <nat:4> + <var:U> \times <nat:74> + <nat:422> \times <var:E> + <nat:295> + <nat:350> \times <var:h> + <nat:248> \times <var:t> + <var:g> \times <nat:28> $ must be odd taking every $ <var:t> $ , $ <var:g> $ , $ <var:h> $ , $ <var:D> $ , $ <var:E> $ , and $ <var:U> $ . \end{theorem} \begin{proof} We know that the summation $ <nat:4> <var:D> + <nat:350> <var:h> + <nat:422> <var:E> + <var:g> <nat:28> + <nat:248> <var:t> + <nat:295> + <nat:74> <var:U> $ is trivially odd from the fact the sum $ <nat:28> <var:g> + <nat:350> <var:h> + <var:U> <nat:74> + <var:E> <nat:422> + <var:t> <nat:248> + <nat:4> <var:D> $ is trivially even , since the summing between an even natural number with an even integer will be an even positive integer . Notice the integers $ <nat:74> $ , $ <nat:350> $ , $ <nat:28> $ , as well as $ <nat:422> $ must be even Observe that the positive integer $ <nat:248> $ is clearly an even element of $ \mathbb{Z}^+ $ The whole number $ <nat:4> $ is trivially an even integer \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:t> <var:g> <var:h> <var:D> <var:E> <var:U> : nat , Nat . odd ( <nat:4> * <var:D> + <nat:74> * <var:U> + <nat:422> * <var:E> + <nat:350> * <var:h> + <nat:248> * <var:t> + <nat:28> * <var:g> + <nat:295> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:74> = true ) . { auto . } assert ( <genH> : Nat . even <nat:350> = true ) . { auto . } assert ( <genH> : Nat . even <nat:28> = true ) . { auto . } assert ( <genH> : Nat . even <nat:422> = true ) . { auto . } assert ( <genH> : Nat . even <nat:248> = true ) . { auto . } assert ( <genH> : Nat . even <nat:4> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:4> * <var:D> + <nat:74> * <var:U> + <nat:422> * <var:E> + <nat:350> * <var:h> + <nat:248> * <var:t> + <nat:28> * <var:g> ) = true ) . { repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 