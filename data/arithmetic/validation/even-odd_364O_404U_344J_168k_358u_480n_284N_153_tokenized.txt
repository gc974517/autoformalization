\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Given every variables $ <var:k> $ , $ <var:u> $ , $ <var:n> $ , $ <var:N> $ , $ <var:J> $ , $ <var:O> $ , and $ <var:U> $ the formula $ <nat:168> * <var:k> + <nat:153> + <var:u> * <nat:358> + <nat:284> * <var:N> + <var:U> * <nat:404> + <nat:344> * <var:J> + <var:n> * <nat:480> + <var:O> * <nat:364> $ will be odd . \end{theorem} \begin{proof} The leading term $ <nat:364> $ is trivially even . Accordingly , the term $ <var:O> * <nat:364> $ will be even too . Take note the positive integer $ <nat:404> $ is clearly even . For this reason , the term $ <var:U> * <nat:404> $ will be even additionally . We know the leading term $ <nat:344> $ is even . Thus , the pair $ <var:J> * <nat:344> $ is guaranteed to be even additionally . Further , the whole number $ <nat:168> $ is even . For this reason , the product $ <var:k> * <nat:168> $ must be even too . Likewise , the pair $ <nat:358> * <var:u> $ is known as an even natural . This claim is proven since multiplying between an even number with some number in $ \mathbb{Z}^+ $ is an even number and likewise the leading term $ <nat:358> $ is trivially by itself an even natural number . See that the integer $ <nat:480> $ is trivially an even integer . For this reason , the term $ <var:n> * <nat:480> $ must be even also . We know the integer $ <nat:284> $ is guaranteed to be even . As a consequence , the term $ <nat:284> * <var:N> $ is guaranteed to be even also . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:k> <var:u> <var:n> <var:N> <var:J> <var:O> <var:U> : nat , Nat . odd ( <nat:168> * <var:k> + <nat:358> * <var:u> + <nat:284> * <var:N> + <nat:404> * <var:U> + <nat:344> * <var:J> + <nat:480> * <var:n> + <nat:364> * <var:O> + <nat:153> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:364> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:364> * <var:O> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:404> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:404> * <var:U> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:344> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:344> * <var:J> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:168> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:168> * <var:k> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:358> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:358> * <var:u> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:480> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:480> * <var:n> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:284> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:284> * <var:N> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 