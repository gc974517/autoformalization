\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:450> \times <var:G> + <nat:469> + <var:S> \times <nat:116> + <nat:182> \times <var:c> + <var:h> \times <nat:406> + <nat:474> \times <var:H> + <nat:384> \times <var:n> $ must be odd . \end{theorem} \begin{proof} Remember $ <nat:469> $ is guaranteed to be odd . It can be demonstrated that this theorem is proven . We make use the understanding the sum $ <nat:474> <var:H> + <var:G> <nat:450> + <var:n> <nat:384> + <var:h> <nat:406> + <nat:116> <var:S> + <nat:182> <var:c> $ is obviously even . The terms $ <nat:474> \cdot <var:H> $ , $ <var:G> \cdot <nat:450> $ , $ <var:n> \cdot <nat:384> $ , $ <nat:406> \cdot <var:h> $ , $ <nat:116> \cdot <var:S> $ , and also $ <var:c> \cdot <nat:182> $ are trivially even numbers in $ \mathbb{N} $ as a consequence that the integers $ <nat:474> $ , $ <nat:450> $ , $ <nat:384> $ , $ <nat:406> $ , $ <nat:116> $ , and also $ <nat:182> $ are guaranteed to be even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:G> <var:S> <var:c> <var:h> <var:H> <var:n> : nat , Nat . odd ( <nat:450> * <var:G> + <nat:116> * <var:S> + <nat:182> * <var:c> + <nat:406> * <var:h> + <nat:474> * <var:H> + <nat:384> * <var:n> + <nat:469> ) = true . Proof . intros . assert ( <genH> : Nat . odd <nat:469> = true ) . { auto . } assert ( <genH> : Nat . even <nat:474> = true ) . { auto . } assert ( <genH> : Nat . even <nat:450> = true ) . { auto . } assert ( <genH> : Nat . even <nat:384> = true ) . { auto . } assert ( <genH> : Nat . even <nat:406> = true ) . { auto . } assert ( <genH> : Nat . even <nat:116> = true ) . { auto . } assert ( <genH> : Nat . even <nat:182> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:474> * <var:H> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:450> * <var:G> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:384> * <var:n> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:406> * <var:h> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:116> * <var:S> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:182> * <var:c> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:450> * <var:G> + <nat:116> * <var:S> + <nat:182> * <var:c> + <nat:406> * <var:h> + <nat:474> * <var:H> + <nat:384> * <var:n> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 