\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:r> * <nat:312> + <var:d> * <nat:166> + <var:S> * <nat:66> + <nat:40> * <var:w> + <var:I> * <nat:330> + <nat:206> * <var:f> + <nat:101> $ is guaranteed to be odd . \end{theorem} \begin{proof} See the addition of an even number and an odd number is by definition an odd element of $ \mathbb{N} $ . Notice $ <nat:101> $ is trivially odd . We verify that the sum $ <nat:101> + <nat:312> * <var:r> + <nat:166> * <var:d> + <var:w> * <nat:40> + <nat:206> * <var:f> + <var:I> * <nat:330> + <nat:66> * <var:S> $ is trivially odd from the fact $ <nat:312> \cdot <var:r> + <nat:66> \cdot <var:S> + <nat:206> \cdot <var:f> + <var:d> \cdot <nat:166> + <var:w> \cdot <nat:40> + <var:I> \cdot <nat:330> $ is known as even . What's more , remember the leading terms $ <nat:312> $ , $ <nat:66> $ , $ <nat:206> $ , $ <nat:166> $ , $ <nat:40> $ , and also $ <nat:330> $ are trivially even elements of $ \mathbb{N} $ . Therefore , the products $ <var:r> \cdot <nat:312> $ , $ <var:S> \cdot <nat:66> $ , $ <nat:206> \cdot <var:f> $ , $ <var:d> \cdot <nat:166> $ , $ <nat:40> \cdot <var:w> $ , plus $ <nat:330> \cdot <var:I> $ is guaranteed to be even too . Since the totaling between an even integer and an even natural number must be even , $ <var:f> \cdot <nat:206> + <var:w> \cdot <nat:40> + <var:I> \cdot <nat:330> + <var:S> \cdot <nat:66> + <nat:166> \cdot <var:d> + <nat:312> \cdot <var:r> $ is guaranteed to be even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:r> <var:d> <var:S> <var:w> <var:I> <var:f> : nat , Nat . odd ( <nat:312> * <var:r> + <nat:166> * <var:d> + <nat:66> * <var:S> + <nat:40> * <var:w> + <nat:330> * <var:I> + <nat:206> * <var:f> + <nat:101> ) = true . Proof . intros . rewrite Nat . odd_add . assert ( <genH> : Nat . odd <nat:101> = true ) . { auto . } assert ( <genH> : Nat . even <nat:312> = true ) . { auto . } assert ( <genH> : Nat . even <nat:66> = true ) . { auto . } assert ( <genH> : Nat . even <nat:206> = true ) . { auto . } assert ( <genH> : Nat . even <nat:166> = true ) . { auto . } assert ( <genH> : Nat . even <nat:40> = true ) . { auto . } assert ( <genH> : Nat . even <nat:330> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:312> * <var:r> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:66> * <var:S> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:206> * <var:f> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:166> * <var:d> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:40> * <var:w> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:330> * <var:I> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:312> * <var:r> + <nat:166> * <var:d> + <nat:66> * <var:S> + <nat:40> * <var:w> + <nat:330> * <var:I> + <nat:206> * <var:f> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 