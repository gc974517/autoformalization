\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:472> <var:f> + <nat:8> <var:I> + <nat:14> <var:m> + <nat:309> + <var:T> <nat:236> + <nat:492> <var:F> + <nat:256> <var:R> + <nat:68> <var:G> + <nat:198> <var:v> $ will be odd . \end{theorem} \begin{proof} Remember that the pairs $ <var:m> * <nat:14> $ , $ <nat:198> * <var:v> $ , $ <nat:236> * <var:T> $ , plus $ <var:f> * <nat:472> $ will be even positive integers . This is true from the knowledge the product of an even positive integer and any number will be fundamentally an even integer . Likewise , the pairs $ <nat:256> * <var:R> $ as well as $ <nat:8> * <var:I> $ are clearly even . This fact holds because the product of an even whole number with a natural is guaranteed to be even . In addition , $ <var:F> * <nat:492> $ is known to be even . Furthermore , $ <var:G> * <nat:68> $ is known as an even integer . Take note $ <nat:309> $ is an odd element of $ \mathbb{N} $ . From the knowledge the summing of even elements of $ \mathbb{N} $ collectively with an odd element of $ \mathbb{N} $ is guaranteed to be odd , our claim must be true . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:f> <var:I> <var:m> <var:T> <var:F> <var:R> <var:G> <var:v> : nat , Nat . odd ( <nat:472> * <var:f> + <nat:8> * <var:I> + <nat:14> * <var:m> + <nat:236> * <var:T> + <nat:492> * <var:F> + <nat:256> * <var:R> + <nat:68> * <var:G> + <nat:198> * <var:v> + <nat:309> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:14> * <var:m> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:198> * <var:v> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:236> * <var:T> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:472> * <var:f> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:256> * <var:R> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:8> * <var:I> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:492> * <var:F> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:68> * <var:G> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . odd <nat:309> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 