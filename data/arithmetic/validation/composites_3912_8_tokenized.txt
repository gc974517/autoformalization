\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Let that $ <var:l> $ is <def:eight-composite> only if using some positive integers $ <var:M> $ , $ <var:G> $ , $ <var:F> $ , $ <var:R> $ , $ <var:B> $ , $ <var:j> $ , $ <var:U> $ , $ <var:X> $ we get so that $ <var:R> $ , $ <var:X> $ , $ <var:G> $ , $ <var:M> $ , $ <var:j> $ , $ <var:U> $ , $ <var:F> $ , and $ <var:B> > <nat:1> $ and taking $ <var:l> \in \mathbb{N} $ , $ <var:j> \cdot <var:G> \cdot <var:X> \cdot <var:F> \cdot <var:U> \cdot <var:M> \cdot <var:R> \cdot <var:B> = <var:l> $ . For this reason the positive integer <nat:3326400> is a <def:eight-composite> number . \end{theorem} \begin{proof} Notice that $ <nat:3326400> = <var:R> \times <var:U> \times <var:j> \times <var:F> \times <var:M> \times <var:G> \times <var:B> \times <var:X> $ yields $ <var:F> = <nat:7> $ , $ <var:R> = <nat:10> $ , $ <var:G> = <nat:11> $ , $ <var:j> = <nat:4> $ , $ <var:M> = <nat:9> $ , $ <var:U> = <nat:3> $ , $ <var:B> = <nat:5> $ , $ <var:X> = <nat:8> $ . Additionally note $ <nat:8> $ , $ <nat:4> $ , $ <nat:9> $ , $ <nat:10> $ , $ <nat:3> $ , $ <nat:5> $ , $ <nat:7> $ and $ <nat:11> $ are greater than <nat:1> . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:eight-composite> ( <var:l> : nat ) := exists <var:M> <var:G> <var:F> <var:R> <var:B> <var:j> <var:U> <var:X> : nat , ( <var:R> > <nat:1> ) /\ ( <var:X> > <nat:1> ) /\ ( <var:G> > <nat:1> ) /\ ( <var:M> > <nat:1> ) /\ ( <var:j> > <nat:1> ) /\ ( <var:U> > <nat:1> ) /\ ( <var:F> > <nat:1> ) /\ ( <var:B> > <nat:1> ) /\ ( <var:j> * <var:G> * <var:X> * <var:F> * <var:U> * <var:M> * <var:R> * <var:B> = <var:l> ) . Theorem <genP:1> : <def:eight-composite> <nat:3326400> . Proof . unfold <def:eight-composite> . exists <nat:9> . exists <nat:11> . exists <nat:7> . exists <nat:10> . exists <nat:5> . exists <nat:4> . exists <nat:3> . exists <nat:8> . assert ( <genH> : <nat:8> > <nat:1> ) . { lia . } assert ( <genH> : <nat:4> > <nat:1> ) . { lia . } assert ( <genH> : <nat:9> > <nat:1> ) . { lia . } assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } assert ( <genH> : <nat:3> > <nat:1> ) . { lia . } assert ( <genH> : <nat:5> > <nat:1> ) . { lia . } assert ( <genH> : <nat:7> > <nat:1> ) . { lia . } assert ( <genH> : <nat:11> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 