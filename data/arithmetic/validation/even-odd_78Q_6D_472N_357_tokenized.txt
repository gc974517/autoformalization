\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Given every variables $ <var:Q> $ , $ <var:N> $ , and $ <var:D> $ the formula $ <var:Q> \times <nat:78> + <nat:357> + <var:D> \times <nat:6> + <nat:472> \times <var:N> $ must be odd . \end{theorem} \begin{proof} We apply the knowledge the formula $ <nat:357> + <nat:78> <var:Q> + <nat:6> <var:D> + <nat:472> <var:N> $ is guaranteed to be odd as a consequence that the formula $ <var:Q> \cdot <nat:78> + <nat:472> \cdot <var:N> + <nat:6> \cdot <var:D> $ is obviously even . What's more , we know that the natural numbers $ <nat:78> $ , $ <nat:472> $ , plus $ <nat:6> $ are trivially even . In consequence , the products $ <nat:78> * <var:Q> $ , $ <var:N> * <nat:472> $ , additionally $ <var:D> * <nat:6> $ will be even too . From the knowledge the addition between an even number with an even integer is an even number , the summation $ <var:Q> \times <nat:78> + <var:D> \times <nat:6> + <var:N> \times <nat:472> $ is guaranteed to be by its very nature even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:Q> <var:N> <var:D> : nat , Nat . odd ( <nat:78> * <var:Q> + <nat:6> * <var:D> + <nat:472> * <var:N> + <nat:357> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:78> = true ) . { auto . } assert ( <genH> : Nat . even <nat:472> = true ) . { auto . } assert ( <genH> : Nat . even <nat:6> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:78> * <var:Q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:472> * <var:N> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:6> * <var:D> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:78> * <var:Q> + <nat:6> * <var:D> + <nat:472> * <var:N> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 