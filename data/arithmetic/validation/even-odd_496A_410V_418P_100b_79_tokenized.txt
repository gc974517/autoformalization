\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Given some whole numbers $ <var:P> $ , $ <var:V> $ , $ <var:b> $ , and $ <var:A> $ the formula $ <nat:410> \times <var:V> + <var:P> \times <nat:418> + <var:b> \times <nat:100> + <var:A> \times <nat:496> + <nat:79> $ must be odd . \end{theorem} \begin{proof} Observe $ <nat:79> $ is known as odd . It can be shown that $ <nat:496> \times <var:A> + <nat:410> \times <var:V> + <var:P> \times <nat:418> + <var:b> \times <nat:100> + <nat:79> $ is guaranteed to be odd . Likewise , the products $ <nat:496> * <var:A> $ , $ <nat:410> * <var:V> $ , $ <nat:418> * <var:P> $ , $ <nat:100> * <var:b> $ , are known as even . This must be true from the fact taking the product of an even positive integer with some number in $ \mathbb{N} $ is an even whole number . This fact must be true from the knowledge the natural numbers $ <nat:496> $ , $ <nat:410> $ , $ <nat:418> $ , $ <nat:100> $ , are trivially even numbers in $ \mathbb{N} $ . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:P> <var:V> <var:b> <var:A> : nat , Nat . odd ( <nat:410> * <var:V> + <nat:418> * <var:P> + <nat:100> * <var:b> + <nat:496> * <var:A> + <nat:79> ) = true . Proof . intros . assert ( <genH> : Nat . odd <nat:79> = true ) . { auto . } assert ( <genH> : Nat . even <nat:496> = true ) . { auto . } assert ( <genH> : Nat . even <nat:410> = true ) . { auto . } assert ( <genH> : Nat . even <nat:418> = true ) . { auto . } assert ( <genH> : Nat . even <nat:100> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:496> * <var:A> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:410> * <var:V> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:418> * <var:P> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:100> * <var:b> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 