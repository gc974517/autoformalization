\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:474> * <var:N> + <nat:5> + <nat:434> * <var:F> + <nat:192> * <var:Z> + <var:a> * <nat:110> + <nat:138> * <var:v> + <nat:488> * <var:T> + <var:p> * <nat:392> $ will be odd . \end{theorem} \begin{proof} It can be justified that the claim is true . See that $ <nat:5> $ is known as an odd number . In addition to this , the pairs $ <var:N> \cdot <nat:474> $ , $ <var:F> \cdot <nat:434> $ , $ <nat:192> \cdot <var:Z> $ , $ <var:a> \cdot <nat:110> $ , $ <nat:138> \cdot <var:v> $ , $ <nat:488> \cdot <var:T> $ , additionally $ <nat:392> \cdot <var:p> $ are guaranteed to be even . This fact is true from the fact the positive integers $ <nat:474> $ , $ <nat:434> $ , $ <nat:192> $ , $ <nat:110> $ , $ <nat:138> $ , $ <nat:488> $ , in addition to $ <nat:392> $ are known as even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:N> <var:F> <var:Z> <var:a> <var:v> <var:T> <var:p> : nat , Nat . odd ( <nat:474> * <var:N> + <nat:434> * <var:F> + <nat:192> * <var:Z> + <nat:110> * <var:a> + <nat:138> * <var:v> + <nat:488> * <var:T> + <nat:392> * <var:p> + <nat:5> ) = true . Proof . intros . assert ( <genH> : Nat . odd <nat:5> = true ) . { auto . } assert ( <genH> : Nat . even <nat:474> = true ) . { auto . } assert ( <genH> : Nat . even <nat:434> = true ) . { auto . } assert ( <genH> : Nat . even <nat:192> = true ) . { auto . } assert ( <genH> : Nat . even <nat:110> = true ) . { auto . } assert ( <genH> : Nat . even <nat:138> = true ) . { auto . } assert ( <genH> : Nat . even <nat:488> = true ) . { auto . } assert ( <genH> : Nat . even <nat:392> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:474> * <var:N> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:434> * <var:F> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:192> * <var:Z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:110> * <var:a> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:138> * <var:v> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:488> * <var:T> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:392> * <var:p> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 