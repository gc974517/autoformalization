\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} With natural terms $ <var:w> $ , $ <var:R> $ , $ <var:a> $ , and $ <var:F> $ the expression $ <nat:260> <var:a> + <var:F> <nat:280> + <var:R> <nat:326> + <nat:237> + <var:w> <nat:10> $ will be odd . \end{theorem} \begin{proof} We apply the formula $ <var:R> <nat:326> + <nat:280> <var:F> + <var:w> <nat:10> + <nat:260> <var:a> + <nat:237> $ is known to be odd from the knowledge the sum $ <nat:260> \times <var:a> + <var:w> \times <nat:10> + <var:R> \times <nat:326> + <var:F> \times <nat:280> $ is obviously even , from the fact the summing between even numbers concurrently and an even natural number will be an even element of $ \mathbb{N} $ . The products $ <nat:326> <var:R> $ , $ <var:F> <nat:280> $ , and also $ <var:a> <nat:260> $ are even integers . This claim is proven from the knowledge multiplying between an even whole number with an arbitrary integer is guaranteed to be an even element of $ \mathbb{N} $ . The product $ <var:w> <nat:10> $ is an even positive integer . It can be checked that our main result is proven . We know that $ <nat:237> $ is known to be an odd whole number . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:w> <var:R> <var:a> <var:F> : nat , Nat . odd ( <nat:260> * <var:a> + <nat:280> * <var:F> + <nat:326> * <var:R> + <nat:10> * <var:w> + <nat:237> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:326> * <var:R> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:280> * <var:F> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:260> * <var:a> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:10> * <var:w> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:260> * <var:a> + <nat:280> * <var:F> + <nat:326> * <var:R> + <nat:10> * <var:w> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:237> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 