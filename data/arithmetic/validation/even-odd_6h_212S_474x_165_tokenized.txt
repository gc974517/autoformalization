\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:165> + <var:h> \cdot <nat:6> + <nat:474> \cdot <var:x> + <var:S> \cdot <nat:212> $ is odd . \end{theorem} \begin{proof} We know that $ <nat:165> $ is known as an odd number . It can be demonstrated that this proposition is true . It can be verified that the expression $ <nat:474> \times <var:x> + <nat:165> + <var:h> \times <nat:6> + <var:S> \times <nat:212> $ is odd since the sum $ <var:x> * <nat:474> + <nat:212> * <var:S> + <var:h> * <nat:6> $ is known to be even . In addition to this , the integers $ <nat:474> $ , $ <nat:212> $ , and $ <nat:6> $ must be even . As a consequence , the products $ <var:x> * <nat:474> $ , $ <var:S> * <nat:212> $ , and likewise $ <nat:6> * <var:h> $ is guaranteed to be even additionally . Because the product of even positive integers and any natural must be an even element of $ \mathbb{Z}^+ $ $ <nat:6> \times <var:h> + <nat:212> \times <var:S> + <nat:474> \times <var:x> $ must be clearly even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:h> <var:x> <var:S> : nat , Nat . odd ( <nat:6> * <var:h> + <nat:474> * <var:x> + <nat:212> * <var:S> + <nat:165> ) = true . Proof . intros . assert ( <genH> : Nat . odd <nat:165> = true ) . { auto . } assert ( <genH> : Nat . even <nat:474> = true ) . { auto . } assert ( <genH> : Nat . even <nat:212> = true ) . { auto . } assert ( <genH> : Nat . even <nat:6> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:474> * <var:x> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:212> * <var:S> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:6> * <var:h> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:6> * <var:h> + <nat:474> * <var:x> + <nat:212> * <var:S> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 