\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:z> \cdot <nat:326> + <nat:96> \cdot <var:Q> + <var:R> \cdot <nat:276> + <var:h> \cdot <nat:126> + <var:T> \cdot <nat:142> + <var:M> \cdot <nat:304> + <nat:297> + <nat:270> \cdot <var:f> + <var:Y> \cdot <nat:32> $ must be odd taking any unknowns $ <var:M> $ , $ <var:h> $ , $ <var:f> $ , $ <var:Y> $ , $ <var:T> $ , $ <var:Q> $ , $ <var:R> $ , and $ <var:z> $ . \end{theorem} \begin{proof} The products $ <var:Y> <nat:32> $ , $ <var:Q> <nat:96> $ , $ <nat:270> <var:f> $ , $ <nat:304> <var:M> $ , $ <nat:126> <var:h> $ , as well as $ <var:R> <nat:276> $ will be even numbers in $ \mathbb{N} $ . This claim holds from the fact taking the product between an even number in $ \mathbb{N} $ and any natural number is an even number in $ \mathbb{Z}^+ $ . Building on , take note the product $ <var:T> <nat:142> $ is obviously even . What's more , remember that the pair $ <var:z> <nat:326> $ is clearly even . This must be true because taking the product between an even natural and an arbitrary integer is an even natural number . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:M> <var:h> <var:f> <var:Y> <var:T> <var:Q> <var:R> <var:z> : nat , Nat . odd ( <nat:326> * <var:z> + <nat:96> * <var:Q> + <nat:276> * <var:R> + <nat:126> * <var:h> + <nat:142> * <var:T> + <nat:304> * <var:M> + <nat:270> * <var:f> + <nat:32> * <var:Y> + <nat:297> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:32> * <var:Y> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:96> * <var:Q> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:270> * <var:f> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:304> * <var:M> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:126> * <var:h> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:276> * <var:R> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:142> * <var:T> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:326> * <var:z> ) = true ) . { rewrite Nat . even_mul . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 