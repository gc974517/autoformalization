\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:246> \times <var:z> + <nat:350> \times <var:C> + <nat:134> \times <var:d> + <nat:334> \times <var:w> + <var:y> \times <nat:478> + <var:X> \times <nat:452> + <nat:33> $ will be odd . \end{theorem} \begin{proof} Recall that the leading terms $ <nat:246> $ , $ <nat:350> $ , $ <nat:134> $ , $ <nat:334> $ , $ <nat:478> $ , $ <nat:452> $ , are even . Then , the terms $ <var:z> \cdot <nat:246> $ , $ <var:C> \cdot <nat:350> $ , $ <var:d> \cdot <nat:134> $ , $ <nat:334> \cdot <var:w> $ , $ <var:y> \cdot <nat:478> $ , $ <nat:452> \cdot <var:X> $ , will be even additionally . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:z> <var:C> <var:d> <var:w> <var:y> <var:X> : nat , Nat . odd ( <nat:246> * <var:z> + <nat:350> * <var:C> + <nat:134> * <var:d> + <nat:334> * <var:w> + <nat:478> * <var:y> + <nat:452> * <var:X> + <nat:33> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:246> = true ) . { auto . } assert ( <genH> : Nat . even <nat:350> = true ) . { auto . } assert ( <genH> : Nat . even <nat:134> = true ) . { auto . } assert ( <genH> : Nat . even <nat:334> = true ) . { auto . } assert ( <genH> : Nat . even <nat:478> = true ) . { auto . } assert ( <genH> : Nat . even <nat:452> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:246> * <var:z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:350> * <var:C> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:134> * <var:d> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:334> * <var:w> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:478> * <var:y> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:452> * <var:X> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 