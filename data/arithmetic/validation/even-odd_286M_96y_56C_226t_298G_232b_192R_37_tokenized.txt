\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Assuming any positive terms $ <var:b> $ , $ <var:y> $ , $ <var:C> $ , $ <var:R> $ , $ <var:t> $ , $ <var:M> $ , and $ <var:G> $ the formula $ <nat:37> + <nat:286> \cdot <var:M> + <var:y> \cdot <nat:96> + <var:C> \cdot <nat:56> + <nat:226> \cdot <var:t> + <nat:298> \cdot <var:G> + <var:b> \cdot <nat:232> + <var:R> \cdot <nat:192> $ must be odd . \end{theorem} \begin{proof} The terms $ <nat:56> <var:C> $ , $ <var:G> <nat:298> $ , $ <var:t> <nat:226> $ , $ <var:y> <nat:96> $ , $ <var:b> <nat:232> $ , in addition to $ <nat:192> <var:R> $ are trivially even . This holds from the fact taking the product of an even element of $ \mathbb{Z}^+ $ and an arbitrary positive integer is guaranteed to be an even number in $ \mathbb{Z}^+ $ . Further , the term $ <var:M> <nat:286> $ is trivially an even integer . Remember $ <nat:37> $ is trivially an odd number in $ \mathbb{Z}^+ $ . It can be proven that our result is proven . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:b> <var:y> <var:C> <var:R> <var:t> <var:M> <var:G> : nat , Nat . odd ( <nat:286> * <var:M> + <nat:96> * <var:y> + <nat:56> * <var:C> + <nat:226> * <var:t> + <nat:298> * <var:G> + <nat:232> * <var:b> + <nat:192> * <var:R> + <nat:37> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:56> * <var:C> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:298> * <var:G> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:226> * <var:t> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:96> * <var:y> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:232> * <var:b> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:192> * <var:R> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:286> * <var:M> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . odd <nat:37> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 