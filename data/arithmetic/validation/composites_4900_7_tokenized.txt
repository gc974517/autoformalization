\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Only if we get $ <var:b> $ , $ <var:r> $ , $ <var:U> $ , $ <var:O> $ , $ <var:G> $ , $ <var:S> $ , and $ <var:N> \geq <nat:2> $ where using $ <var:c> \in \mathbb{Z}^+ $ , $ <var:c> = <var:S> \times <var:N> \times <var:U> \times <var:O> \times <var:G> \times <var:b> \times <var:r> $ , then let that $ <var:c> $ is a <def:seven-composite> whole number for some $ <var:r> $ , $ <var:O> $ , $ <var:S> $ , $ <var:U> $ , $ <var:G> $ , $ <var:N> $ , $ <var:b> \in \mathbb{N} $ . \end{definition} \begin{theorem} $ <nat:277200> = <var:c> $ is a <def:seven-composite> whole number . \end{theorem} \begin{proof} Remember a <def:seven-composite> is the multiplication between $ <var:S> $ , $ <var:G> $ , $ <var:b> $ , $ <var:O> $ , $ <var:r> $ , $ <var:N> $ , $ <var:U> $ more than or equal to <nat:2> . Take $ <var:G> = <nat:4> $ , $ <var:b> = <nat:5> $ , $ <var:U> = <nat:7> $ , $ <var:r> = <nat:10> $ , $ <var:S> = <nat:11> $ , $ <var:N> = <nat:6> $ , $ <var:O> = <nat:3> $ . Further notice that $ <nat:5> $ , $ <nat:11> $ , $ <nat:7> $ , $ <nat:10> $ , $ <nat:6> $ , $ <nat:3> $ , and $ <nat:4> $ are larger than or equal to <nat:2> . This produces <nat:277200> is a <def:seven-composite> number . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:c> : nat ) := exists <var:r> <var:O> <var:S> <var:U> <var:G> <var:N> <var:b> : nat , ( <var:b> >= <nat:2> ) /\ ( <var:r> >= <nat:2> ) /\ ( <var:U> >= <nat:2> ) /\ ( <var:O> >= <nat:2> ) /\ ( <var:G> >= <nat:2> ) /\ ( <var:S> >= <nat:2> ) /\ ( <var:N> >= <nat:2> ) /\ ( <var:c> = <var:S> * <var:N> * <var:U> * <var:O> * <var:G> * <var:b> * <var:r> ) . Theorem <genP:1> : <def:seven-composite> <nat:277200> . Proof . unfold <def:seven-composite> . exists <nat:10> . exists <nat:3> . exists <nat:11> . exists <nat:7> . exists <nat:4> . exists <nat:6> . exists <nat:5> . assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 