\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} If we have such that $ <var:q> $ , $ <var:i> $ , $ <var:x> $ , $ <var:P> $ , $ <var:y> $ , $ <var:R> $ and $ <var:S> > <nat:1> $ such that assuming $ <var:W> \in \mathbb{Z}^+ $ , $ <var:W> = <var:i> \times <var:x> \times <var:R> \times <var:y> \times <var:q> \times <var:S> \times <var:P> $ , we denote that $ <var:W> $ is a <def:seven-composite> whole number with some $ <var:R> $ , $ <var:S> $ , $ <var:q> $ , $ <var:x> $ , $ <var:y> $ , $ <var:P> $ , $ <var:i> \in \mathbb{Z}^+ $ . \end{definition} \begin{theorem} $ <var:W> = <nat:532224> $ is a <def:seven-composite> integer . \end{theorem} \begin{proof} Recall that <nat:532224> is a <def:seven-composite> positive integer if and only if <nat:532224> is the multiplication of whole numbers $ <var:i> $ , $ <var:P> $ , $ <var:y> $ , $ <var:x> $ , $ <var:R> $ , $ <var:q> $ , $ <var:S> $ more than <nat:1> . Allow $ <var:y> = <nat:11> $ , $ <var:x> = <nat:12> $ , $ <var:i> = <nat:4> $ , $ <var:P> = <nat:7> $ , $ <var:R> = <nat:8> $ , $ <var:S> = <nat:2> $ , $ <var:q> = <nat:9> $ . Notice that $ <nat:12> $ , $ <nat:2> $ , $ <nat:11> $ , $ <nat:9> $ , $ <nat:4> $ , $ <nat:8> $ and $ <nat:7> > <nat:1> $ . This yields the theorem is valid . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:W> : nat ) := exists <var:R> <var:S> <var:q> <var:x> <var:y> <var:P> <var:i> : nat , ( <var:q> > <nat:1> ) /\ ( <var:i> > <nat:1> ) /\ ( <var:x> > <nat:1> ) /\ ( <var:P> > <nat:1> ) /\ ( <var:y> > <nat:1> ) /\ ( <var:R> > <nat:1> ) /\ ( <var:S> > <nat:1> ) /\ ( <var:W> = <var:i> * <var:x> * <var:R> * <var:y> * <var:q> * <var:S> * <var:P> ) . Theorem <genP:1> : <def:seven-composite> <nat:532224> . Proof . unfold <def:seven-composite> . exists <nat:8> . exists <nat:2> . exists <nat:9> . exists <nat:12> . exists <nat:11> . exists <nat:7> . exists <nat:4> . assert ( <genH> : <nat:12> > <nat:1> ) . { lia . } assert ( <genH> : <nat:2> > <nat:1> ) . { lia . } assert ( <genH> : <nat:11> > <nat:1> ) . { lia . } assert ( <genH> : <nat:9> > <nat:1> ) . { lia . } assert ( <genH> : <nat:4> > <nat:1> ) . { lia . } assert ( <genH> : <nat:8> > <nat:1> ) . { lia . } assert ( <genH> : <nat:7> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 