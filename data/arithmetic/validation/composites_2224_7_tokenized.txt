\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Only if we have $ <var:c> = <var:s> * <var:P> * <var:N> * <var:o> * <var:I> * <var:w> * <var:F> $ with $ <var:c> \in \mathbb{Z}^+ $ and so that $ <var:w> $ , $ <var:s> $ , $ <var:I> $ , $ <var:F> $ , $ <var:o> $ , $ <var:N> $ , $ <var:P> \geq <nat:2> $ with some $ <var:P> $ , $ <var:N> $ , $ <var:I> $ , $ <var:F> $ , $ <var:w> $ , $ <var:o> $ , $ <var:s> \in \mathbb{Z}^+ $ , then we assume that $ <var:c> $ is a <def:seven-composite> whole number . For this reason the number <nat:190080> is a <def:seven-composite> number . \end{theorem} \begin{proof} Remember that a <def:seven-composite> number is the multiplication of numbers $ <var:F> $ , $ <var:N> $ , $ <var:P> $ , $ <var:I> $ , $ <var:s> $ , $ <var:o> $ , $ <var:w> $ satisfying the condition that $ <var:N> $ , $ <var:P> $ , $ <var:w> $ , $ <var:F> $ , $ <var:s> $ , $ <var:o> $ , $ <var:I> \geq <nat:2> $ . Allow $ <var:w> = <nat:5> $ , $ <var:F> = <nat:2> $ , $ <var:I> = <nat:11> $ , $ <var:P> = <nat:12> $ , $ <var:N> = <nat:8> $ , $ <var:s> = <nat:3> $ and $ <var:o> = <nat:6> $ . We verify <nat:190080> is a <def:seven-composite> number . Observe that $ <nat:6> $ , $ <nat:3> $ , $ <nat:2> $ , $ <nat:5> $ , $ <nat:12> $ , $ <nat:8> $ , and $ <nat:11> \geq <nat:2> $ . This implies the result is valid . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:c> : nat ) := exists <var:P> <var:N> <var:I> <var:F> <var:w> <var:o> <var:s> : nat , ( <var:c> = <var:s> * <var:P> * <var:N> * <var:o> * <var:I> * <var:w> * <var:F> ) /\ ( <var:w> >= <nat:2> ) /\ ( <var:s> >= <nat:2> ) /\ ( <var:I> >= <nat:2> ) /\ ( <var:F> >= <nat:2> ) /\ ( <var:o> >= <nat:2> ) /\ ( <var:N> >= <nat:2> ) /\ ( <var:P> >= <nat:2> ) . Theorem <genP:1> : <def:seven-composite> <nat:190080> . Proof . unfold <def:seven-composite> . exists <nat:12> . exists <nat:8> . exists <nat:11> . exists <nat:2> . exists <nat:5> . exists <nat:6> . exists <nat:3> . assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 