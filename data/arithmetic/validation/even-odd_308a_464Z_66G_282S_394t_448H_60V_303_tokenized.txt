\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:G> * <nat:66> + <nat:464> * <var:Z> + <nat:308> * <var:a> + <var:S> * <nat:282> + <nat:60> * <var:V> + <var:t> * <nat:394> + <nat:303> + <var:H> * <nat:448> $ must be odd . \end{theorem} \begin{proof} We use the assumption the sum $ <var:a> \times <nat:308> + <nat:464> \times <var:Z> + <nat:66> \times <var:G> + <nat:282> \times <var:S> + <var:t> \times <nat:394> + <nat:448> \times <var:H> + <nat:60> \times <var:V> $ is even . On top of this , the leading terms $ <nat:308> $ , $ <nat:464> $ , $ <nat:66> $ , $ <nat:282> $ , $ <nat:394> $ , $ <nat:448> $ , plus $ <nat:60> $ are known as even numbers . Thus , the terms $ <var:a> \cdot <nat:308> $ , $ <nat:464> \cdot <var:Z> $ , $ <nat:66> \cdot <var:G> $ , $ <var:S> \cdot <nat:282> $ , $ <var:t> \cdot <nat:394> $ , $ <var:H> \cdot <nat:448> $ , and $ <var:V> \cdot <nat:60> $ will be even at the same time . By reason that the totaling between an even integer with even elements of $ \mathbb{N} $ is even , and also as a consequence that the multiplication of even numbers in $ \mathbb{N} $ and any natural is guaranteed to be even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:G> <var:Z> <var:a> <var:S> <var:V> <var:t> <var:H> : nat , Nat . odd ( <nat:66> * <var:G> + <nat:464> * <var:Z> + <nat:308> * <var:a> + <nat:282> * <var:S> + <nat:60> * <var:V> + <nat:394> * <var:t> + <nat:448> * <var:H> + <nat:303> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:308> = true ) . { auto . } assert ( <genH> : Nat . even <nat:464> = true ) . { auto . } assert ( <genH> : Nat . even <nat:66> = true ) . { auto . } assert ( <genH> : Nat . even <nat:282> = true ) . { auto . } assert ( <genH> : Nat . even <nat:394> = true ) . { auto . } assert ( <genH> : Nat . even <nat:448> = true ) . { auto . } assert ( <genH> : Nat . even <nat:60> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:308> * <var:a> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:464> * <var:Z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:66> * <var:G> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:282> * <var:S> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:394> * <var:t> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:448> * <var:H> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:60> * <var:V> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:66> * <var:G> + <nat:464> * <var:Z> + <nat:308> * <var:a> + <nat:282> * <var:S> + <nat:60> * <var:V> + <nat:394> * <var:t> + <nat:448> * <var:H> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 