\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:275> + <nat:292> \cdot <var:z> + <nat:460> \cdot <var:Z> + <nat:248> \cdot <var:v> + <var:h> \cdot <nat:310> + <nat:262> \cdot <var:e> + <var:s> \cdot <nat:418> $ is guaranteed to be odd for every positive terms $ <var:e> $ , $ <var:z> $ , $ <var:s> $ , $ <var:Z> $ , $ <var:h> $ , and $ <var:v> $ . \end{theorem} \begin{proof} Remember that the pair $ <var:e> <nat:262> $ is known as even from the fact the whole number $ <nat:262> $ is trivially even . See that the product $ <nat:292> <var:z> $ is an even natural number . This is proven as a consequence that the natural number $ <nat:292> $ is known to be an even number . What's more , we know that the term $ <var:v> <nat:248> $ is guaranteed to be an even integer from the fact the multiplication between an even natural and some natural is even . This claim is proven because the integer $ <nat:248> $ is trivially obviously an even element of $ \mathbb{Z}^+ $ . See the integer $ <nat:418> $ is guaranteed to be even . Thus , $ <var:s> <nat:418> $ must be even additionally . Notice the product $ <var:Z> <nat:460> $ is known as even . This claim must be true from the knowledge multiplying of an even element of $ \mathbb{Z}^+ $ and a element of $ \mathbb{Z}^+ $ will be an even element of $ \mathbb{N} $ . This fact holds from the fact the number $ <nat:460> $ is an even positive integer . Notice the number $ <nat:310> $ is guaranteed to be an even positive integer . Therefore , the product $ <nat:310> <var:h> $ is even as well . Observe that $ <nat:275> $ is obviously odd . We verify the result is true . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:e> <var:z> <var:s> <var:Z> <var:h> <var:v> : nat , Nat . odd ( <nat:292> * <var:z> + <nat:460> * <var:Z> + <nat:248> * <var:v> + <nat:310> * <var:h> + <nat:262> * <var:e> + <nat:418> * <var:s> + <nat:275> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:262> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:262> * <var:e> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:292> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:292> * <var:z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:248> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:248> * <var:v> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:418> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:418> * <var:s> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:460> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:460> * <var:Z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:310> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:310> * <var:h> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:275> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 