\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:T> * <nat:192> + <var:f> * <nat:70> + <var:M> * <nat:444> + <nat:221> + <nat:200> * <var:K> + <nat:206> * <var:R> + <nat:440> * <var:H> + <nat:64> * <var:Q> + <nat:308> * <var:U> $ is guaranteed to be odd . \end{theorem} \begin{proof} It can be justified that that the summation $ <nat:308> \cdot <var:U> + <nat:70> \cdot <var:f> + <nat:440> \cdot <var:H> + <nat:444> \cdot <var:M> + <var:T> \cdot <nat:192> + <var:Q> \cdot <nat:64> + <nat:206> \cdot <var:R> + <var:K> \cdot <nat:200> $ is known to be even . Recall the products $ <nat:192> \cdot <var:T> $ , $ <nat:70> \cdot <var:f> $ , $ <var:K> \cdot <nat:200> $ , $ <var:M> \cdot <nat:444> $ , $ <nat:206> \cdot <var:R> $ , $ <var:Q> \cdot <nat:64> $ , in addition to $ <nat:308> \cdot <var:U> $ are trivially even . Remember that the pair $ <var:H> \cdot <nat:440> $ is known to be even . This result holds from the knowledge taking the product between an even element of $ \mathbb{N} $ with a natural is guaranteed to be even . We check $ <nat:440> * <var:H> + <nat:221> + <var:K> * <nat:200> + <var:R> * <nat:206> + <nat:444> * <var:M> + <var:Q> * <nat:64> + <nat:308> * <var:U> + <nat:192> * <var:T> + <nat:70> * <var:f> $ will be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:T> <var:f> <var:M> <var:K> <var:R> <var:H> <var:Q> <var:U> : nat , Nat . odd ( <nat:192> * <var:T> + <nat:70> * <var:f> + <nat:444> * <var:M> + <nat:200> * <var:K> + <nat:206> * <var:R> + <nat:440> * <var:H> + <nat:64> * <var:Q> + <nat:308> * <var:U> + <nat:221> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:192> * <var:T> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:70> * <var:f> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:200> * <var:K> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:444> * <var:M> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:206> * <var:R> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:64> * <var:Q> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:308> * <var:U> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:440> * <var:H> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:192> * <var:T> + <nat:70> * <var:f> + <nat:444> * <var:M> + <nat:200> * <var:K> + <nat:206> * <var:R> + <nat:440> * <var:H> + <nat:64> * <var:Q> + <nat:308> * <var:U> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 