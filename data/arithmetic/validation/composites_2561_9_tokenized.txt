\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Allow $ <var:s> $ , $ <var:Q> $ , $ <var:J> $ , $ <var:W> $ , $ <var:a> $ , $ <var:K> $ , $ <var:X> $ , $ <var:Y> $ , $ <var:u> $ as whole numbers . Say that $ <var:U> \in \mathbb{Z}^+ $ will be considered as a <def:nine-composite> number assuming $ <var:U> = <var:X> \cdot <var:Q> \cdot <var:s> \cdot <var:Y> \cdot <var:J> \cdot <var:K> \cdot <var:W> \cdot <var:u> \cdot <var:a> $ as well as terms are more than <nat:1> . \end{definition} \begin{theorem} <nat:6220800> is a <def:nine-composite> integer . \end{theorem} \begin{proof} Note $ <nat:6220800> = <var:W> \times <var:a> \times <var:s> \times <var:J> \times <var:K> \times <var:u> \times <var:X> \times <var:Q> \times <var:Y> $ shows $ <var:u> = <nat:6> $ , $ <var:Y> = <nat:2> $ , $ <var:K> = <nat:3> $ , $ <var:Q> = <nat:5> $ , $ <var:a> = <nat:9> $ , $ <var:s> = <nat:12> $ , $ <var:J> = <nat:8> $ , $ <var:W> = <nat:4> $ , and $ <var:X> = <nat:10> $ . Additionally note that $ <nat:4> $ , $ <nat:6> $ , $ <nat:2> $ , $ <nat:3> $ , $ <nat:5> $ , $ <nat:8> $ , $ <nat:9> $ , $ <nat:10> $ , $ <nat:12> $ are greater than <nat:1> . Therefore , $ <nat:6220800> = <var:Q> \times <var:a> \times <var:W> \times <var:J> \times <var:s> \times <var:u> \times <var:X> \times <var:Y> \times <var:K> $ has been validated . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:U> : nat ) := exists <var:s> <var:Q> <var:J> <var:W> <var:a> <var:K> <var:X> <var:Y> <var:u> : nat , ( <var:U> = <var:X> * <var:Q> * <var:s> * <var:Y> * <var:J> * <var:K> * <var:W> * <var:u> * <var:a> ) /\ ( <var:s> > <nat:1> ) /\ ( <var:Q> > <nat:1> ) /\ ( <var:J> > <nat:1> ) /\ ( <var:W> > <nat:1> ) /\ ( <var:a> > <nat:1> ) /\ ( <var:K> > <nat:1> ) /\ ( <var:X> > <nat:1> ) /\ ( <var:Y> > <nat:1> ) /\ ( <var:u> > <nat:1> ) . Theorem <genP:1> : <def:nine-composite> <nat:6220800> . Proof . unfold <def:nine-composite> . exists <nat:12> . exists <nat:5> . exists <nat:8> . exists <nat:4> . exists <nat:9> . exists <nat:3> . exists <nat:10> . exists <nat:2> . exists <nat:6> . assert ( <genH> : <nat:4> > <nat:1> ) . { lia . } assert ( <genH> : <nat:6> > <nat:1> ) . { lia . } assert ( <genH> : <nat:2> > <nat:1> ) . { lia . } assert ( <genH> : <nat:3> > <nat:1> ) . { lia . } assert ( <genH> : <nat:5> > <nat:1> ) . { lia . } assert ( <genH> : <nat:8> > <nat:1> ) . { lia . } assert ( <genH> : <nat:9> > <nat:1> ) . { lia . } assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } assert ( <genH> : <nat:12> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 