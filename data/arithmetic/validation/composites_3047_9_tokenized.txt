\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} There exist $ <var:b> $ , $ <var:a> $ , $ <var:c> $ , $ <var:D> $ , $ <var:Y> $ , $ <var:N> $ , $ <var:S> $ , $ <var:p> $ , $ <var:M> \in \mathbb{N} $ satisfying the condition that $ <var:D> $ , $ <var:c> $ , $ <var:b> $ , $ <var:a> $ , $ <var:Y> $ , $ <var:M> $ , $ <var:S> $ , $ <var:p> $ , and $ <var:N> \geq <nat:2> $ . Claim that some whole number $ <var:h> $ will be named a <def:nine-composite> integer if $ <var:h> = <var:p> \times <var:N> \times <var:D> \times <var:M> \times <var:S> \times <var:c> \times <var:b> \times <var:a> \times <var:Y> $ . \end{definition} \begin{theorem} $ <var:h> = <nat:19958400> $ is a <def:nine-composite> positive integer . \end{theorem} \begin{proof} We prove <nat:19958400> is a <def:nine-composite> whole number considering $ <nat:9> $ , $ <nat:5> $ , $ <nat:2> $ , $ <nat:12> $ , $ <nat:7> $ , $ <nat:11> $ , $ <nat:10> $ , $ <nat:4> $ and $ <nat:6> \geq <nat:2> $ plus in consideration of $ <var:M> \cdot <var:Y> \cdot <var:N> \cdot <var:p> \cdot <var:c> \cdot <var:a> \cdot <var:S> \cdot <var:b> \cdot <var:D> = <nat:7> \cdot <nat:2> \cdot <nat:6> \cdot <nat:5> \cdot <nat:4> \cdot <nat:9> \cdot <nat:12> \cdot <nat:10> \cdot <nat:11> = <nat:19958400> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:h> : nat ) := exists <var:b> <var:a> <var:c> <var:D> <var:Y> <var:N> <var:S> <var:p> <var:M> : nat , ( <var:D> >= <nat:2> ) /\ ( <var:c> >= <nat:2> ) /\ ( <var:b> >= <nat:2> ) /\ ( <var:a> >= <nat:2> ) /\ ( <var:Y> >= <nat:2> ) /\ ( <var:M> >= <nat:2> ) /\ ( <var:S> >= <nat:2> ) /\ ( <var:p> >= <nat:2> ) /\ ( <var:N> >= <nat:2> ) /\ ( <var:h> = <var:p> * <var:N> * <var:D> * <var:M> * <var:S> * <var:c> * <var:b> * <var:a> * <var:Y> ) . Theorem <genP:1> : <def:nine-composite> <nat:19958400> . Proof . unfold <def:nine-composite> . assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } exists <nat:10> . exists <nat:9> . exists <nat:4> . exists <nat:11> . exists <nat:2> . exists <nat:6> . exists <nat:12> . exists <nat:5> . exists <nat:7> . repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 