\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:460> \times <var:v> + <nat:275> + <var:D> \times <nat:438> + <nat:296> \times <var:z> + <var:I> \times <nat:50> + <var:u> \times <nat:360> + <nat:316> \times <var:K> $ is odd . \end{theorem} \begin{proof} Notice $ <nat:460> <var:v> + <var:K> <nat:316> + <var:I> <nat:50> + <nat:275> + <nat:360> <var:u> + <nat:438> <var:D> + <var:z> <nat:296> $ is obviously odd since $ <var:z> \cdot <nat:296> + <nat:360> \cdot <var:u> + <nat:50> \cdot <var:I> + <var:v> \cdot <nat:460> + <var:D> \cdot <nat:438> + <nat:316> \cdot <var:K> $ is clearly even . On top of this , the integer $ <nat:50> $ is known as even . As a consequence , the pair $ <nat:50> * <var:I> $ will be even in addition . Additionally , recall the natural number $ <nat:296> $ is obviously an even integer . Then , the term $ <var:z> * <nat:296> $ is even also . Likewise , we know that the positive integer $ <nat:460> $ is guaranteed to be even . Accordingly , $ <nat:460> * <var:v> $ will be even as well . The integer $ <nat:360> $ is trivially even . Hence , the product $ <nat:360> * <var:u> $ will be even in addition . Remember that the positive integer $ <nat:316> $ is known as even . Consequently , the pair $ <var:K> * <nat:316> $ is guaranteed to be even too . Furthermore , the integer $ <nat:438> $ is trivially even . Therefore , the term $ <var:D> * <nat:438> $ will be even as well . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:v> <var:D> <var:z> <var:I> <var:u> <var:K> : nat , Nat . odd ( <nat:460> * <var:v> + <nat:438> * <var:D> + <nat:296> * <var:z> + <nat:50> * <var:I> + <nat:360> * <var:u> + <nat:316> * <var:K> + <nat:275> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:50> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:50> * <var:I> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:296> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:296> * <var:z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:460> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:460> * <var:v> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:360> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:360> * <var:u> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:316> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:316> * <var:K> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:438> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:438> * <var:D> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:460> * <var:v> + <nat:438> * <var:D> + <nat:296> * <var:z> + <nat:50> * <var:I> + <nat:360> * <var:u> + <nat:316> * <var:K> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 