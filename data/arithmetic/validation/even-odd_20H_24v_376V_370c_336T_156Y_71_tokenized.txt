\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} For some $ <var:H> $ , $ <var:V> $ , $ <var:Y> $ , $ <var:v> $ , $ <var:c> $ , and $ <var:T> \in \mathbb{Z}^+ $ $ <nat:370> \cdot <var:c> + <nat:336> \cdot <var:T> + <var:H> \cdot <nat:20> + <nat:24> \cdot <var:v> + <nat:156> \cdot <var:Y> + <var:V> \cdot <nat:376> + <nat:71> $ is guaranteed to be odd . \end{theorem} \begin{proof} It can be verified that that $ <nat:370> <var:c> + <var:V> <nat:376> + <var:T> <nat:336> + <nat:20> <var:H> + <var:v> <nat:24> + <nat:71> + <nat:156> <var:Y> $ is guaranteed to be odd since the sum $ <nat:336> <var:T> + <nat:156> <var:Y> + <nat:376> <var:V> + <var:H> <nat:20> + <nat:24> <var:v> + <nat:370> <var:c> $ is obviously even . The natural number $ <nat:20> $ is obviously even . Then , $ <var:H> <nat:20> $ will be even as well . The integer $ <nat:24> $ is obviously even . Therefore , the product $ <nat:24> <var:v> $ must be even also . Likewise , observe that the leading term $ <nat:376> $ is guaranteed to be even . Accordingly , $ <var:V> <nat:376> $ will be even too . We know that the product $ <nat:370> <var:c> $ is obviously an even number in $ \mathbb{N} $ . This fact must be true from the fact the positive integer $ <nat:370> $ is obviously even . Observe the positive integer $ <nat:336> $ is trivially even . Thus , the term $ <nat:336> <var:T> $ must be even additionally . Additionally , $ <nat:156> <var:Y> $ is known to be even since the natural number $ <nat:156> $ is known to be even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:H> <var:V> <var:Y> <var:v> <var:c> <var:T> : nat , Nat . odd ( <nat:370> * <var:c> + <nat:336> * <var:T> + <nat:20> * <var:H> + <nat:24> * <var:v> + <nat:156> * <var:Y> + <nat:376> * <var:V> + <nat:71> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:20> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:20> * <var:H> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:24> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:24> * <var:v> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:376> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:376> * <var:V> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:370> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:370> * <var:c> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:336> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:336> * <var:T> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:156> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:156> * <var:Y> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:370> * <var:c> + <nat:336> * <var:T> + <nat:20> * <var:H> + <nat:24> * <var:v> + <nat:156> * <var:Y> + <nat:376> * <var:V> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 