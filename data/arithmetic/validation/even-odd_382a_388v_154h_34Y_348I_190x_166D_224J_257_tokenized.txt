\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:154> * <var:h> + <var:v> * <nat:388> + <var:Y> * <nat:34> + <nat:224> * <var:J> + <var:I> * <nat:348> + <var:x> * <nat:190> + <nat:166> * <var:D> + <nat:382> * <var:a> + <nat:257> $ is guaranteed to be odd . \end{theorem} \begin{proof} The adding between even numbers concurrently and an odd whole number must be an odd number in $ \mathbb{Z}^+ $ . It can be shown that the summation $ <nat:348> \cdot <var:I> + <nat:224> \cdot <var:J> + <nat:382> \cdot <var:a> + <var:x> \cdot <nat:190> + <var:v> \cdot <nat:388> + <var:Y> \cdot <nat:34> + <nat:166> \cdot <var:D> + <var:h> \cdot <nat:154> + <nat:257> $ is clearly odd since the expression $ <nat:190> \cdot <var:x> + <nat:348> \cdot <var:I> + <var:J> \cdot <nat:224> + <var:h> \cdot <nat:154> + <var:Y> \cdot <nat:34> + <nat:382> \cdot <var:a> + <var:D> \cdot <nat:166> + <var:v> \cdot <nat:388> $ is trivially even . Further , the integers $ <nat:190> $ , $ <nat:348> $ , $ <nat:224> $ , $ <nat:154> $ , $ <nat:34> $ , $ <nat:382> $ , $ <nat:166> $ , and likewise $ <nat:388> $ must be even . Hence , the pairs $ <var:x> \times <nat:190> $ , $ <var:I> \times <nat:348> $ , $ <nat:224> \times <var:J> $ , $ <var:h> \times <nat:154> $ , $ <var:Y> \times <nat:34> $ , $ <nat:382> \times <var:a> $ , $ <nat:166> \times <var:D> $ , in addition to $ <nat:388> \times <var:v> $ is even also . $ <var:a> \times <nat:382> + <nat:388> \times <var:v> + <nat:154> \times <var:h> + <var:Y> \times <nat:34> + <nat:348> \times <var:I> + <var:x> \times <nat:190> + <var:D> \times <nat:166> + <var:J> \times <nat:224> $ is by itself even by reason that the adding between an even number and an even element of $ \mathbb{N} $ will be trivially an even number . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:h> <var:v> <var:Y> <var:J> <var:I> <var:x> <var:D> <var:a> : nat , Nat . odd ( <nat:154> * <var:h> + <nat:388> * <var:v> + <nat:34> * <var:Y> + <nat:224> * <var:J> + <nat:348> * <var:I> + <nat:190> * <var:x> + <nat:166> * <var:D> + <nat:382> * <var:a> + <nat:257> ) = true . Proof . intros . rewrite Nat . odd_add . assert ( <genH> : Nat . even <nat:190> = true ) . { auto . } assert ( <genH> : Nat . even <nat:348> = true ) . { auto . } assert ( <genH> : Nat . even <nat:224> = true ) . { auto . } assert ( <genH> : Nat . even <nat:154> = true ) . { auto . } assert ( <genH> : Nat . even <nat:34> = true ) . { auto . } assert ( <genH> : Nat . even <nat:382> = true ) . { auto . } assert ( <genH> : Nat . even <nat:166> = true ) . { auto . } assert ( <genH> : Nat . even <nat:388> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:190> * <var:x> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:348> * <var:I> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:224> * <var:J> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:154> * <var:h> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:34> * <var:Y> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:382> * <var:a> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:166> * <var:D> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:388> * <var:v> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:154> * <var:h> + <nat:388> * <var:v> + <nat:34> * <var:Y> + <nat:224> * <var:J> + <nat:348> * <var:I> + <nat:190> * <var:x> + <nat:166> * <var:D> + <nat:382> * <var:a> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 