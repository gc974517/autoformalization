\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:89> + <var:j> \cdot <nat:228> + <var:Y> \cdot <nat:74> + <var:E> \cdot <nat:294> + <nat:436> \cdot <var:I> $ must be odd . \end{theorem} \begin{proof} The expression $ <var:j> \cdot <nat:228> + <nat:436> \cdot <var:I> + <var:E> \cdot <nat:294> + <nat:74> \cdot <var:Y> $ is clearly even . Observe the pair $ <nat:74> \cdot <var:Y> $ is obviously even . On top of this , remember that the products $ <nat:294> \cdot <var:E> $ and also $ <nat:228> \cdot <var:j> $ are trivially even numbers . This claim is true from the knowledge the multiplication of an even whole number with any natural number is fundamentally an even integer . Furthermore , observe that the product $ <var:I> \cdot <nat:436> $ is known to be an even number from the fact the multiplication between an even element of $ \mathbb{Z}^+ $ and some integer is guaranteed to be an even natural number . Remember that $ <nat:89> $ is trivially an odd element of $ \mathbb{N} $ . The adding of even integers collectively with an odd element of $ \mathbb{Z}^+ $ is guaranteed to be itself an odd natural number . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:j> <var:Y> <var:E> <var:I> : nat , Nat . odd ( <nat:228> * <var:j> + <nat:74> * <var:Y> + <nat:294> * <var:E> + <nat:436> * <var:I> + <nat:89> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:74> * <var:Y> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:294> * <var:E> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:228> * <var:j> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:436> * <var:I> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:228> * <var:j> + <nat:74> * <var:Y> + <nat:294> * <var:E> + <nat:436> * <var:I> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:89> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 