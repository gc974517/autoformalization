\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:211> + <nat:362> <var:D> + <var:M> <nat:468> + <var:r> <nat:86> + <nat:456> <var:t> + <nat:344> <var:b> + <nat:358> <var:F> + <nat:184> <var:T> + <var:C> <nat:196> $ is guaranteed to be odd taking any terms $ <var:D> $ , $ <var:T> $ , $ <var:r> $ , $ <var:t> $ , $ <var:C> $ , $ <var:F> $ , $ <var:b> $ , and $ <var:M> $ . \end{theorem} \begin{proof} It can be shown that our proposition holds . We apply the understanding the expression $ <var:D> \times <nat:362> + <var:t> \times <nat:456> + <nat:196> \times <var:C> + <nat:344> \times <var:b> + <var:r> \times <nat:86> + <var:T> \times <nat:184> + <var:F> \times <nat:358> + <var:M> \times <nat:468> $ is clearly even . Further , notice that the pairs $ <var:D> \times <nat:362> $ , $ <var:t> \times <nat:456> $ , $ <nat:196> \times <var:C> $ , $ <var:b> \times <nat:344> $ , $ <nat:86> \times <var:r> $ , $ <var:T> \times <nat:184> $ , $ <nat:358> \times <var:F> $ , and likewise $ <var:M> \times <nat:468> $ are known to be even from the knowledge taking the product of an even integer and some number will be even and also the integers $ <nat:362> $ , $ <nat:456> $ , $ <nat:196> $ , $ <nat:344> $ , $ <nat:86> $ , $ <nat:184> $ , $ <nat:358> $ , and moreover $ <nat:468> $ must be even . The expression $ <nat:86> \cdot <var:r> + <nat:184> \cdot <var:T> + <var:D> \cdot <nat:362> + <nat:196> \cdot <var:C> + <var:F> \cdot <nat:358> + <var:t> \cdot <nat:456> + <nat:468> \cdot <var:M> + <nat:344> \cdot <var:b> $ is guaranteed to be even as a consequence that the summation of an even element of $ \mathbb{N} $ and an even element of $ \mathbb{Z}^+ $ is guaranteed to be by itself an even natural number as well as by reason that the multiplication between an even integer with some positive integer is guaranteed to be even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:D> <var:T> <var:r> <var:t> <var:C> <var:F> <var:b> <var:M> : nat , Nat . odd ( <nat:362> * <var:D> + <nat:468> * <var:M> + <nat:86> * <var:r> + <nat:456> * <var:t> + <nat:344> * <var:b> + <nat:358> * <var:F> + <nat:184> * <var:T> + <nat:196> * <var:C> + <nat:211> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:362> = true ) . { auto . } assert ( <genH> : Nat . even <nat:456> = true ) . { auto . } assert ( <genH> : Nat . even <nat:196> = true ) . { auto . } assert ( <genH> : Nat . even <nat:344> = true ) . { auto . } assert ( <genH> : Nat . even <nat:86> = true ) . { auto . } assert ( <genH> : Nat . even <nat:184> = true ) . { auto . } assert ( <genH> : Nat . even <nat:358> = true ) . { auto . } assert ( <genH> : Nat . even <nat:468> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:362> * <var:D> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:456> * <var:t> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:196> * <var:C> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:344> * <var:b> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:86> * <var:r> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:184> * <var:T> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:358> * <var:F> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:468> * <var:M> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:362> * <var:D> + <nat:468> * <var:M> + <nat:86> * <var:r> + <nat:456> * <var:t> + <nat:344> * <var:b> + <nat:358> * <var:F> + <nat:184> * <var:T> + <nat:196> * <var:C> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 