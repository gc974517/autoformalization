\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Let $ <var:n> $ , $ <var:V> $ , $ <var:A> $ , $ <var:F> $ , $ <var:g> $ , $ <var:K> $ , $ <var:D> $ , $ <var:z> $ , $ <var:I> \in \mathbb{Z}^+ $ where $ <var:D> $ , $ <var:z> $ , $ <var:K> $ , $ <var:I> $ , $ <var:A> $ , $ <var:F> $ , $ <var:V> $ , $ <var:g> $ , $ <var:n> \geq <nat:2> $ . Define that some whole number $ <var:J> $ is named a <def:nine-composite> number when $ <var:I> \times <var:F> \times <var:z> \times <var:D> \times <var:V> \times <var:g> \times <var:n> \times <var:K> \times <var:A> = <var:J> $ . So the number <nat:19958400> is a <def:nine-composite> integer . \end{theorem} \begin{proof} Assume $ <var:I> = <nat:10> $ , $ <var:K> = <nat:3> $ , $ <var:z> = <nat:5> $ , $ <var:n> = <nat:11> $ , $ <var:g> = <nat:8> $ , $ <var:D> = <nat:7> $ , $ <var:F> = <nat:6> $ , $ <var:V> = <nat:9> $ , and $ <var:A> = <nat:4> $ . Notice $ <var:n> * <var:D> * <var:F> * <var:V> * <var:z> * <var:A> * <var:K> * <var:g> * <var:I> = <nat:19958400> $ . Additionally notice $ <nat:7> $ , $ <nat:10> $ , $ <nat:4> $ , $ <nat:3> $ , $ <nat:5> $ , $ <nat:11> $ , $ <nat:6> $ , $ <nat:8> $ , and $ <nat:9> $ are greater than or equivalent to <nat:2> . This gives the statement holds . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:J> : nat ) := exists <var:n> <var:V> <var:A> <var:F> <var:g> <var:K> <var:D> <var:z> <var:I> : nat , ( <var:D> >= <nat:2> ) /\ ( <var:z> >= <nat:2> ) /\ ( <var:K> >= <nat:2> ) /\ ( <var:I> >= <nat:2> ) /\ ( <var:A> >= <nat:2> ) /\ ( <var:F> >= <nat:2> ) /\ ( <var:V> >= <nat:2> ) /\ ( <var:g> >= <nat:2> ) /\ ( <var:n> >= <nat:2> ) /\ ( <var:I> * <var:F> * <var:z> * <var:D> * <var:V> * <var:g> * <var:n> * <var:K> * <var:A> = <var:J> ) . Theorem <genP:1> : <def:nine-composite> <nat:19958400> . Proof . unfold <def:nine-composite> . exists <nat:11> . exists <nat:9> . exists <nat:4> . exists <nat:6> . exists <nat:8> . exists <nat:3> . exists <nat:7> . exists <nat:5> . exists <nat:10> . assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 