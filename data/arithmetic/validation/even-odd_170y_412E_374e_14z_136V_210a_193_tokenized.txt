\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:136> <var:V> + <nat:210> <var:a> + <nat:374> <var:e> + <var:y> <nat:170> + <nat:412> <var:E> + <var:z> <nat:14> + <nat:193> $ must be odd . \end{theorem} \begin{proof} It can be shown that the summation $ <var:e> \cdot <nat:374> + <nat:210> \cdot <var:a> + <var:E> \cdot <nat:412> + <var:z> \cdot <nat:14> + <nat:136> \cdot <var:V> + <nat:193> + <var:y> \cdot <nat:170> $ will be odd . The integers $ <nat:136> $ , $ <nat:374> $ , plus $ <nat:14> $ are known to be even elements of $ \mathbb{N} $ . Thus , the pairs $ <var:V> <nat:136> $ , $ <nat:374> <var:e> $ , plus $ <nat:14> <var:z> $ is guaranteed to be even in addition . The number $ <nat:170> $ is clearly an even number . So , the product $ <nat:170> <var:y> $ must be even in addition . Recall the natural number $ <nat:412> $ is guaranteed to be an even element of $ \mathbb{Z}^+ $ . Hence , the term $ <nat:412> <var:E> $ is guaranteed to be even additionally . On top of this , the number $ <nat:210> $ is guaranteed to be an even number in $ \mathbb{Z}^+ $ . As a consequence , the term $ <nat:210> <var:a> $ is guaranteed to be even additionally . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:V> <var:a> <var:e> <var:y> <var:E> <var:z> : nat , Nat . odd ( <nat:136> * <var:V> + <nat:210> * <var:a> + <nat:374> * <var:e> + <nat:170> * <var:y> + <nat:412> * <var:E> + <nat:14> * <var:z> + <nat:193> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:136> = true ) . { auto . } assert ( <genH> : Nat . even <nat:374> = true ) . { auto . } assert ( <genH> : Nat . even <nat:14> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:136> * <var:V> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:374> * <var:e> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:14> * <var:z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:170> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:170> * <var:y> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:412> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:412> * <var:E> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:210> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:210> * <var:a> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 