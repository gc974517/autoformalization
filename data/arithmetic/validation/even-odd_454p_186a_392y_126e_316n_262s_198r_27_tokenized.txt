\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} With some positive numbers $ <var:a> $ , $ <var:y> $ , $ <var:n> $ , $ <var:p> $ , $ <var:s> $ , $ <var:r> $ , and $ <var:e> $ $ <var:r> \times <nat:198> + <nat:126> \times <var:e> + <var:p> \times <nat:454> + <var:n> \times <nat:316> + <nat:392> \times <var:y> + <nat:186> \times <var:a> + <var:s> \times <nat:262> + <nat:27> $ is guaranteed to be odd . \end{theorem} \begin{proof} It can be shown that $ <nat:454> <var:p> + <nat:186> <var:a> + <var:y> <nat:392> + <nat:126> <var:e> + <nat:316> <var:n> + <var:s> <nat:262> + <var:r> <nat:198> + <nat:27> $ will be odd . The pairs $ <nat:454> \times <var:p> $ , $ <nat:198> \times <var:r> $ , $ <nat:392> \times <var:y> $ , $ <var:s> \times <nat:262> $ , in addition to $ <nat:316> \times <var:n> $ are guaranteed to be even since the multiplication of an even element of $ \mathbb{Z}^+ $ and an arbitrary number must be clearly an even positive integer . $ <nat:186> \times <var:a> $ is trivially even . On top of this , see that $ <var:e> \times <nat:126> $ is clearly even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:a> <var:y> <var:n> <var:p> <var:s> <var:r> <var:e> : nat , Nat . odd ( <nat:198> * <var:r> + <nat:126> * <var:e> + <nat:454> * <var:p> + <nat:316> * <var:n> + <nat:392> * <var:y> + <nat:186> * <var:a> + <nat:262> * <var:s> + <nat:27> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:454> * <var:p> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:198> * <var:r> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:392> * <var:y> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:262> * <var:s> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:316> * <var:n> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:186> * <var:a> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:126> * <var:e> ) = true ) . { rewrite Nat . even_mul . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 