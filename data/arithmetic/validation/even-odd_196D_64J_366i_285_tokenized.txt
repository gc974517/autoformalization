\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} With positive numbers $ <var:D> $ , $ <var:J> $ , and $ <var:i> $ $ <var:i> \cdot <nat:366> + <nat:196> \cdot <var:D> + <nat:64> \cdot <var:J> + <nat:285> $ is guaranteed to be odd . \end{theorem} \begin{proof} It can be checked that $ <nat:366> \cdot <var:i> + <nat:285> + <var:J> \cdot <nat:64> + <nat:196> \cdot <var:D> $ is odd . Remember that $ <nat:285> $ is obviously odd . Recall that the formula $ <nat:196> \times <var:D> + <var:i> \times <nat:366> + <var:J> \times <nat:64> $ is obviously even . The product $ <nat:366> \cdot <var:i> $ is obviously even by reason that the product of an even natural and a element of $ \mathbb{N} $ must be an even positive integer and the whole number $ <nat:366> $ is known as an even integer . The positive integer $ <nat:64> $ is an even number in $ \mathbb{Z}^+ $ . As a consequence , $ <nat:64> \cdot <var:J> $ is guaranteed to be even also . In addition , see the pair $ <nat:196> \cdot <var:D> $ is trivially even as a consequence that the positive integer $ <nat:196> $ is an even element of $ \mathbb{Z}^+ $ . Because the product of an even natural number with some positive integer is by definition an even whole number $ <var:D> \times <nat:196> + <var:J> \times <nat:64> + <nat:366> \times <var:i> $ is guaranteed to be trivially even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:D> <var:J> <var:i> : nat , Nat . odd ( <nat:366> * <var:i> + <nat:196> * <var:D> + <nat:64> * <var:J> + <nat:285> ) = true . Proof . intros . assert ( <genH> : Nat . odd <nat:285> = true ) . { auto . } assert ( <genH> : Nat . even <nat:366> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:366> * <var:i> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:64> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:64> * <var:J> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:196> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:196> * <var:D> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:366> * <var:i> + <nat:196> * <var:D> + <nat:64> * <var:J> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 