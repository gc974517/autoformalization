\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Taking every positive integers $ <var:g> $ , $ <var:J> $ , and $ <var:E> $ $ <var:E> * <nat:230> + <var:J> * <nat:74> + <nat:405> + <nat:260> * <var:g> $ will be odd . \end{theorem} \begin{proof} Take note that the sum $ <nat:260> \times <var:g> + <nat:230> \times <var:E> + <var:J> \times <nat:74> $ is trivially even . Remember $ <nat:260> \cdot <var:g> $ is known to be even by reason that taking the product between an even number with an arbitrary natural will be even . Notice the pair $ <nat:74> \cdot <var:J> $ is obviously an even positive integer . This must be true because taking the product of an even integer and a integer is by itself an even element of $ \mathbb{N} $ . Further , the pair $ <var:E> \cdot <nat:230> $ is known as even . This fact must be true from the fact multiplying between an even positive integer and some whole number will be trivially an even integer . As a consequence that the product between an even natural and a positive integer is even $ <var:g> * <nat:260> + <nat:230> * <var:E> + <nat:74> * <var:J> $ must be by definition even . Notice the summing between an even integer with an odd natural number is obviously an odd number in $ \mathbb{Z}^+ $ . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:g> <var:J> <var:E> : nat , Nat . odd ( <nat:230> * <var:E> + <nat:74> * <var:J> + <nat:260> * <var:g> + <nat:405> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:260> * <var:g> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:74> * <var:J> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:230> * <var:E> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:230> * <var:E> + <nat:74> * <var:J> + <nat:260> * <var:g> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 