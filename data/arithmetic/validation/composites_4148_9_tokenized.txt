\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} We define that if and only if there are natural numbers $ <var:I> $ , $ <var:Y> $ , $ <var:D> $ , $ <var:c> $ , $ <var:q> $ , $ <var:N> $ , $ <var:M> $ , $ <var:n> $ , $ <var:e> $ larger than or equivalent to <nat:2> . Define that some number $ <var:j> $ is a <def:nine-composite> integer when $ <var:e> \times <var:N> \times <var:I> \times <var:M> \times <var:q> \times <var:D> \times <var:Y> \times <var:c> \times <var:n> = <var:j> $ . Then the number <nat:11404800> is a <def:nine-composite> whole number . \end{theorem} \begin{proof} Allow $ <var:q> = <nat:8> $ , $ <var:D> = <nat:3> $ , $ <var:e> = <nat:2> $ , $ <var:c> = <nat:11> $ , $ <var:I> = <nat:5> $ , $ <var:n> = <nat:10> $ , $ <var:Y> = <nat:12> $ , $ <var:M> = <nat:9> $ and $ <var:N> = <nat:4> $ . Note $ <nat:11404800> = <nat:5> * <nat:10> * <nat:8> * <nat:2> * <nat:12> * <nat:3> * <nat:4> * <nat:9> * <nat:11> $ . Also notice $ <var:N> = <nat:4> $ , $ <var:c> = <nat:11> $ , $ <var:I> = <nat:5> $ , $ <var:Y> = <nat:12> $ , $ <var:M> = <nat:9> $ , $ <var:n> = <nat:10> $ , $ <var:D> = <nat:3> $ , $ <var:q> = <nat:8> $ and $ <var:e> = <nat:2> \geq <nat:2> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:j> : nat ) := exists <var:I> <var:Y> <var:D> <var:c> <var:q> <var:N> <var:M> <var:n> <var:e> : nat , ( <var:I> >= <nat:2> ) /\ ( <var:Y> >= <nat:2> ) /\ ( <var:D> >= <nat:2> ) /\ ( <var:c> >= <nat:2> ) /\ ( <var:q> >= <nat:2> ) /\ ( <var:N> >= <nat:2> ) /\ ( <var:M> >= <nat:2> ) /\ ( <var:n> >= <nat:2> ) /\ ( <var:e> >= <nat:2> ) /\ ( <var:e> * <var:N> * <var:I> * <var:M> * <var:q> * <var:D> * <var:Y> * <var:c> * <var:n> = <var:j> ) . Theorem <genP:1> : <def:nine-composite> <nat:11404800> . Proof . unfold <def:nine-composite> . exists <nat:5> . exists <nat:12> . exists <nat:3> . exists <nat:11> . exists <nat:8> . exists <nat:4> . exists <nat:9> . exists <nat:10> . exists <nat:2> . assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 