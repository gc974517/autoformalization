\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Given we have $ <var:R> $ , $ <var:u> $ , $ <var:i> $ , $ <var:C> $ and $ <var:G> \geq <nat:2> $ satisfying the condition that assuming some $ <var:X> $ , $ <var:C> \times <var:R> \times <var:i> \times <var:G> \times <var:u> = <var:X> $ , claim that $ <var:X> $ is <def:five-composite> for some numbers $ <var:R> $ , $ <var:u> $ , $ <var:C> $ , $ <var:i> $ , $ <var:G> $ . Then <nat:2400> is a <def:five-composite> number . \end{theorem} \begin{proof} Remember <nat:2400> is a <def:five-composite> positive integer given that it is the multiplication of whole numbers $ <var:G> $ , $ <var:i> $ , $ <var:C> $ , $ <var:R> $ , and $ <var:u> $ where $ <var:C> $ , $ <var:R> $ , $ <var:i> $ , $ <var:u> $ and $ <var:G> \geq <nat:2> $ . Allow $ <var:u> = <nat:4> $ , $ <var:G> = <nat:6> $ , $ <var:C> = <nat:2> $ , $ <var:R> = <nat:10> $ and $ <var:i> = <nat:5> $ . We show <nat:2400> is a <def:five-composite> integer . We confirm <nat:2400> is a <def:five-composite> positive integer in view of $ <nat:4> $ , $ <nat:5> $ , $ <nat:10> $ , $ <nat:2> $ , and $ <nat:6> $ are greater than or equal to <nat:2> as well as on account of $ <nat:10> \times <nat:6> \times <nat:4> \times <nat:2> \times <nat:5> = <nat:2400> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:five-composite> ( <var:X> : nat ) := exists <var:R> <var:u> <var:C> <var:i> <var:G> : nat , ( <var:R> >= <nat:2> ) /\ ( <var:u> >= <nat:2> ) /\ ( <var:i> >= <nat:2> ) /\ ( <var:C> >= <nat:2> ) /\ ( <var:G> >= <nat:2> ) /\ ( <var:C> * <var:R> * <var:i> * <var:G> * <var:u> = <var:X> ) . Theorem <genP:1> : <def:five-composite> <nat:2400> . Proof . unfold <def:five-composite> . exists <nat:10> . exists <nat:4> . exists <nat:2> . exists <nat:5> . exists <nat:6> . assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 