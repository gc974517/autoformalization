\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} If and only if we have satisfying the condition that $ <var:A> $ , $ <var:j> $ , $ <var:Z> $ , $ <var:a> $ , $ <var:y> $ , $ <var:e> $ , $ <var:E> $ , $ <var:u> $ , and $ <var:x> > <nat:1> $ so that taking some positive integer $ <var:D> $ , $ <var:j> \times <var:a> \times <var:e> \times <var:u> \times <var:Z> \times <var:E> \times <var:A> \times <var:x> \times <var:y> = <var:D> $ assuming some $ <var:e> $ , $ <var:x> $ , $ <var:y> $ , $ <var:A> $ , $ <var:u> $ , $ <var:a> $ , $ <var:E> $ , $ <var:Z> $ , $ <var:j> $ , say that $ <var:D> $ is a <def:nine-composite> whole number . \end{definition} \begin{theorem} $ <nat:9979200> = <var:D> $ is a <def:nine-composite> positive integer . \end{theorem} \begin{proof} Recall <nat:9979200> is a <def:nine-composite> number if and only if it is the product between whole numbers $ <var:u> $ , $ <var:e> $ , $ <var:a> $ , $ <var:y> $ , $ <var:E> $ , $ <var:Z> $ , $ <var:A> $ , $ <var:j> $ and $ <var:x> $ where $ <var:A> $ , $ <var:y> $ , $ <var:e> $ , $ <var:u> $ , $ <var:a> $ , $ <var:Z> $ , $ <var:j> $ , $ <var:x> $ and $ <var:E> > <nat:1> $ . Allow $ <var:x> = <nat:7> $ , $ <var:j> = <nat:3> $ , $ <var:u> = <nat:10> $ , $ <var:e> = <nat:5> $ , $ <var:E> = <nat:2> $ , $ <var:A> = <nat:6> $ , $ <var:Z> = <nat:11> $ , $ <var:a> = <nat:9> $ , and $ <var:y> = <nat:8> $ . Notice $ <var:j> = <nat:3> $ , $ <var:E> = <nat:2> $ , $ <var:a> = <nat:9> $ , $ <var:Z> = <nat:11> $ , $ <var:A> = <nat:6> $ , $ <var:y> = <nat:8> $ , $ <var:e> = <nat:5> $ , $ <var:u> = <nat:10> $ , and $ <var:x> = <nat:7> > <nat:1> $ . What's more note as well $ <nat:9979200> = <nat:7> * <nat:3> * <nat:6> * <nat:8> * <nat:5> * <nat:10> * <nat:9> * <nat:11> * <nat:2> = <var:x> * <var:j> * <var:A> * <var:y> * <var:e> * <var:u> * <var:a> * <var:Z> * <var:E> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:D> : nat ) := exists <var:e> <var:x> <var:y> <var:A> <var:u> <var:a> <var:E> <var:Z> <var:j> : nat , ( <var:A> > <nat:1> ) /\ ( <var:j> > <nat:1> ) /\ ( <var:Z> > <nat:1> ) /\ ( <var:a> > <nat:1> ) /\ ( <var:y> > <nat:1> ) /\ ( <var:e> > <nat:1> ) /\ ( <var:E> > <nat:1> ) /\ ( <var:u> > <nat:1> ) /\ ( <var:x> > <nat:1> ) /\ ( <var:j> * <var:a> * <var:e> * <var:u> * <var:Z> * <var:E> * <var:A> * <var:x> * <var:y> = <var:D> ) . Theorem <genP:1> : <def:nine-composite> <nat:9979200> . Proof . unfold <def:nine-composite> . exists <nat:5> . exists <nat:7> . exists <nat:8> . exists <nat:6> . exists <nat:10> . exists <nat:9> . exists <nat:2> . exists <nat:11> . exists <nat:3> . assert ( <genH> : <nat:3> > <nat:1> ) . { lia . } assert ( <genH> : <nat:2> > <nat:1> ) . { lia . } assert ( <genH> : <nat:9> > <nat:1> ) . { lia . } assert ( <genH> : <nat:11> > <nat:1> ) . { lia . } assert ( <genH> : <nat:6> > <nat:1> ) . { lia . } assert ( <genH> : <nat:8> > <nat:1> ) . { lia . } assert ( <genH> : <nat:5> > <nat:1> ) . { lia . } assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } assert ( <genH> : <nat:7> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 