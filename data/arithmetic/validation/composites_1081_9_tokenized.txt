\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} If we have $ <var:y> $ , $ <var:F> $ , $ <var:U> $ , $ <var:J> $ , $ <var:m> $ , $ <var:T> $ , $ <var:c> $ , $ <var:X> $ , and $ <var:a> \geq <nat:2> $ such that assuming $ <var:R> \in \mathbb{Z}^+ $ , $ <var:F> \cdot <var:a> \cdot <var:T> \cdot <var:X> \cdot <var:J> \cdot <var:c> \cdot <var:y> \cdot <var:U> \cdot <var:m> = <var:R> $ for some $ <var:T> $ , $ <var:m> $ , $ <var:X> $ , $ <var:F> $ , $ <var:U> $ , $ <var:J> $ , $ <var:c> $ , $ <var:a> $ , $ <var:y> \in \mathbb{Z}^+ $ , then claim that $ <var:R> $ is a <def:nine-composite> integer . Hence the whole number <nat:29937600> is <def:nine-composite> . \end{theorem} \begin{proof} Take $ <var:a> = <nat:5> $ , $ <var:U> = <nat:12> $ , $ <var:T> = <nat:10> $ , $ <var:m> = <nat:6> $ , $ <var:y> = <nat:7> $ , $ <var:F> = <nat:11> $ , $ <var:c> = <nat:4> $ , $ <var:J> = <nat:3> $ , and $ <var:X> = <nat:9> $ . Note $ <nat:7> $ , $ <nat:3> $ , $ <nat:11> $ , $ <nat:4> $ , $ <nat:5> $ , $ <nat:6> $ , $ <nat:9> $ , $ <nat:10> $ and $ <nat:12> \geq <nat:2> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:R> : nat ) := exists <var:T> <var:m> <var:X> <var:F> <var:U> <var:J> <var:c> <var:a> <var:y> : nat , ( <var:y> >= <nat:2> ) /\ ( <var:F> >= <nat:2> ) /\ ( <var:U> >= <nat:2> ) /\ ( <var:J> >= <nat:2> ) /\ ( <var:m> >= <nat:2> ) /\ ( <var:T> >= <nat:2> ) /\ ( <var:c> >= <nat:2> ) /\ ( <var:X> >= <nat:2> ) /\ ( <var:a> >= <nat:2> ) /\ ( <var:F> * <var:a> * <var:T> * <var:X> * <var:J> * <var:c> * <var:y> * <var:U> * <var:m> = <var:R> ) . Theorem <genP:1> : <def:nine-composite> <nat:29937600> . Proof . unfold <def:nine-composite> . exists <nat:10> . exists <nat:6> . exists <nat:9> . exists <nat:11> . exists <nat:12> . exists <nat:3> . exists <nat:4> . exists <nat:5> . exists <nat:7> . assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 