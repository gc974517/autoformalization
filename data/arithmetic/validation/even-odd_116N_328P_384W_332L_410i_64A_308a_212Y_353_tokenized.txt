\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Assuming all $ <var:Y> $ , $ <var:i> $ , $ <var:P> $ , $ <var:a> $ , $ <var:N> $ , $ <var:A> $ , $ <var:L> $ , and $ <var:W> $ the expression $ <nat:116> \times <var:N> + <var:P> \times <nat:328> + <var:W> \times <nat:384> + <var:L> \times <nat:332> + <var:i> \times <nat:410> + <nat:64> \times <var:A> + <nat:353> + <nat:308> \times <var:a> + <var:Y> \times <nat:212> $ will be odd . \end{theorem} \begin{proof} The coefficients $ <nat:328> $ , $ <nat:116> $ , as well as $ <nat:332> $ are clearly even We know the whole numbers $ <nat:384> $ and also $ <nat:212> $ must be even In addition to this , the natural numbers $ <nat:308> $ as well as $ <nat:410> $ are obviously even In addition to this , we know the number $ <nat:64> $ is guaranteed to be an even positive integer Observe $ <nat:353> $ is trivially an odd element of $ \mathbb{Z}^+ $ . We know the summation between even positive integers together and an odd natural must be fundamentally an odd number in $ \mathbb{N} $ . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:Y> <var:i> <var:P> <var:a> <var:N> <var:A> <var:L> <var:W> : nat , Nat . odd ( <nat:116> * <var:N> + <nat:328> * <var:P> + <nat:384> * <var:W> + <nat:332> * <var:L> + <nat:410> * <var:i> + <nat:64> * <var:A> + <nat:308> * <var:a> + <nat:212> * <var:Y> + <nat:353> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:328> = true ) . { auto . } assert ( <genH> : Nat . even <nat:116> = true ) . { auto . } assert ( <genH> : Nat . even <nat:332> = true ) . { auto . } assert ( <genH> : Nat . even <nat:384> = true ) . { auto . } assert ( <genH> : Nat . even <nat:212> = true ) . { auto . } assert ( <genH> : Nat . even <nat:308> = true ) . { auto . } assert ( <genH> : Nat . even <nat:410> = true ) . { auto . } assert ( <genH> : Nat . even <nat:64> = true ) . { auto . } assert ( <genH> : Nat . odd <nat:353> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 