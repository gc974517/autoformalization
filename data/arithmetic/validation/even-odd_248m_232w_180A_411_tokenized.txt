\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:411> + <nat:180> <var:A> + <var:m> <nat:248> + <nat:232> <var:w> $ is odd taking terms $ <var:w> $ , $ <var:A> $ , and $ <var:m> $ . \end{theorem} \begin{proof} It can be checked that this theorem is proven . See the summation $ <var:A> \cdot <nat:180> + <var:m> \cdot <nat:248> + <nat:411> + <var:w> \cdot <nat:232> $ is obviously odd from the fact $ <var:w> * <nat:232> + <var:A> * <nat:180> + <var:m> * <nat:248> $ is known as even . The positive integer $ <nat:248> $ is known to be an even integer . So , the term $ <nat:248> \cdot <var:m> $ is even in addition . In addition to this , the coefficient $ <nat:232> $ is guaranteed to be even . Accordingly , the pair $ <var:w> \cdot <nat:232> $ is guaranteed to be even too . Remember that the whole number $ <nat:180> $ is obviously an even integer . For this reason , the term $ <var:A> \cdot <nat:180> $ is guaranteed to be even also . The theorem must be true since the multiplication between even positive integers with some number is guaranteed to be clearly an even positive integer . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:w> <var:A> <var:m> : nat , Nat . odd ( <nat:180> * <var:A> + <nat:248> * <var:m> + <nat:232> * <var:w> + <nat:411> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:248> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:248> * <var:m> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:232> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:232> * <var:w> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:180> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:180> * <var:A> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:180> * <var:A> + <nat:248> * <var:m> + <nat:232> * <var:w> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 