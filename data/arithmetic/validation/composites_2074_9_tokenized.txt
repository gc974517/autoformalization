\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Granted we get $ <var:c> = <var:e> * <var:z> * <var:X> * <var:i> * <var:E> * <var:U> * <var:H> * <var:S> * <var:l> $ assuming some number $ <var:c> $ plus so that $ <var:S> $ , $ <var:H> $ , $ <var:E> $ , $ <var:U> $ , $ <var:X> $ , $ <var:i> $ , $ <var:l> $ , $ <var:e> $ and $ <var:z> \geq <nat:2> $ given some positive integers $ <var:z> $ , $ <var:l> $ , $ <var:U> $ , $ <var:X> $ , $ <var:S> $ , $ <var:e> $ , $ <var:E> $ , $ <var:i> $ , $ <var:H> $ , then we claim that $ <var:c> $ is a <def:nine-composite> number . \end{definition} \begin{theorem} $ <nat:11975040> = <var:c> $ is a <def:nine-composite> positive integer . \end{theorem} \begin{proof} Note $ <var:U> \cdot <var:i> \cdot <var:l> \cdot <var:z> \cdot <var:H> \cdot <var:S> \cdot <var:X> \cdot <var:e> \cdot <var:E> = <nat:11975040> $ yields $ <var:l> = <nat:11> $ , $ <var:E> = <nat:7> $ , $ <var:U> = <nat:3> $ , $ <var:e> = <nat:2> $ , $ <var:z> = <nat:10> $ , $ <var:H> = <nat:12> $ , $ <var:X> = <nat:6> $ , $ <var:i> = <nat:9> $ and $ <var:S> = <nat:4> $ . This produces <nat:11975040> is <def:nine-composite> . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:c> : nat ) := exists <var:z> <var:l> <var:U> <var:X> <var:S> <var:e> <var:E> <var:i> <var:H> : nat , ( <var:c> = <var:e> * <var:z> * <var:X> * <var:i> * <var:E> * <var:U> * <var:H> * <var:S> * <var:l> ) /\ ( <var:S> >= <nat:2> ) /\ ( <var:H> >= <nat:2> ) /\ ( <var:E> >= <nat:2> ) /\ ( <var:U> >= <nat:2> ) /\ ( <var:X> >= <nat:2> ) /\ ( <var:i> >= <nat:2> ) /\ ( <var:l> >= <nat:2> ) /\ ( <var:e> >= <nat:2> ) /\ ( <var:z> >= <nat:2> ) . Theorem <genP:1> : <def:nine-composite> <nat:11975040> . Proof . unfold <def:nine-composite> . exists <nat:10> . exists <nat:11> . exists <nat:3> . exists <nat:6> . exists <nat:4> . exists <nat:2> . exists <nat:7> . exists <nat:9> . exists <nat:12> . repeat split . all : lia . Qed . 