\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Taking all terms $ <var:H> $ , $ <var:I> $ , $ <var:d> $ , and $ <var:f> $ the formula $ <var:f> <nat:134> + <nat:214> <var:d> + <nat:402> <var:I> + <nat:168> <var:H> + <nat:345> $ is odd . \end{theorem} \begin{proof} The claim must be true as a consequence that $ <nat:214> <var:d> + <var:H> <nat:168> + <var:f> <nat:134> + <nat:402> <var:I> $ is guaranteed to be even . Adding on , remember that the numbers $ <nat:214> $ , $ <nat:168> $ , $ <nat:134> $ , plus $ <nat:402> $ are even . As a consequence , the terms $ <nat:214> \cdot <var:d> $ , $ <var:H> \cdot <nat:168> $ , $ <var:f> \cdot <nat:134> $ , and likewise $ <var:I> \cdot <nat:402> $ is guaranteed to be even in addition . This main result is true as a consequence that multiplying between an even positive integer and an arbitrary number must be even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:H> <var:I> <var:d> <var:f> : nat , Nat . odd ( <nat:134> * <var:f> + <nat:214> * <var:d> + <nat:402> * <var:I> + <nat:168> * <var:H> + <nat:345> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:214> = true ) . { auto . } assert ( <genH> : Nat . even <nat:168> = true ) . { auto . } assert ( <genH> : Nat . even <nat:134> = true ) . { auto . } assert ( <genH> : Nat . even <nat:402> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:214> * <var:d> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:168> * <var:H> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:134> * <var:f> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:402> * <var:I> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:134> * <var:f> + <nat:214> * <var:d> + <nat:402> * <var:I> + <nat:168> * <var:H> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 