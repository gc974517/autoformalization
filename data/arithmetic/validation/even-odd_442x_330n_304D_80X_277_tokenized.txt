\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Taking some unknowns $ <var:X> $ , $ <var:n> $ , $ <var:D> $ , and $ <var:x> $ the summation $ <nat:80> <var:X> + <nat:277> + <nat:442> <var:x> + <nat:304> <var:D> + <nat:330> <var:n> $ will be odd . \end{theorem} \begin{proof} Observe that the leading term $ <nat:80> $ is even . As a consequence , the pair $ <var:X> \times <nat:80> $ is guaranteed to be even additionally . Adding on , notice that the term $ <var:x> \times <nat:442> $ is obviously an even number in $ \mathbb{Z}^+ $ . This claim holds since the integer $ <nat:442> $ is guaranteed to be even . Furthermore , the product $ <var:D> \times <nat:304> $ is even . This fact is true since the multiplication of an even number in $ \mathbb{N} $ with any number in $ \mathbb{Z}^+ $ will be even in addition to the integer $ <nat:304> $ is guaranteed to be an even positive integer . Take note that the coefficient $ <nat:330> $ is obviously even . For this reason , the product $ <nat:330> \times <var:n> $ is even in addition . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:X> <var:n> <var:D> <var:x> : nat , Nat . odd ( <nat:80> * <var:X> + <nat:442> * <var:x> + <nat:304> * <var:D> + <nat:330> * <var:n> + <nat:277> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:80> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:80> * <var:X> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:442> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:442> * <var:x> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:304> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:304> * <var:D> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:330> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:330> * <var:n> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 