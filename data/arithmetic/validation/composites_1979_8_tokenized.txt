\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Take $ <var:m> $ , $ <var:V> $ , $ <var:A> $ , $ <var:H> $ , $ <var:Y> $ , $ <var:r> $ , $ <var:Z> $ , $ <var:S> \in \mathbb{Z}^+ $ satisfying the condition that $ <var:Y> $ , $ <var:S> $ , $ <var:Z> $ , $ <var:H> $ , $ <var:m> $ , $ <var:V> $ , $ <var:A> $ , $ <var:r> \geq <nat:2> $ . We say that some natural number $ <var:b> $ is defined as a <def:eight-composite> positive integer given $ <var:b> = <var:m> \times <var:H> \times <var:V> \times <var:Z> \times <var:r> \times <var:S> \times <var:A> \times <var:Y> $ . For this reason the whole number <nat:498960> is <def:eight-composite> . \end{theorem} \begin{proof} Notice $ <nat:11> $ , $ <nat:9> $ , $ <nat:4> $ , $ <nat:3> $ , $ <nat:5> $ , $ <nat:2> $ , $ <nat:6> $ and $ <nat:7> \geq <nat:2> $ . Plus notice too $ <nat:498960> = <var:r> \cdot <var:V> \cdot <var:S> \cdot <var:A> \cdot <var:m> \cdot <var:H> \cdot <var:Z> \cdot <var:Y> $ gives $ <var:m> = <nat:4> $ , $ <var:r> = <nat:9> $ , $ <var:H> = <nat:6> $ , $ <var:S> = <nat:3> $ , $ <var:Y> = <nat:7> $ , $ <var:Z> = <nat:5> $ , $ <var:V> = <nat:2> $ , and $ <var:A> = <nat:11> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:eight-composite> ( <var:b> : nat ) := exists <var:m> <var:V> <var:A> <var:H> <var:Y> <var:r> <var:Z> <var:S> : nat , ( <var:Y> >= <nat:2> ) /\ ( <var:S> >= <nat:2> ) /\ ( <var:Z> >= <nat:2> ) /\ ( <var:H> >= <nat:2> ) /\ ( <var:m> >= <nat:2> ) /\ ( <var:V> >= <nat:2> ) /\ ( <var:A> >= <nat:2> ) /\ ( <var:r> >= <nat:2> ) /\ ( <var:b> = <var:m> * <var:H> * <var:V> * <var:Z> * <var:r> * <var:S> * <var:A> * <var:Y> ) . Theorem <genP:1> : <def:eight-composite> <nat:498960> . Proof . unfold <def:eight-composite> . assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } exists <nat:4> . exists <nat:2> . exists <nat:11> . exists <nat:6> . exists <nat:7> . exists <nat:9> . exists <nat:5> . exists <nat:3> . repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 