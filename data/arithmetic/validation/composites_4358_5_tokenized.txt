\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Take $ <var:X> $ , $ <var:M> $ , $ <var:E> $ , $ <var:Y> $ , $ <var:P> $ as positive integers . Take that some positive integer $ <var:R> $ is named <def:five-composite> if $ <var:E> \times <var:P> \times <var:M> \times <var:X> \times <var:Y> = <var:R> $ and factors are larger than or equal to <nat:2> . \end{definition} \begin{theorem} The natural number <nat:7920> is a <def:five-composite> integer . \end{theorem} \begin{proof} Recollect that <nat:7920> is a <def:five-composite> natural number granted that it is the product between positive integers $ <var:E> $ , $ <var:P> $ , $ <var:M> $ , $ <var:X> $ , and $ <var:Y> $ larger than or equal to <nat:2> . Let $ <var:P> = <nat:3> $ , $ <var:M> = <nat:11> $ , $ <var:X> = <nat:6> $ , $ <var:E> = <nat:4> $ and $ <var:Y> = <nat:10> $ . We justify <nat:7920> is <def:five-composite> by reason of $ <var:Y> = <nat:10> $ , $ <var:E> = <nat:4> $ , $ <var:M> = <nat:11> $ , $ <var:P> = <nat:3> $ and $ <var:X> = <nat:6> $ are greater than or equal to <nat:2> . Consequently , <nat:7920> is a <def:five-composite> number has been validated . As a consequence , <nat:7920> is the product of some $ <var:M> $ , $ <var:X> $ , $ <var:P> $ , $ <var:E> $ , and $ <var:Y> $ plus $ <var:Y> $ , $ <var:E> $ , $ <var:M> $ , $ <var:P> $ , $ <var:X> \geq <nat:2> $ is true has been proven . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:five-composite> ( <var:R> : nat ) := exists <var:X> <var:M> <var:E> <var:Y> <var:P> : nat , ( <var:E> * <var:P> * <var:M> * <var:X> * <var:Y> = <var:R> ) /\ ( <var:X> >= <nat:2> ) /\ ( <var:M> >= <nat:2> ) /\ ( <var:E> >= <nat:2> ) /\ ( <var:Y> >= <nat:2> ) /\ ( <var:P> >= <nat:2> ) . Theorem <genP:1> : <def:five-composite> <nat:7920> . Proof . unfold <def:five-composite> . exists <nat:6> . exists <nat:11> . exists <nat:4> . exists <nat:10> . exists <nat:3> . assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 