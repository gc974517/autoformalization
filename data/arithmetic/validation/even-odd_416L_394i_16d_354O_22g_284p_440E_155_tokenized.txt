\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:L> \cdot <nat:416> + <var:i> \cdot <nat:394> + <nat:16> \cdot <var:d> + <var:O> \cdot <nat:354> + <var:g> \cdot <nat:22> + <var:p> \cdot <nat:284> + <var:E> \cdot <nat:440> + <nat:155> $ is guaranteed to be odd assuming any natural terms $ <var:E> $ , $ <var:L> $ , $ <var:g> $ , $ <var:i> $ , $ <var:O> $ , $ <var:p> $ , and $ <var:d> $ . \end{theorem} \begin{proof} The numbers $ <nat:22> $ , $ <nat:394> $ , plus $ <nat:354> $ are known to be even numbers in $ \mathbb{Z}^+ $ Recall that the natural numbers $ <nat:16> $ as well as $ <nat:416> $ are clearly even whole numbers Further , see that the positive integer $ <nat:284> $ is known to be even Adding on , the natural number $ <nat:440> $ is an even number in $ \mathbb{Z}^+ $ See that the adding between an even element of $ \mathbb{Z}^+ $ and an odd number in $ \mathbb{N} $ must be instrinsically an odd integer , additionally next , recall that the product of an even positive integer and a number in $ \mathbb{N} $ will be even . We know $ <nat:155> $ is known as an odd element of $ \mathbb{N} $ . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:E> <var:L> <var:g> <var:i> <var:O> <var:p> <var:d> : nat , Nat . odd ( <nat:416> * <var:L> + <nat:394> * <var:i> + <nat:16> * <var:d> + <nat:354> * <var:O> + <nat:22> * <var:g> + <nat:284> * <var:p> + <nat:440> * <var:E> + <nat:155> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:22> = true ) . { auto . } assert ( <genH> : Nat . even <nat:394> = true ) . { auto . } assert ( <genH> : Nat . even <nat:354> = true ) . { auto . } assert ( <genH> : Nat . even <nat:16> = true ) . { auto . } assert ( <genH> : Nat . even <nat:416> = true ) . { auto . } assert ( <genH> : Nat . even <nat:284> = true ) . { auto . } assert ( <genH> : Nat . even <nat:440> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . assert ( <genH> : Nat . odd <nat:155> = true ) . { auto . } rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 