\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Take as given that $ <var:f> $ is <def:seven-composite> assuming that given some $ <var:p> $ , $ <var:B> $ , $ <var:k> $ , $ <var:d> $ , $ <var:A> $ , $ <var:J> $ , $ <var:O> \in \mathbb{N} $ we get $ <var:B> \cdot <var:A> \cdot <var:d> \cdot <var:k> \cdot <var:p> \cdot <var:J> \cdot <var:O> = <var:f> $ for some natural number $ <var:f> $ and so that $ <var:k> $ , $ <var:O> $ , $ <var:A> $ , $ <var:B> $ , $ <var:J> $ , $ <var:p> $ , $ <var:d> \geq <nat:2> $ . So the integer <nat:997920> is a <def:seven-composite> integer . \end{theorem} \begin{proof} Remember <nat:997920> is a <def:seven-composite> whole number wherever it is the product between positive integers $ <var:d> $ , $ <var:k> $ , $ <var:J> $ , $ <var:O> $ , $ <var:A> $ , $ <var:B> $ , and $ <var:p> $ larger than or equivalent to <nat:2> . Allow $ <var:B> = <nat:12> $ , $ <var:O> = <nat:6> $ , $ <var:d> = <nat:11> $ , $ <var:A> = <nat:7> $ , $ <var:k> = <nat:4> $ , $ <var:J> = <nat:5> $ and $ <var:p> = <nat:9> $ . Note $ <nat:12> $ , $ <nat:6> $ , $ <nat:11> $ , $ <nat:5> $ , $ <nat:9> $ , $ <nat:4> $ and $ <nat:7> \geq <nat:2> $ . This hints <nat:997920> is a <def:seven-composite> whole number . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:f> : nat ) := exists <var:p> <var:B> <var:k> <var:d> <var:A> <var:J> <var:O> : nat , ( <var:B> * <var:A> * <var:d> * <var:k> * <var:p> * <var:J> * <var:O> = <var:f> ) /\ ( <var:k> >= <nat:2> ) /\ ( <var:O> >= <nat:2> ) /\ ( <var:A> >= <nat:2> ) /\ ( <var:B> >= <nat:2> ) /\ ( <var:J> >= <nat:2> ) /\ ( <var:p> >= <nat:2> ) /\ ( <var:d> >= <nat:2> ) . Theorem <genP:1> : <def:seven-composite> <nat:997920> . Proof . unfold <def:seven-composite> . exists <nat:9> . exists <nat:12> . exists <nat:4> . exists <nat:11> . exists <nat:7> . exists <nat:5> . exists <nat:6> . assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 