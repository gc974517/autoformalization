\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} There are $ <var:N> $ , $ <var:U> $ , $ <var:M> $ , $ <var:o> $ , $ <var:v> $ , $ <var:O> $ , $ <var:Q> $ , $ <var:B> \in \mathbb{Z}^+ $ more than <nat:1> . Denote that some whole number $ <var:u> $ is called a <def:eight-composite> positive integer assuming $ <var:B> * <var:U> * <var:o> * <var:Q> * <var:O> * <var:M> * <var:N> * <var:v> = <var:u> $ . \end{definition} \begin{theorem} The positive integer <nat:870912> is a <def:eight-composite> integer . \end{theorem} \begin{proof} Recall that a <def:eight-composite> whole number is the multiplication of positive integers $ <var:B> $ , $ <var:o> $ , $ <var:O> $ , $ <var:v> $ , $ <var:Q> $ , $ <var:N> $ , $ <var:M> $ , $ <var:U> $ greater than <nat:1> . Assume $ <var:o> = <nat:12> $ , $ <var:N> = <nat:8> $ , $ <var:M> = <nat:3> $ , $ <var:Q> = <nat:7> $ , $ <var:U> = <nat:6> $ , $ <var:O> = <nat:4> $ , $ <var:B> = <nat:9> $ , $ <var:v> = <nat:2> $ . We verify <nat:870912> is <def:eight-composite> . Note $ <var:U> = <nat:6> $ , $ <var:o> = <nat:12> $ , $ <var:O> = <nat:4> $ , $ <var:B> = <nat:9> $ , $ <var:Q> = <nat:7> $ , $ <var:M> = <nat:3> $ , $ <var:N> = <nat:8> $ , $ <var:v> = <nat:2> > <nat:1> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:eight-composite> ( <var:u> : nat ) := exists <var:N> <var:U> <var:M> <var:o> <var:v> <var:O> <var:Q> <var:B> : nat , ( <var:N> > <nat:1> ) /\ ( <var:U> > <nat:1> ) /\ ( <var:M> > <nat:1> ) /\ ( <var:o> > <nat:1> ) /\ ( <var:v> > <nat:1> ) /\ ( <var:O> > <nat:1> ) /\ ( <var:Q> > <nat:1> ) /\ ( <var:B> > <nat:1> ) /\ ( <var:B> * <var:U> * <var:o> * <var:Q> * <var:O> * <var:M> * <var:N> * <var:v> = <var:u> ) . Theorem <genP:1> : <def:eight-composite> <nat:870912> . Proof . unfold <def:eight-composite> . exists <nat:8> . exists <nat:6> . exists <nat:3> . exists <nat:12> . exists <nat:2> . exists <nat:4> . exists <nat:7> . exists <nat:9> . assert ( <genH> : <nat:6> > <nat:1> ) . { lia . } assert ( <genH> : <nat:12> > <nat:1> ) . { lia . } assert ( <genH> : <nat:4> > <nat:1> ) . { lia . } assert ( <genH> : <nat:9> > <nat:1> ) . { lia . } assert ( <genH> : <nat:7> > <nat:1> ) . { lia . } assert ( <genH> : <nat:3> > <nat:1> ) . { lia . } assert ( <genH> : <nat:8> > <nat:1> ) . { lia . } assert ( <genH> : <nat:2> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 