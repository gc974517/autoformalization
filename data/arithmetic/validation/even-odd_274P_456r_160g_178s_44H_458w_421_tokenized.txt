\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:160> * <var:g> + <var:r> * <nat:456> + <var:s> * <nat:178> + <var:P> * <nat:274> + <nat:421> + <var:w> * <nat:458> + <nat:44> * <var:H> $ will be odd . \end{theorem} \begin{proof} $ <var:P> \times <nat:274> $ is obviously even . In addition to this , recall the pairs $ <var:r> \times <nat:456> $ and likewise $ <var:H> \times <nat:44> $ are guaranteed to be even numbers in $ \mathbb{N} $ . This fact is proven from the fact multiplying between an even element of $ \mathbb{N} $ and any natural number will be an even positive integer . The terms $ <var:g> \times <nat:160> $ plus $ <var:w> \times <nat:458> $ are clearly even natural numbers . Building on , notice $ <nat:178> \times <var:s> $ is known to be an even whole number . This claim holds because taking the product of an even element of $ \mathbb{Z}^+ $ and a integer is guaranteed to be an even integer . It can be demonstrated that that the expression $ <var:P> <nat:274> + <var:r> <nat:456> + <nat:421> + <nat:160> <var:g> + <nat:178> <var:s> + <var:H> <nat:44> + <nat:458> <var:w> $ will be odd . Take note the addition between an even element of $ \mathbb{N} $ and an odd element of $ \mathbb{Z}^+ $ will be an odd element of $ \mathbb{N} $ . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:g> <var:r> <var:s> <var:P> <var:w> <var:H> : nat , Nat . odd ( <nat:160> * <var:g> + <nat:456> * <var:r> + <nat:178> * <var:s> + <nat:274> * <var:P> + <nat:458> * <var:w> + <nat:44> * <var:H> + <nat:421> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:274> * <var:P> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:456> * <var:r> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:44> * <var:H> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:160> * <var:g> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:458> * <var:w> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:178> * <var:s> ) = true ) . { rewrite Nat . even_mul . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 