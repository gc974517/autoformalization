\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:268> * <var:t> + <var:o> * <nat:26> + <var:L> * <nat:316> + <nat:190> * <var:a> + <var:O> * <nat:132> + <nat:493> + <nat:162> * <var:I> + <nat:490> * <var:h> $ must be odd . \end{theorem} \begin{proof} The terms $ <nat:490> <var:h> $ , $ <nat:268> <var:t> $ , and likewise $ <var:o> <nat:26> $ are clearly even . In addition , notice $ <var:I> <nat:162> $ is trivially an even number in $ \mathbb{Z}^+ $ . In addition , the term $ <nat:132> <var:O> $ is guaranteed to be even from the fact multiplying between an even natural number and a element of $ \mathbb{Z}^+ $ will be even . The pair $ <var:a> <nat:190> $ is trivially even . Recall that the product $ <nat:316> <var:L> $ is trivially an even positive integer . We know the addition between an even element of $ \mathbb{N} $ with an odd natural number will be by its very nature an odd element of $ \mathbb{Z}^+ $ . We know $ <nat:493> $ is guaranteed to be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:t> <var:o> <var:L> <var:a> <var:O> <var:I> <var:h> : nat , Nat . odd ( <nat:268> * <var:t> + <nat:26> * <var:o> + <nat:316> * <var:L> + <nat:190> * <var:a> + <nat:132> * <var:O> + <nat:162> * <var:I> + <nat:490> * <var:h> + <nat:493> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:490> * <var:h> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:268> * <var:t> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:26> * <var:o> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:162> * <var:I> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:132> * <var:O> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:190> * <var:a> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:316> * <var:L> ) = true ) . { rewrite Nat . even_mul . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . assert ( <genH> : Nat . odd <nat:493> = true ) . { auto . } rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 