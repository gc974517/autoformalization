\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Granted that we have $ <var:w> $ , $ <var:e> $ , $ <var:k> $ , $ <var:T> $ , $ <var:i> $ , $ <var:p> $ , $ <var:o> $ , $ <var:V> $ , $ <var:r> \geq <nat:2> $ so that assuming $ <var:n> \in \mathbb{Z}^+ $ , $ <var:i> * <var:e> * <var:w> * <var:k> * <var:r> * <var:T> * <var:o> * <var:V> * <var:p> = <var:n> $ assuming some numbers $ <var:r> $ , $ <var:e> $ , $ <var:i> $ , $ <var:V> $ , $ <var:o> $ , $ <var:w> $ , $ <var:k> $ , $ <var:p> $ , $ <var:T> $ , we assume that $ <var:n> $ is <def:nine-composite> . \end{definition} \begin{theorem} The whole number <nat:19958400> is <def:nine-composite> . \end{theorem} \begin{proof} Note $ <nat:4> $ , $ <nat:2> $ , $ <nat:6> $ , $ <nat:12> $ , $ <nat:11> $ , $ <nat:10> $ , $ <nat:7> $ , $ <nat:5> $ , and $ <nat:9> $ are larger than or equivalent to <nat:2> . Furthermore notice still $ <nat:2> \times <nat:5> \times <nat:7> \times <nat:4> \times <nat:12> \times <nat:6> \times <nat:10> \times <nat:11> \times <nat:9> = <var:p> \times <var:i> \times <var:w> \times <var:V> \times <var:r> \times <var:e> \times <var:o> \times <var:T> \times <var:k> = <nat:19958400> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:n> : nat ) := exists <var:r> <var:e> <var:i> <var:V> <var:o> <var:w> <var:k> <var:p> <var:T> : nat , ( <var:w> >= <nat:2> ) /\ ( <var:e> >= <nat:2> ) /\ ( <var:k> >= <nat:2> ) /\ ( <var:T> >= <nat:2> ) /\ ( <var:i> >= <nat:2> ) /\ ( <var:p> >= <nat:2> ) /\ ( <var:o> >= <nat:2> ) /\ ( <var:V> >= <nat:2> ) /\ ( <var:r> >= <nat:2> ) /\ ( <var:i> * <var:e> * <var:w> * <var:k> * <var:r> * <var:T> * <var:o> * <var:V> * <var:p> = <var:n> ) . Theorem <genP:1> : <def:nine-composite> <nat:19958400> . Proof . unfold <def:nine-composite> . assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } exists <nat:12> . exists <nat:6> . exists <nat:5> . exists <nat:4> . exists <nat:10> . exists <nat:7> . exists <nat:9> . exists <nat:2> . exists <nat:11> . repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 