\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:U> \times <nat:138> + <nat:312> \times <var:J> + <nat:426> \times <var:Q> + <nat:360> \times <var:X> + <nat:285> + <var:m> \times <nat:102> + <var:q> \times <nat:146> $ will be odd . \end{theorem} \begin{proof} We know the terms $ <var:J> <nat:312> $ , $ <var:q> <nat:146> $ , $ <nat:138> <var:U> $ , in addition to $ <var:m> <nat:102> $ must be even numbers in $ \mathbb{Z}^+ $ . This must be true by reason that the numbers $ <nat:312> $ , $ <nat:146> $ , $ <nat:138> $ , as well as $ <nat:102> $ will be by definition even whole numbers . The leading term $ <nat:426> $ is clearly even . Hence , the pair $ <var:Q> <nat:426> $ will be even additionally . Notice $ <nat:360> <var:X> $ is even because the multiplication between an even whole number with an arbitrary integer is an even positive integer and also the number $ <nat:360> $ is even . Take note that $ <nat:285> $ is clearly odd . We demonstrate the claim is true . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:U> <var:J> <var:Q> <var:X> <var:m> <var:q> : nat , Nat . odd ( <nat:138> * <var:U> + <nat:312> * <var:J> + <nat:426> * <var:Q> + <nat:360> * <var:X> + <nat:102> * <var:m> + <nat:146> * <var:q> + <nat:285> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:312> = true ) . { auto . } assert ( <genH> : Nat . even <nat:146> = true ) . { auto . } assert ( <genH> : Nat . even <nat:138> = true ) . { auto . } assert ( <genH> : Nat . even <nat:102> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:312> * <var:J> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:146> * <var:q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:138> * <var:U> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:102> * <var:m> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:426> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:426> * <var:Q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:360> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:360> * <var:X> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:285> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 