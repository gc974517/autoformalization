\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:v> * <nat:346> + <var:J> * <nat:102> + <var:N> * <nat:394> + <var:R> * <nat:82> + <nat:26> $ must be even . \end{theorem} \begin{proof} It can be demonstrated that that $ <nat:26> + <nat:102> * <var:J> + <nat:346> * <var:v> + <nat:394> * <var:N> + <nat:82> * <var:R> $ is even because $ <var:v> \cdot <nat:346> + <nat:102> \cdot <var:J> + <var:N> \cdot <nat:394> + <nat:82> \cdot <var:R> $ is known to be even . Adding on , the numbers $ <nat:346> $ , $ <nat:102> $ , $ <nat:394> $ , and $ <nat:82> $ are clearly even . In consequence , the products $ <var:v> \times <nat:346> $ , $ <var:J> \times <nat:102> $ , $ <nat:394> \times <var:N> $ , plus $ <nat:82> \times <var:R> $ is guaranteed to be even in addition . From the fact the product of an even integer with a element of $ \mathbb{N} $ is even the sum $ <var:J> \cdot <nat:102> + <var:N> \cdot <nat:394> + <var:R> \cdot <nat:82> + <var:v> \cdot <nat:346> $ will be instrinsically even . It can be justified that the expression $ <nat:82> \times <var:R> + <var:N> \times <nat:394> + <var:J> \times <nat:102> + <nat:26> + <nat:346> \times <var:v> $ is guaranteed to be even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:v> <var:J> <var:N> <var:R> : nat , Nat . even ( <nat:346> * <var:v> + <nat:102> * <var:J> + <nat:394> * <var:N> + <nat:82> * <var:R> + <nat:26> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:346> = true ) . { auto . } assert ( <genH> : Nat . even <nat:102> = true ) . { auto . } assert ( <genH> : Nat . even <nat:394> = true ) . { auto . } assert ( <genH> : Nat . even <nat:82> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:346> * <var:v> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:102> * <var:J> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:394> * <var:N> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:82> * <var:R> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:346> * <var:v> + <nat:102> * <var:J> + <nat:394> * <var:N> + <nat:82> * <var:R> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . even_add . rewrite <genH> . auto . Qed . 