\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:o> \cdot <nat:168> + <var:E> \cdot <nat:492> + <nat:265> + <var:u> \cdot <nat:126> + <nat:56> \cdot <var:B> + <var:R> \cdot <nat:70> + <nat:144> \cdot <var:y> + <var:j> \cdot <nat:214> + <var:A> \cdot <nat:228> $ must be odd . \end{theorem} \begin{proof} It can be shown that that the formula $ <var:B> * <nat:56> + <nat:168> * <var:o> + <nat:492> * <var:E> + <nat:265> + <nat:70> * <var:R> + <var:A> * <nat:228> + <nat:126> * <var:u> + <nat:214> * <var:j> + <nat:144> * <var:y> $ is trivially odd because the expression $ <var:y> \times <nat:144> + <var:j> \times <nat:214> + <var:o> \times <nat:168> + <nat:56> \times <var:B> + <var:R> \times <nat:70> + <var:E> \times <nat:492> + <var:A> \times <nat:228> + <var:u> \times <nat:126> $ is trivially even . The whole numbers $ <nat:144> $ , $ <nat:214> $ , $ <nat:168> $ , $ <nat:56> $ , $ <nat:70> $ , $ <nat:492> $ , $ <nat:228> $ , and $ <nat:126> $ are known as even integers . Thus , the terms $ <nat:144> * <var:y> $ , $ <nat:214> * <var:j> $ , $ <var:o> * <nat:168> $ , $ <var:B> * <nat:56> $ , $ <var:R> * <nat:70> $ , $ <var:E> * <nat:492> $ , $ <nat:228> * <var:A> $ , and moreover $ <nat:126> * <var:u> $ will be even at the same time . The formula $ <nat:144> * <var:y> + <var:B> * <nat:56> + <nat:492> * <var:E> + <nat:126> * <var:u> + <nat:214> * <var:j> + <var:R> * <nat:70> + <var:A> * <nat:228> + <var:o> * <nat:168> $ is guaranteed to be even because the addition of an even natural and even natural numbers is guaranteed to be trivially an even whole number in addition to from the fact taking the product between even numbers in $ \mathbb{Z}^+ $ with any natural will be in itself an even integer . Observe $ <nat:265> $ is obviously an odd integer . Recall that the summation of an even number in $ \mathbb{Z}^+ $ with an odd integer is odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:o> <var:E> <var:u> <var:B> <var:R> <var:y> <var:j> <var:A> : nat , Nat . odd ( <nat:168> * <var:o> + <nat:492> * <var:E> + <nat:126> * <var:u> + <nat:56> * <var:B> + <nat:70> * <var:R> + <nat:144> * <var:y> + <nat:214> * <var:j> + <nat:228> * <var:A> + <nat:265> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:144> = true ) . { auto . } assert ( <genH> : Nat . even <nat:214> = true ) . { auto . } assert ( <genH> : Nat . even <nat:168> = true ) . { auto . } assert ( <genH> : Nat . even <nat:56> = true ) . { auto . } assert ( <genH> : Nat . even <nat:70> = true ) . { auto . } assert ( <genH> : Nat . even <nat:492> = true ) . { auto . } assert ( <genH> : Nat . even <nat:228> = true ) . { auto . } assert ( <genH> : Nat . even <nat:126> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:144> * <var:y> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:214> * <var:j> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:168> * <var:o> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:56> * <var:B> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:70> * <var:R> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:492> * <var:E> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:228> * <var:A> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:126> * <var:u> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:168> * <var:o> + <nat:492> * <var:E> + <nat:126> * <var:u> + <nat:56> * <var:B> + <nat:70> * <var:R> + <nat:144> * <var:y> + <nat:214> * <var:j> + <nat:228> * <var:A> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } assert ( <genH> : Nat . odd <nat:265> = true ) . { auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . rewrite <genH> . auto . Qed . 