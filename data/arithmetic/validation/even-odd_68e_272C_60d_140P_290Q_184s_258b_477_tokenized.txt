\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:e> * <nat:68> + <nat:272> * <var:C> + <nat:60> * <var:d> + <var:P> * <nat:140> + <nat:290> * <var:Q> + <nat:477> + <nat:184> * <var:s> + <nat:258> * <var:b> $ is guaranteed to be odd using every terms $ <var:b> $ , $ <var:Q> $ , $ <var:s> $ , $ <var:e> $ , $ <var:d> $ , $ <var:C> $ , and $ <var:P> $ . \end{theorem} \begin{proof} Remember the products $ <nat:60> <var:d> $ , $ <nat:272> <var:C> $ , $ <var:s> <nat:184> $ , $ <var:Q> <nat:290> $ , and likewise $ <nat:140> <var:P> $ must be even . This claim holds from the knowledge the product of an even element of $ \mathbb{Z}^+ $ with an arbitrary whole number is an even natural number . In addition to this , the product $ <nat:258> <var:b> $ is known to be even . On top of this , observe that $ <nat:68> <var:e> $ is known as an even element of $ \mathbb{N} $ . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:b> <var:Q> <var:s> <var:e> <var:d> <var:C> <var:P> : nat , Nat . odd ( <nat:68> * <var:e> + <nat:272> * <var:C> + <nat:60> * <var:d> + <nat:140> * <var:P> + <nat:290> * <var:Q> + <nat:184> * <var:s> + <nat:258> * <var:b> + <nat:477> ) = true . Proof . intros . assert ( <genH> : Nat . even ( <nat:60> * <var:d> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:272> * <var:C> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:184> * <var:s> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:290> * <var:Q> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:140> * <var:P> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:258> * <var:b> ) = true ) . { rewrite Nat . even_mul . auto . } assert ( <genH> : Nat . even ( <nat:68> * <var:e> ) = true ) . { rewrite Nat . even_mul . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 