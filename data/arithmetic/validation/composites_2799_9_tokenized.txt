\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} There are $ <var:i> $ , $ <var:o> $ , $ <var:I> $ , $ <var:l> $ , $ <var:Q> $ , $ <var:J> $ , $ <var:G> $ , $ <var:x> $ , $ <var:n> \in \mathbb{Z}^+ $ satisfying the condition that $ <var:i> $ , $ <var:o> $ , $ <var:x> $ , $ <var:n> $ , $ <var:I> $ , $ <var:G> $ , $ <var:J> $ , $ <var:l> $ , and $ <var:Q> \geq <nat:2> $ . Take that some positive integer $ <var:X> $ is named a <def:nine-composite> positive integer given $ <var:X> = <var:G> \times <var:n> \times <var:i> \times <var:Q> \times <var:x> \times <var:I> \times <var:o> \times <var:l> \times <var:J> $ . \end{definition} \begin{theorem} $ <nat:11975040> = <var:X> $ is <def:nine-composite> . \end{theorem} \begin{proof} Recall a <def:nine-composite> positive integer is the multiplication between integers $ <var:i> $ , $ <var:J> $ , $ <var:Q> $ , $ <var:I> $ , $ <var:G> $ , $ <var:o> $ , $ <var:x> $ , $ <var:n> $ , and $ <var:l> $ greater than or equal to <nat:2> . Notice $ <nat:6> $ , $ <nat:11> $ , $ <nat:12> $ , $ <nat:3> $ , $ <nat:2> $ , $ <nat:9> $ , $ <nat:5> $ , $ <nat:7> $ , $ <nat:8> \geq <nat:2> $ . In addition notice that as well $ <nat:11975040> = <nat:12> * <nat:7> * <nat:2> * <nat:11> * <nat:8> * <nat:6> * <nat:5> * <nat:9> * <nat:3> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:X> : nat ) := exists <var:i> <var:o> <var:I> <var:l> <var:Q> <var:J> <var:G> <var:x> <var:n> : nat , ( <var:i> >= <nat:2> ) /\ ( <var:o> >= <nat:2> ) /\ ( <var:x> >= <nat:2> ) /\ ( <var:n> >= <nat:2> ) /\ ( <var:I> >= <nat:2> ) /\ ( <var:G> >= <nat:2> ) /\ ( <var:J> >= <nat:2> ) /\ ( <var:l> >= <nat:2> ) /\ ( <var:Q> >= <nat:2> ) /\ ( <var:X> = <var:G> * <var:n> * <var:i> * <var:Q> * <var:x> * <var:I> * <var:o> * <var:l> * <var:J> ) . Theorem <genP:1> : <def:nine-composite> <nat:11975040> . Proof . unfold <def:nine-composite> . assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } exists <nat:2> . exists <nat:9> . exists <nat:8> . exists <nat:5> . exists <nat:6> . exists <nat:3> . exists <nat:11> . exists <nat:7> . exists <nat:12> . repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 