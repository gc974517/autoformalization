\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Given some whole numbers $ <var:K> $ , $ <var:l> $ , $ <var:D> $ , $ <var:e> $ , $ <var:A> $ , $ <var:s> $ , and $ <var:V> $ $ <var:s> \times <nat:156> + <var:V> \times <nat:14> + <nat:270> \times <var:e> + <var:K> \times <nat:348> + <var:D> \times <nat:368> + <var:A> \times <nat:132> + <nat:228> \times <var:l> + <nat:31> $ will be odd . \end{theorem} \begin{proof} We justify this main result must be true . Observe $ <nat:31> $ is obviously odd . Adding on , take note the terms $ <nat:156> \cdot <var:s> $ , $ <nat:14> \cdot <var:V> $ , $ <nat:270> \cdot <var:e> $ , $ <nat:348> \cdot <var:K> $ , $ <var:D> \cdot <nat:368> $ , $ <var:A> \cdot <nat:132> $ , $ <var:l> \cdot <nat:228> $ , will be even numbers . This fact holds from the knowledge multiplying of an even natural with some whole number is guaranteed to be an even positive integer . This claim is true from the fact the leading terms $ <nat:156> $ , $ <nat:14> $ , $ <nat:270> $ , $ <nat:348> $ , $ <nat:368> $ , $ <nat:132> $ , $ <nat:228> $ , are even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:K> <var:l> <var:D> <var:e> <var:A> <var:s> <var:V> : nat , Nat . odd ( <nat:156> * <var:s> + <nat:14> * <var:V> + <nat:270> * <var:e> + <nat:348> * <var:K> + <nat:368> * <var:D> + <nat:132> * <var:A> + <nat:228> * <var:l> + <nat:31> ) = true . Proof . intros . assert ( <genH> : Nat . odd <nat:31> = true ) . { auto . } assert ( <genH> : Nat . even <nat:156> = true ) . { auto . } assert ( <genH> : Nat . even <nat:14> = true ) . { auto . } assert ( <genH> : Nat . even <nat:270> = true ) . { auto . } assert ( <genH> : Nat . even <nat:348> = true ) . { auto . } assert ( <genH> : Nat . even <nat:368> = true ) . { auto . } assert ( <genH> : Nat . even <nat:132> = true ) . { auto . } assert ( <genH> : Nat . even <nat:228> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:156> * <var:s> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:14> * <var:V> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:270> * <var:e> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:348> * <var:K> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:368> * <var:D> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:132> * <var:A> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:228> * <var:l> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 