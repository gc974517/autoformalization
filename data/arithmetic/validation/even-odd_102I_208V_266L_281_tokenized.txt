\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:281> + <var:L> \cdot <nat:266> + <var:V> \cdot <nat:208> + <nat:102> \cdot <var:I> $ must be odd . \end{theorem} \begin{proof} It can be proven that $ <nat:281> + <var:I> \cdot <nat:102> + <var:L> \cdot <nat:266> + <nat:208> \cdot <var:V> $ will be odd . We use the assumption the fact that the summation $ <nat:102> \cdot <var:I> + <nat:208> \cdot <var:V> + <nat:266> \cdot <var:L> $ is clearly even . Remember the term $ <var:V> <nat:208> $ is clearly an even integer . This claim is true from the fact the whole number $ <nat:208> $ is known to be even . The integer $ <nat:102> $ is known to be even . In consequence , the pair $ <var:I> <nat:102> $ must be even also . In addition to this , we know the term $ <var:L> <nat:266> $ is clearly an even number in $ \mathbb{Z}^+ $ from the knowledge the coefficient $ <nat:266> $ is known as even . Notice that the addition between even elements of $ \mathbb{N} $ with an odd element of $ \mathbb{Z}^+ $ must be odd . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:L> <var:V> <var:I> : nat , Nat . odd ( <nat:266> * <var:L> + <nat:208> * <var:V> + <nat:102> * <var:I> + <nat:281> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:208> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:208> * <var:V> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:102> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:102> * <var:I> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even <nat:266> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:266> * <var:L> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:266> * <var:L> + <nat:208> * <var:V> + <nat:102> * <var:I> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 