\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:z> * <nat:438> + <var:f> * <nat:168> + <var:N> * <nat:28> + <var:y> * <nat:412> + <nat:491> + <var:l> * <nat:404> + <var:r> * <nat:332> + <var:K> * <nat:154> + <nat:432> * <var:D> $ is odd taking integers $ <var:f> $ , $ <var:N> $ , $ <var:D> $ , $ <var:y> $ , $ <var:l> $ , $ <var:r> $ , $ <var:K> $ , and $ <var:z> $ . \end{theorem} \begin{proof} It can be justified that the expression $ <var:f> \cdot <nat:168> + <var:l> \cdot <nat:404> + <nat:438> \cdot <var:z> + <nat:491> + <nat:28> \cdot <var:N> + <nat:432> \cdot <var:D> + <var:K> \cdot <nat:154> + <var:y> \cdot <nat:412> + <nat:332> \cdot <var:r> $ is guaranteed to be odd . The numbers $ <nat:168> $ , $ <nat:404> $ , $ <nat:438> $ , $ <nat:28> $ , $ <nat:432> $ , $ <nat:154> $ , $ <nat:412> $ , additionally $ <nat:332> $ will be even . So , the products $ <var:f> \times <nat:168> $ , $ <var:l> \times <nat:404> $ , $ <var:z> \times <nat:438> $ , $ <nat:28> \times <var:N> $ , $ <nat:432> \times <var:D> $ , $ <var:K> \times <nat:154> $ , $ <var:y> \times <nat:412> $ , in addition to $ <var:r> \times <nat:332> $ is even as well . The summation of even integers concurrently and an odd integer is an odd natural number . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:f> <var:N> <var:D> <var:y> <var:l> <var:r> <var:K> <var:z> : nat , Nat . odd ( <nat:438> * <var:z> + <nat:168> * <var:f> + <nat:28> * <var:N> + <nat:412> * <var:y> + <nat:404> * <var:l> + <nat:332> * <var:r> + <nat:154> * <var:K> + <nat:432> * <var:D> + <nat:491> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:168> = true ) . { auto . } assert ( <genH> : Nat . even <nat:404> = true ) . { auto . } assert ( <genH> : Nat . even <nat:438> = true ) . { auto . } assert ( <genH> : Nat . even <nat:28> = true ) . { auto . } assert ( <genH> : Nat . even <nat:432> = true ) . { auto . } assert ( <genH> : Nat . even <nat:154> = true ) . { auto . } assert ( <genH> : Nat . even <nat:412> = true ) . { auto . } assert ( <genH> : Nat . even <nat:332> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:168> * <var:f> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:404> * <var:l> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:438> * <var:z> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:28> * <var:N> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:432> * <var:D> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:154> * <var:K> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:412> * <var:y> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:332> * <var:r> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 