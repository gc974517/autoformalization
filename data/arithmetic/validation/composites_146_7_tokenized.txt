\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Denote that granted there are integers $ <var:r> $ , $ <var:e> $ , $ <var:l> $ , $ <var:y> $ , $ <var:A> $ , $ <var:a> $ , $ <var:F> $ such that $ <var:l> $ , $ <var:a> $ , $ <var:r> $ , $ <var:A> $ , $ <var:y> $ , $ <var:F> $ and $ <var:e> \geq <nat:2> $ . Claim that some whole number $ <var:X> $ will be named a <def:seven-composite> natural number if $ <var:y> \times <var:A> \times <var:r> \times <var:F> \times <var:a> \times <var:e> \times <var:l> = <var:X> $ . Consequently $ <nat:172800> = <var:X> $ is a <def:seven-composite> positive integer . \end{theorem} \begin{proof} Let $ <var:r> = <nat:3> $ , $ <var:F> = <nat:6> $ , $ <var:a> = <nat:5> $ , $ <var:l> = <nat:12> $ , $ <var:A> = <nat:2> $ , $ <var:e> = <nat:10> $ , and $ <var:y> = <nat:8> $ . Further observe that $ <nat:12> $ , $ <nat:8> $ , $ <nat:2> $ , $ <nat:6> $ , $ <nat:3> $ , $ <nat:5> $ and $ <nat:10> \geq <nat:2> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:X> : nat ) := exists <var:r> <var:e> <var:l> <var:y> <var:A> <var:a> <var:F> : nat , ( <var:l> >= <nat:2> ) /\ ( <var:a> >= <nat:2> ) /\ ( <var:r> >= <nat:2> ) /\ ( <var:A> >= <nat:2> ) /\ ( <var:y> >= <nat:2> ) /\ ( <var:F> >= <nat:2> ) /\ ( <var:e> >= <nat:2> ) /\ ( <var:y> * <var:A> * <var:r> * <var:F> * <var:a> * <var:e> * <var:l> = <var:X> ) . Theorem <genP:1> : <def:seven-composite> <nat:172800> . Proof . unfold <def:seven-composite> . exists <nat:3> . exists <nat:10> . exists <nat:12> . exists <nat:8> . exists <nat:2> . exists <nat:5> . exists <nat:6> . assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 