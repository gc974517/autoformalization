\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:233> + <var:U> <nat:164> + <var:f> <nat:144> + <nat:14> <var:j> + <var:R> <nat:260> + <var:r> <nat:226> + <var:I> <nat:214> $ will be odd given every positive terms $ <var:j> $ , $ <var:R> $ , $ <var:U> $ , $ <var:r> $ , $ <var:I> $ , and $ <var:f> $ . \end{theorem} \begin{proof} The sum $ <var:r> \times <nat:226> + <nat:260> \times <var:R> + <var:j> \times <nat:14> + <var:U> \times <nat:164> + <var:I> \times <nat:214> + <var:f> \times <nat:144> $ is even . Take note that the natural number $ <nat:214> $ is obviously even The whole numbers $ <nat:226> $ , $ <nat:144> $ , plus $ <nat:260> $ must be even Furthermore , remember the number $ <nat:14> $ is known to be an even element of $ \mathbb{N} $ Likewise , the leading term $ <nat:164> $ is even From the fact the adding between even positive integers and even integers is guaranteed to be an even number , and likewise from the fact taking the product of even numbers in $ \mathbb{N} $ with a element of $ \mathbb{N} $ must be an even number in $ \mathbb{N} $ . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:j> <var:R> <var:U> <var:r> <var:I> <var:f> : nat , Nat . odd ( <nat:164> * <var:U> + <nat:144> * <var:f> + <nat:14> * <var:j> + <nat:260> * <var:R> + <nat:226> * <var:r> + <nat:214> * <var:I> + <nat:233> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:214> = true ) . { auto . } assert ( <genH> : Nat . even <nat:226> = true ) . { auto . } assert ( <genH> : Nat . even <nat:144> = true ) . { auto . } assert ( <genH> : Nat . even <nat:260> = true ) . { auto . } assert ( <genH> : Nat . even <nat:14> = true ) . { auto . } assert ( <genH> : Nat . even <nat:164> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:164> * <var:U> + <nat:144> * <var:f> + <nat:14> * <var:j> + <nat:260> * <var:R> + <nat:226> * <var:r> + <nat:214> * <var:I> ) = true ) . { repeat rewrite Nat . even_add . repeat rewrite Nat . even_mul . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 