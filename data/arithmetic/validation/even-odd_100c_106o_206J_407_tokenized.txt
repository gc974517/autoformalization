\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Using every unknowns $ <var:J> $ , $ <var:o> $ , and $ <var:c> $ the summation $ <var:o> \times <nat:106> + <nat:206> \times <var:J> + <nat:407> + <var:c> \times <nat:100> $ is guaranteed to be odd . \end{theorem} \begin{proof} It can be proven that that $ <nat:407> + <var:J> \times <nat:206> + <var:c> \times <nat:100> + <nat:106> \times <var:o> $ is guaranteed to be odd by reason that $ <nat:106> <var:o> + <var:c> <nat:100> + <var:J> <nat:206> $ is clearly even . Notice the integers $ <nat:106> $ , $ <nat:100> $ , $ <nat:206> $ , must be even natural numbers . So , the terms $ <var:o> \times <nat:106> $ , $ <nat:100> \times <var:c> $ , $ <nat:206> \times <var:J> $ , is even also . The formula $ <var:c> \times <nat:100> + <nat:106> \times <var:o> + <var:J> \times <nat:206> $ must be by itself even since the totaling of an even natural number with even elements of $ \mathbb{N} $ will be even and by reason that multiplying of even numbers in $ \mathbb{N} $ with any natural must be even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:J> <var:o> <var:c> : nat , Nat . odd ( <nat:106> * <var:o> + <nat:206> * <var:J> + <nat:100> * <var:c> + <nat:407> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:106> = true ) . { auto . } assert ( <genH> : Nat . even <nat:100> = true ) . { auto . } assert ( <genH> : Nat . even <nat:206> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:106> * <var:o> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:100> * <var:c> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:206> * <var:J> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:106> * <var:o> + <nat:206> * <var:J> + <nat:100> * <var:c> ) = true ) . { repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . rewrite <genH> . auto . Qed . 