\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Given that we have $ <var:G> * <var:I> * <var:Q> * <var:P> * <var:Y> * <var:R> * <var:B> = <var:C> $ with $ <var:C> \in \mathbb{Z}^+ $ plus so that $ <var:Q> $ , $ <var:B> $ , $ <var:I> $ , $ <var:Y> $ , $ <var:G> $ , $ <var:P> $ and $ <var:R> \geq <nat:2> $ , then we define that $ <var:C> $ is a <def:seven-composite> positive integer with some positive integers $ <var:Y> $ , $ <var:R> $ , $ <var:P> $ , $ <var:B> $ , $ <var:I> $ , $ <var:Q> $ , $ <var:G> $ . \end{definition} \begin{theorem} The whole number <nat:427680> is a <def:seven-composite> integer . \end{theorem} \begin{proof} Recall a <def:seven-composite> number is the product between whole numbers $ <var:I> $ , $ <var:P> $ , $ <var:R> $ , $ <var:B> $ , $ <var:G> $ , $ <var:Q> $ , and $ <var:Y> $ more than or equivalent to <nat:2> . Allow $ <var:B> = <nat:4> $ , $ <var:I> = <nat:5> $ , $ <var:G> = <nat:11> $ , $ <var:Y> = <nat:6> $ , $ <var:P> = <nat:9> $ , $ <var:Q> = <nat:3> $ and $ <var:R> = <nat:12> $ . Further note that $ <nat:5> $ , $ <nat:3> $ , $ <nat:12> $ , $ <nat:4> $ , $ <nat:9> $ , $ <nat:6> $ , and $ <nat:11> $ are more than or equal to <nat:2> . This implies the result holds . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:C> : nat ) := exists <var:Y> <var:R> <var:P> <var:B> <var:I> <var:Q> <var:G> : nat , ( <var:G> * <var:I> * <var:Q> * <var:P> * <var:Y> * <var:R> * <var:B> = <var:C> ) /\ ( <var:Q> >= <nat:2> ) /\ ( <var:B> >= <nat:2> ) /\ ( <var:I> >= <nat:2> ) /\ ( <var:Y> >= <nat:2> ) /\ ( <var:G> >= <nat:2> ) /\ ( <var:P> >= <nat:2> ) /\ ( <var:R> >= <nat:2> ) . Theorem <genP:1> : <def:seven-composite> <nat:427680> . Proof . unfold <def:seven-composite> . exists <nat:6> . exists <nat:12> . exists <nat:9> . exists <nat:4> . exists <nat:5> . exists <nat:3> . exists <nat:11> . assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:12> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 