\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Let that $ <var:K> $ is a <def:nine-composite> integer granted given some $ <var:P> $ , $ <var:H> $ , $ <var:Q> $ , $ <var:s> $ , $ <var:v> $ , $ <var:R> $ , $ <var:A> $ , $ <var:O> $ , $ <var:I> \in \mathbb{Z}^+ $ we get $ <var:s> \times <var:O> \times <var:H> \times <var:R> \times <var:I> \times <var:A> \times <var:Q> \times <var:P> \times <var:v> = <var:K> $ assuming some positive integer $ <var:K> $ plus so that $ <var:I> $ , $ <var:Q> $ , $ <var:s> $ , $ <var:O> $ , $ <var:R> $ , $ <var:P> $ , $ <var:H> $ , $ <var:A> $ and $ <var:v> \geq <nat:2> $ . For this reason $ <nat:26611200> = <var:K> $ is a <def:nine-composite> positive integer . \end{theorem} \begin{proof} Remember that <nat:26611200> is a <def:nine-composite> natural number given it is the product of natural numbers $ <var:s> $ , $ <var:R> $ , $ <var:O> $ , $ <var:P> $ , $ <var:I> $ , $ <var:Q> $ , $ <var:v> $ , $ <var:H> $ , and $ <var:A> $ greater than <nat:1> . Take $ <var:O> = <nat:8> $ , $ <var:H> = <nat:5> $ , $ <var:P> = <nat:7> $ , $ <var:s> = <nat:4> $ , $ <var:A> = <nat:12> $ , $ <var:R> = <nat:10> $ , $ <var:v> = <nat:11> $ , $ <var:Q> = <nat:3> $ , and $ <var:I> = <nat:6> $ . Observe $ <nat:7> $ , $ <nat:8> $ , $ <nat:5> $ , $ <nat:3> $ , $ <nat:10> $ , $ <nat:12> $ , $ <nat:6> $ , $ <nat:11> $ , and $ <nat:4> > <nat:1> $ . Because of this , <nat:26611200> is a <def:nine-composite> integer is proven . As a consequence , $ <var:A> * <var:I> * <var:s> * <var:H> * <var:Q> * <var:v> * <var:P> * <var:R> * <var:O> = <nat:26611200> $ plus $ <var:s> $ , $ <var:Q> $ , $ <var:P> $ , $ <var:H> $ , $ <var:v> $ , $ <var:A> $ , $ <var:R> $ , $ <var:I> $ and $ <var:O> > <nat:1> $ is validated . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:K> : nat ) := exists <var:P> <var:H> <var:Q> <var:s> <var:v> <var:R> <var:A> <var:O> <var:I> : nat , ( <var:s> * <var:O> * <var:H> * <var:R> * <var:I> * <var:A> * <var:Q> * <var:P> * <var:v> = <var:K> ) /\ ( <var:I> >= <nat:2> ) /\ ( <var:Q> >= <nat:2> ) /\ ( <var:s> >= <nat:2> ) /\ ( <var:O> >= <nat:2> ) /\ ( <var:R> >= <nat:2> ) /\ ( <var:P> >= <nat:2> ) /\ ( <var:H> >= <nat:2> ) /\ ( <var:A> >= <nat:2> ) /\ ( <var:v> >= <nat:2> ) . Theorem <genP:1> : <def:nine-composite> <nat:26611200> . Proof . unfold <def:nine-composite> . exists <nat:7> . exists <nat:5> . exists <nat:3> . exists <nat:4> . exists <nat:11> . exists <nat:10> . exists <nat:12> . exists <nat:8> . exists <nat:6> . assert ( <genH> : <nat:7> > <nat:1> ) . { lia . } assert ( <genH> : <nat:8> > <nat:1> ) . { lia . } assert ( <genH> : <nat:5> > <nat:1> ) . { lia . } assert ( <genH> : <nat:3> > <nat:1> ) . { lia . } assert ( <genH> : <nat:10> > <nat:1> ) . { lia . } assert ( <genH> : <nat:12> > <nat:1> ) . { lia . } assert ( <genH> : <nat:6> > <nat:1> ) . { lia . } assert ( <genH> : <nat:11> > <nat:1> ) . { lia . } assert ( <genH> : <nat:4> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 