\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:F> \times <nat:218> + <var:e> \times <nat:110> + <var:J> \times <nat:122> + <nat:474> \times <var:b> + <var:G> \times <nat:32> + <nat:384> \times <var:a> + <nat:145> $ must be odd for every positive integers $ <var:e> $ , $ <var:G> $ , $ <var:F> $ , $ <var:b> $ , $ <var:a> $ , and $ <var:J> $ . \end{theorem} \begin{proof} Observe that the products $ <nat:218> \cdot <var:F> $ , $ <nat:110> \cdot <var:e> $ , $ <nat:122> \cdot <var:J> $ , $ <nat:474> \cdot <var:b> $ , $ <nat:32> \cdot <var:G> $ , $ <var:a> \cdot <nat:384> $ , are guaranteed to be even . This fact is true by reason that the multiplication of an even positive integer with some number in $ \mathbb{N} $ is clearly an even positive integer , and must be true since the positive integers $ <nat:218> $ , $ <nat:110> $ , $ <nat:122> $ , $ <nat:474> $ , $ <nat:32> $ , $ <nat:384> $ , are clearly even . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:e> <var:G> <var:F> <var:b> <var:a> <var:J> : nat , Nat . odd ( <nat:218> * <var:F> + <nat:110> * <var:e> + <nat:122> * <var:J> + <nat:474> * <var:b> + <nat:32> * <var:G> + <nat:384> * <var:a> + <nat:145> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:218> = true ) . { auto . } assert ( <genH> : Nat . even <nat:110> = true ) . { auto . } assert ( <genH> : Nat . even <nat:122> = true ) . { auto . } assert ( <genH> : Nat . even <nat:474> = true ) . { auto . } assert ( <genH> : Nat . even <nat:32> = true ) . { auto . } assert ( <genH> : Nat . even <nat:384> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:218> * <var:F> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:110> * <var:e> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:122> * <var:J> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:474> * <var:b> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:32> * <var:G> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:384> * <var:a> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 