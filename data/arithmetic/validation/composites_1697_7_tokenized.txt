\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Take that under the condition that there are $ <var:c> $ , $ <var:m> $ , $ <var:U> $ , $ <var:P> $ , $ <var:i> $ , $ <var:s> $ , $ <var:T> \in \mathbb{N} $ such that $ <var:T> $ , $ <var:c> $ , $ <var:s> $ , $ <var:i> $ , $ <var:P> $ , $ <var:U> $ and $ <var:m> \geq <nat:2> $ . We claim that some natural number $ <var:E> $ is called a <def:seven-composite> positive integer assuming $ <var:E> = <var:m> * <var:P> * <var:s> * <var:i> * <var:U> * <var:c> * <var:T> $ . Consequently <nat:475200> is a <def:seven-composite> whole number . \end{theorem} \begin{proof} Allow $ <var:P> = <nat:2> $ , $ <var:U> = <nat:10> $ , $ <var:m> = <nat:9> $ , $ <var:c> = <nat:8> $ , $ <var:i> = <nat:11> $ , $ <var:T> = <nat:5> $ and $ <var:s> = <nat:6> $ . We confirm $ <nat:475200> = <var:i> \cdot <var:P> \cdot <var:s> \cdot <var:U> \cdot <var:T> \cdot <var:m> \cdot <var:c> $ . Also note that $ <var:T> = <nat:5> $ , $ <var:c> = <nat:8> $ , $ <var:i> = <nat:11> $ , $ <var:U> = <nat:10> $ , $ <var:m> = <nat:9> $ , $ <var:P> = <nat:2> $ , and $ <var:s> = <nat:6> $ are larger than or equal to <nat:2> . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:E> : nat ) := exists <var:c> <var:m> <var:U> <var:P> <var:i> <var:s> <var:T> : nat , ( <var:T> >= <nat:2> ) /\ ( <var:c> >= <nat:2> ) /\ ( <var:s> >= <nat:2> ) /\ ( <var:i> >= <nat:2> ) /\ ( <var:P> >= <nat:2> ) /\ ( <var:U> >= <nat:2> ) /\ ( <var:m> >= <nat:2> ) /\ ( <var:E> = <var:m> * <var:P> * <var:s> * <var:i> * <var:U> * <var:c> * <var:T> ) . Theorem <genP:1> : <def:seven-composite> <nat:475200> . Proof . unfold <def:seven-composite> . exists <nat:8> . exists <nat:9> . exists <nat:10> . exists <nat:2> . exists <nat:11> . exists <nat:6> . exists <nat:5> . assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 