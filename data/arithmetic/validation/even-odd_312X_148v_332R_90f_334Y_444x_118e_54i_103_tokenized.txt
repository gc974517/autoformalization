\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <nat:312> \cdot <var:X> + <nat:148> \cdot <var:v> + <var:R> \cdot <nat:332> + <var:f> \cdot <nat:90> + <var:Y> \cdot <nat:334> + <var:x> \cdot <nat:444> + <nat:103> + <var:e> \cdot <nat:118> + <nat:54> \cdot <var:i> $ is guaranteed to be odd for any positive numbers $ <var:Y> $ , $ <var:x> $ , $ <var:f> $ , $ <var:v> $ , $ <var:R> $ , $ <var:X> $ , $ <var:i> $ , and $ <var:e> $ . \end{theorem} \begin{proof} Remember the whole numbers $ <nat:312> $ , $ <nat:148> $ , $ <nat:332> $ , $ <nat:90> $ , $ <nat:334> $ , $ <nat:444> $ , $ <nat:118> $ , additionally $ <nat:54> $ are obviously even integers . As a consequence , the pairs $ <nat:312> <var:X> $ , $ <nat:148> <var:v> $ , $ <nat:332> <var:R> $ , $ <nat:90> <var:f> $ , $ <nat:334> <var:Y> $ , $ <nat:444> <var:x> $ , $ <var:e> <nat:118> $ , and $ <nat:54> <var:i> $ must be even in addition . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:Y> <var:x> <var:f> <var:v> <var:R> <var:X> <var:i> <var:e> : nat , Nat . odd ( <nat:312> * <var:X> + <nat:148> * <var:v> + <nat:332> * <var:R> + <nat:90> * <var:f> + <nat:334> * <var:Y> + <nat:444> * <var:x> + <nat:118> * <var:e> + <nat:54> * <var:i> + <nat:103> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:312> = true ) . { auto . } assert ( <genH> : Nat . even <nat:148> = true ) . { auto . } assert ( <genH> : Nat . even <nat:332> = true ) . { auto . } assert ( <genH> : Nat . even <nat:90> = true ) . { auto . } assert ( <genH> : Nat . even <nat:334> = true ) . { auto . } assert ( <genH> : Nat . even <nat:444> = true ) . { auto . } assert ( <genH> : Nat . even <nat:118> = true ) . { auto . } assert ( <genH> : Nat . even <nat:54> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:312> * <var:X> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:148> * <var:v> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:332> * <var:R> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:90> * <var:f> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:334> * <var:Y> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:444> * <var:x> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:118> * <var:e> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:54> * <var:i> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 