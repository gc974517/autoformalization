\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Given that there are $ <var:p> $ , $ <var:t> $ , $ <var:V> $ , $ <var:v> $ , $ <var:K> $ , $ <var:c> $ , $ <var:E> $ , $ <var:S> $ , $ <var:l> \in \mathbb{Z}^+ $ more than <nat:1> . We claim that some whole number $ <var:g> $ is considered a <def:nine-composite> positive integer if $ <var:g> = <var:l> \cdot <var:t> \cdot <var:c> \cdot <var:S> \cdot <var:p> \cdot <var:K> \cdot <var:E> \cdot <var:V> \cdot <var:v> $ . Hence $ <nat:5322240> = <var:g> $ is a <def:nine-composite> positive integer . \end{theorem} \begin{proof} Notice that $ <nat:5> \cdot <nat:7> \cdot <nat:6> \cdot <nat:4> \cdot <nat:8> \cdot <nat:2> \cdot <nat:11> \cdot <nat:3> \cdot <nat:12> = <nat:5322240> $ . Further note that $ <nat:4> $ , $ <nat:3> $ , $ <nat:2> $ , $ <nat:12> $ , $ <nat:11> $ , $ <nat:6> $ , $ <nat:8> $ , $ <nat:5> $ , and $ <nat:7> > <nat:1> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:g> : nat ) := exists <var:p> <var:t> <var:V> <var:v> <var:K> <var:c> <var:E> <var:S> <var:l> : nat , ( <var:p> > <nat:1> ) /\ ( <var:t> > <nat:1> ) /\ ( <var:V> > <nat:1> ) /\ ( <var:v> > <nat:1> ) /\ ( <var:K> > <nat:1> ) /\ ( <var:c> > <nat:1> ) /\ ( <var:E> > <nat:1> ) /\ ( <var:S> > <nat:1> ) /\ ( <var:l> > <nat:1> ) /\ ( <var:g> = <var:l> * <var:t> * <var:c> * <var:S> * <var:p> * <var:K> * <var:E> * <var:V> * <var:v> ) . Theorem <genP:1> : <def:nine-composite> <nat:5322240> . Proof . unfold <def:nine-composite> . exists <nat:7> . exists <nat:2> . exists <nat:12> . exists <nat:8> . exists <nat:3> . exists <nat:11> . exists <nat:6> . exists <nat:4> . exists <nat:5> . assert ( <genH> : <nat:4> > <nat:1> ) . { lia . } assert ( <genH> : <nat:3> > <nat:1> ) . { lia . } assert ( <genH> : <nat:2> > <nat:1> ) . { lia . } assert ( <genH> : <nat:12> > <nat:1> ) . { lia . } assert ( <genH> : <nat:11> > <nat:1> ) . { lia . } assert ( <genH> : <nat:6> > <nat:1> ) . { lia . } assert ( <genH> : <nat:8> > <nat:1> ) . { lia . } assert ( <genH> : <nat:5> > <nat:1> ) . { lia . } assert ( <genH> : <nat:7> > <nat:1> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 