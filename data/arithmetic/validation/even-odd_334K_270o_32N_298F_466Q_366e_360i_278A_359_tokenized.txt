\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} $ <var:K> * <nat:334> + <nat:270> * <var:o> + <var:N> * <nat:32> + <var:F> * <nat:298> + <nat:359> + <var:Q> * <nat:466> + <nat:366> * <var:e> + <var:i> * <nat:360> + <var:A> * <nat:278> $ is odd with all $ <var:Q> $ , $ <var:N> $ , $ <var:A> $ , $ <var:F> $ , $ <var:K> $ , $ <var:o> $ , $ <var:e> $ , and $ <var:i> \in \mathbb{Z}^+ $ . \end{theorem} \begin{proof} On top of this , recall that the positive integers $ <nat:334> $ , $ <nat:270> $ , $ <nat:32> $ , $ <nat:298> $ , $ <nat:466> $ , $ <nat:366> $ , $ <nat:360> $ , and also $ <nat:278> $ must be even . Therefore , the terms $ <nat:334> \times <var:K> $ , $ <nat:270> \times <var:o> $ , $ <nat:32> \times <var:N> $ , $ <var:F> \times <nat:298> $ , $ <nat:466> \times <var:Q> $ , $ <var:e> \times <nat:366> $ , $ <var:i> \times <nat:360> $ , plus $ <nat:278> \times <var:A> $ is guaranteed to be even as well . \end{proof} \end{document} 
~
Require Import Arith . Theorem <genP:1> : forall <var:Q> <var:N> <var:A> <var:F> <var:K> <var:o> <var:e> <var:i> : nat , Nat . odd ( <nat:334> * <var:K> + <nat:270> * <var:o> + <nat:32> * <var:N> + <nat:298> * <var:F> + <nat:466> * <var:Q> + <nat:366> * <var:e> + <nat:360> * <var:i> + <nat:278> * <var:A> + <nat:359> ) = true . Proof . intros . assert ( <genH> : Nat . even <nat:334> = true ) . { auto . } assert ( <genH> : Nat . even <nat:270> = true ) . { auto . } assert ( <genH> : Nat . even <nat:32> = true ) . { auto . } assert ( <genH> : Nat . even <nat:298> = true ) . { auto . } assert ( <genH> : Nat . even <nat:466> = true ) . { auto . } assert ( <genH> : Nat . even <nat:366> = true ) . { auto . } assert ( <genH> : Nat . even <nat:360> = true ) . { auto . } assert ( <genH> : Nat . even <nat:278> = true ) . { auto . } assert ( <genH> : Nat . even ( <nat:334> * <var:K> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:270> * <var:o> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:32> * <var:N> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:298> * <var:F> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:466> * <var:Q> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:366> * <var:e> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:360> * <var:i> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } assert ( <genH> : Nat . even ( <nat:278> * <var:A> ) = true ) . { rewrite Nat . even_mul . rewrite <genH> . auto . } rewrite Nat . odd_add . rewrite <- Nat . negb_even . repeat rewrite Nat . even_add . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . rewrite <genH> . auto . Qed . 