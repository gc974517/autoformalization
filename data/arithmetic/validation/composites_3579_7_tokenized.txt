\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} The positive integer <nat:142560> is the multiplication of natural numbers $ <var:D> $ , $ <var:g> $ , $ <var:d> $ , $ <var:V> $ , $ <var:o> $ , $ <var:x> $ , $ <var:k> \in \mathbb{Z}^+ $ so that $ <var:V> $ , $ <var:x> $ , $ <var:g> $ , $ <var:o> $ , $ <var:k> $ , $ <var:D> $ , and $ <var:d> \geq <nat:2> $ . \end{theorem} \begin{proof} Assume $ <var:d> = <nat:8> $ , $ <var:o> = <nat:11> $ , $ <var:g> = <nat:9> $ , $ <var:D> = <nat:5> $ , $ <var:k> = <nat:3> $ , $ <var:V> = <nat:6> $ , $ <var:x> = <nat:2> $ . We verify the principle holds considering $ <nat:3> \cdot <nat:2> \cdot <nat:11> \cdot <nat:5> \cdot <nat:6> \cdot <nat:9> \cdot <nat:8> = <nat:142560> = <var:k> \cdot <var:x> \cdot <var:o> \cdot <var:D> \cdot <var:V> \cdot <var:g> \cdot <var:d> $ plus in view of $ <var:d> = <nat:8> $ , $ <var:x> = <nat:2> $ , $ <var:g> = <nat:9> $ , $ <var:D> = <nat:5> $ , $ <var:k> = <nat:3> $ , $ <var:o> = <nat:11> $ , and $ <var:V> = <nat:6> $ are greater than or equivalent to <nat:2> . \end{proof} \end{document} 
~
Require Import Lia . Theorem <genP:1> : exists <var:D> <var:g> <var:d> <var:V> <var:o> <var:x> <var:k> : nat , ( <nat:142560> = <var:D> * <var:g> * <var:d> * <var:V> * <var:o> * <var:x> * <var:k> ) /\ ( <var:V> >= <nat:2> ) /\ ( <var:x> >= <nat:2> ) /\ ( <var:g> >= <nat:2> ) /\ ( <var:o> >= <nat:2> ) /\ ( <var:k> >= <nat:2> ) /\ ( <var:D> >= <nat:2> ) /\ ( <var:d> >= <nat:2> ) . Proof . exists <nat:5> . exists <nat:9> . exists <nat:8> . exists <nat:6> . exists <nat:11> . exists <nat:2> . exists <nat:3> . assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:11> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 