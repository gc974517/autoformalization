\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \begin{document} \begin{theorem} Let $ <var:R> $ , $ <var:h> $ , $ <var:j> $ , $ <var:C> $ , $ <var:s> $ , $ <var:A> $ , $ <var:Y> \in \mathbb{N} $ satisfying the condition that $ <var:h> $ , $ <var:R> $ , $ <var:C> $ , $ <var:s> $ , $ <var:A> $ , $ <var:Y> $ , $ <var:j> \geq <nat:2> $ . We define that some positive integer $ <var:X> $ is defined to be a <def:seven-composite> whole number if $ <var:Y> * <var:R> * <var:h> * <var:j> * <var:C> * <var:A> * <var:s> = <var:X> $ . So the integer <nat:604800> is <def:seven-composite> . \end{theorem} \begin{proof} Allow $ <var:R> = <nat:4> $ , $ <var:h> = <nat:6> $ , $ <var:C> = <nat:5> $ , $ <var:Y> = <nat:10> $ , $ <var:j> = <nat:8> $ , $ <var:A> = <nat:9> $ , and $ <var:s> = <nat:7> $ . We verify $ <nat:604800> = <var:C> * <var:j> * <var:s> * <var:A> * <var:h> * <var:Y> * <var:R> $ . Note $ <nat:10> \cdot <nat:8> \cdot <nat:6> \cdot <nat:7> \cdot <nat:5> \cdot <nat:9> \cdot <nat:4> = <var:Y> \cdot <var:j> \cdot <var:h> \cdot <var:s> \cdot <var:C> \cdot <var:A> \cdot <var:R> = <nat:604800> $ . Similarly notice that $ <var:Y> = <nat:10> $ , $ <var:A> = <nat:9> $ , $ <var:s> = <nat:7> $ , $ <var:j> = <nat:8> $ , $ <var:h> = <nat:6> $ , $ <var:C> = <nat:5> $ , and $ <var:R> = <nat:4> \geq <nat:2> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:seven-composite> ( <var:X> : nat ) := exists <var:R> <var:h> <var:j> <var:C> <var:s> <var:A> <var:Y> : nat , ( <var:h> >= <nat:2> ) /\ ( <var:R> >= <nat:2> ) /\ ( <var:C> >= <nat:2> ) /\ ( <var:s> >= <nat:2> ) /\ ( <var:A> >= <nat:2> ) /\ ( <var:Y> >= <nat:2> ) /\ ( <var:j> >= <nat:2> ) /\ ( <var:Y> * <var:R> * <var:h> * <var:j> * <var:C> * <var:A> * <var:s> = <var:X> ) . Theorem <genP:1> : <def:seven-composite> <nat:604800> . Proof . unfold <def:seven-composite> . exists <nat:4> . exists <nat:6> . exists <nat:8> . exists <nat:5> . exists <nat:7> . exists <nat:9> . exists <nat:10> . assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 