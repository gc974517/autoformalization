\documentclass[12pt]{article} \usepackage{amsthm,amsfonts,amssymb} \newtheorem{theorem}{Theorem} \newtheorem{definition}{Definition} \begin{document} \begin{definition} Let $ <var:Z> $ , $ <var:B> $ , $ <var:z> $ , $ <var:M> $ , $ <var:T> $ , $ <var:m> $ , $ <var:e> $ , $ <var:N> $ , $ <var:G> $ be natural numbers more than or equivalent to <nat:2> . We say that $ <var:g> \in \mathbb{Z}^+ $ is named a <def:nine-composite> natural number given $ <var:g> = <var:z> * <var:e> * <var:T> * <var:N> * <var:m> * <var:G> * <var:Z> * <var:B> * <var:M> $ . \end{definition} \begin{theorem} $ <var:g> = <nat:3628800> $ is a <def:nine-composite> integer . \end{theorem} \begin{proof} We confirm <nat:3628800> is the product of some integers $ <var:m> $ , $ <var:G> $ , $ <var:B> $ , $ <var:Z> $ , $ <var:M> $ , $ <var:T> $ , $ <var:N> $ , $ <var:e> $ and $ <var:z> $ . Note $ <nat:8> $ , $ <nat:3> $ , $ <nat:6> $ , $ <nat:4> $ , $ <nat:10> $ , $ <nat:2> $ , $ <nat:7> $ , $ <nat:5> $ and $ <nat:9> $ are greater than or equal to <nat:2> . What's more observe additionally $ <nat:3628800> = <nat:3> * <nat:10> * <nat:6> * <nat:8> * <nat:5> * <nat:2> * <nat:7> * <nat:9> * <nat:4> $ . \end{proof} \end{document} 
~
Require Import Lia . Definition <def:nine-composite> ( <var:g> : nat ) := exists <var:Z> <var:B> <var:z> <var:M> <var:T> <var:m> <var:e> <var:N> <var:G> : nat , ( <var:Z> >= <nat:2> ) /\ ( <var:B> >= <nat:2> ) /\ ( <var:z> >= <nat:2> ) /\ ( <var:M> >= <nat:2> ) /\ ( <var:T> >= <nat:2> ) /\ ( <var:m> >= <nat:2> ) /\ ( <var:e> >= <nat:2> ) /\ ( <var:N> >= <nat:2> ) /\ ( <var:G> >= <nat:2> ) /\ ( <var:g> = <var:z> * <var:e> * <var:T> * <var:N> * <var:m> * <var:G> * <var:Z> * <var:B> * <var:M> ) . Theorem <genP:1> : <def:nine-composite> <nat:3628800> . Proof . unfold <def:nine-composite> . assert ( <genH> : <nat:8> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:3> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:6> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:4> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:10> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:2> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:7> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:5> >= <nat:2> ) . { lia . } assert ( <genH> : <nat:9> >= <nat:2> ) . { lia . } exists <nat:10> . exists <nat:5> . exists <nat:4> . exists <nat:6> . exists <nat:8> . exists <nat:9> . exists <nat:3> . exists <nat:7> . exists <nat:2> . repeat split . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . all : try apply <genH> . Qed . 